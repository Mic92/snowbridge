#[allow(dead_code, unused_imports, non_camel_case_types)]
#[allow(clippy::all)]
#[allow(rustdoc::broken_intra_doc_links)]
pub mod api {
    #[allow(unused_imports)]
    mod root_mod {
        pub use super::*;
    }
    pub static PALLETS: [&str; 29usize] = [
        "System",
        "ParachainSystem",
        "Timestamp",
        "ParachainInfo",
        "Balances",
        "TransactionPayment",
        "Authorship",
        "CollatorSelection",
        "Session",
        "Aura",
        "AuraExt",
        "XcmpQueue",
        "PolkadotXcm",
        "CumulusXcm",
        "Utility",
        "Multisig",
        "BridgeRelayers",
        "BridgeWestendGrandpa",
        "BridgeWestendParachains",
        "BridgeWestendMessages",
        "XcmOverBridgeHubWestend",
        "BridgePolkadotBulletinGrandpa",
        "BridgePolkadotBulletinMessages",
        "XcmOverPolkadotBulletin",
        "EthereumInboundQueue",
        "EthereumOutboundQueue",
        "EthereumBeaconClient",
        "EthereumSystem",
        "MessageQueue",
    ];
    pub static RUNTIME_APIS: [&str; 21usize] = [
        "AuraApi",
        "Core",
        "Metadata",
        "BlockBuilder",
        "TaggedTransactionQueue",
        "OffchainWorkerApi",
        "SessionKeys",
        "AccountNonceApi",
        "TransactionPaymentApi",
        "TransactionPaymentCallApi",
        "CollectCollationInfo",
        "WestendFinalityApi",
        "BridgeHubWestendFinalityApi",
        "FromBridgeHubWestendInboundLaneApi",
        "ToBridgeHubWestendOutboundLaneApi",
        "PolkadotBulletinFinalityApi",
        "FromPolkadotBulletinInboundLaneApi",
        "ToPolkadotBulletinOutboundLaneApi",
        "OutboundQueueApi",
        "ControlApi",
        "GenesisBuilder",
    ];
    #[doc = r" The error type returned when there is a runtime issue."]
    pub type DispatchError = runtime_types::sp_runtime::DispatchError;
    #[doc = r" The outer event enum."]
    pub type Event = runtime_types::bridge_hub_rococo_runtime::RuntimeEvent;
    #[doc = r" The outer extrinsic enum."]
    pub type Call = runtime_types::bridge_hub_rococo_runtime::RuntimeCall;
    #[doc = r" The outer error enum representing the DispatchError's Module variant."]
    pub type Error = runtime_types::bridge_hub_rococo_runtime::RuntimeError;
    pub fn constants() -> ConstantsApi {
        ConstantsApi
    }
    pub fn storage() -> StorageApi {
        StorageApi
    }
    pub fn tx() -> TransactionApi {
        TransactionApi
    }
    pub fn apis() -> runtime_apis::RuntimeApi {
        runtime_apis::RuntimeApi
    }
    pub mod runtime_apis {
        use super::root_mod;
        use super::runtime_types;
        use ::subxt::ext::codec::Encode;
        pub struct RuntimeApi;
        impl RuntimeApi {
            pub fn aura_api(&self) -> aura_api::AuraApi {
                aura_api::AuraApi
            }
            pub fn core(&self) -> core::Core {
                core::Core
            }
            pub fn metadata(&self) -> metadata::Metadata {
                metadata::Metadata
            }
            pub fn block_builder(&self) -> block_builder::BlockBuilder {
                block_builder::BlockBuilder
            }
            pub fn tagged_transaction_queue(
                &self,
            ) -> tagged_transaction_queue::TaggedTransactionQueue {
                tagged_transaction_queue::TaggedTransactionQueue
            }
            pub fn offchain_worker_api(&self) -> offchain_worker_api::OffchainWorkerApi {
                offchain_worker_api::OffchainWorkerApi
            }
            pub fn session_keys(&self) -> session_keys::SessionKeys {
                session_keys::SessionKeys
            }
            pub fn account_nonce_api(&self) -> account_nonce_api::AccountNonceApi {
                account_nonce_api::AccountNonceApi
            }
            pub fn transaction_payment_api(
                &self,
            ) -> transaction_payment_api::TransactionPaymentApi {
                transaction_payment_api::TransactionPaymentApi
            }
            pub fn transaction_payment_call_api(
                &self,
            ) -> transaction_payment_call_api::TransactionPaymentCallApi {
                transaction_payment_call_api::TransactionPaymentCallApi
            }
            pub fn collect_collation_info(&self) -> collect_collation_info::CollectCollationInfo {
                collect_collation_info::CollectCollationInfo
            }
            pub fn westend_finality_api(&self) -> westend_finality_api::WestendFinalityApi {
                westend_finality_api::WestendFinalityApi
            }
            pub fn bridge_hub_westend_finality_api(
                &self,
            ) -> bridge_hub_westend_finality_api::BridgeHubWestendFinalityApi {
                bridge_hub_westend_finality_api::BridgeHubWestendFinalityApi
            }
            pub fn from_bridge_hub_westend_inbound_lane_api(
                &self,
            ) -> from_bridge_hub_westend_inbound_lane_api::FromBridgeHubWestendInboundLaneApi
            {
                from_bridge_hub_westend_inbound_lane_api::FromBridgeHubWestendInboundLaneApi
            }
            pub fn to_bridge_hub_westend_outbound_lane_api(
                &self,
            ) -> to_bridge_hub_westend_outbound_lane_api::ToBridgeHubWestendOutboundLaneApi
            {
                to_bridge_hub_westend_outbound_lane_api::ToBridgeHubWestendOutboundLaneApi
            }
            pub fn polkadot_bulletin_finality_api(
                &self,
            ) -> polkadot_bulletin_finality_api::PolkadotBulletinFinalityApi {
                polkadot_bulletin_finality_api::PolkadotBulletinFinalityApi
            }
            pub fn from_polkadot_bulletin_inbound_lane_api(
                &self,
            ) -> from_polkadot_bulletin_inbound_lane_api::FromPolkadotBulletinInboundLaneApi
            {
                from_polkadot_bulletin_inbound_lane_api::FromPolkadotBulletinInboundLaneApi
            }
            pub fn to_polkadot_bulletin_outbound_lane_api(
                &self,
            ) -> to_polkadot_bulletin_outbound_lane_api::ToPolkadotBulletinOutboundLaneApi
            {
                to_polkadot_bulletin_outbound_lane_api::ToPolkadotBulletinOutboundLaneApi
            }
            pub fn outbound_queue_api(&self) -> outbound_queue_api::OutboundQueueApi {
                outbound_queue_api::OutboundQueueApi
            }
            pub fn control_api(&self) -> control_api::ControlApi {
                control_api::ControlApi
            }
            pub fn genesis_builder(&self) -> genesis_builder::GenesisBuilder {
                genesis_builder::GenesisBuilder
            }
        }
        pub mod aura_api {
            use super::root_mod;
            use super::runtime_types;
            #[doc = " API necessary for block authorship with aura."]
            pub struct AuraApi;
            impl AuraApi {
                #[doc = " Returns the slot duration for Aura."]
                #[doc = ""]
                #[doc = " Currently, only the value provided by this type at genesis will be used."]
                pub fn slot_duration(
                    &self,
                ) -> ::subxt::runtime_api::Payload<
                    types::SlotDuration,
                    types::slot_duration::output::Output,
                > {
                    ::subxt::runtime_api::Payload::new_static(
                        "AuraApi",
                        "slot_duration",
                        types::SlotDuration {},
                        [
                            233u8, 210u8, 132u8, 172u8, 100u8, 125u8, 239u8, 92u8, 114u8, 82u8,
                            7u8, 110u8, 179u8, 196u8, 10u8, 19u8, 211u8, 15u8, 174u8, 2u8, 91u8,
                            73u8, 133u8, 100u8, 205u8, 201u8, 191u8, 60u8, 163u8, 122u8, 215u8,
                            10u8,
                        ],
                    )
                }
                #[doc = " Return the current set of authorities."]
                pub fn authorities(
                    &self,
                ) -> ::subxt::runtime_api::Payload<
                    types::Authorities,
                    types::authorities::output::Output,
                > {
                    ::subxt::runtime_api::Payload::new_static(
                        "AuraApi",
                        "authorities",
                        types::Authorities {},
                        [
                            96u8, 136u8, 226u8, 244u8, 105u8, 189u8, 8u8, 250u8, 71u8, 230u8, 37u8,
                            123u8, 218u8, 47u8, 179u8, 16u8, 170u8, 181u8, 165u8, 77u8, 102u8,
                            51u8, 43u8, 51u8, 186u8, 84u8, 49u8, 15u8, 208u8, 226u8, 129u8, 230u8,
                        ],
                    )
                }
            }
            pub mod types {
                use super::runtime_types;
                pub mod slot_duration {
                    use super::runtime_types;
                    pub mod output {
                        use super::runtime_types;
                        pub type Output = runtime_types::sp_consensus_slots::SlotDuration;
                    }
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SlotDuration {}
                pub mod authorities {
                    use super::runtime_types;
                    pub mod output {
                        use super::runtime_types;
                        pub type Output = ::std::vec::Vec<
                            runtime_types::sp_consensus_aura::sr25519::app_sr25519::Public,
                        >;
                    }
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Authorities {}
            }
        }
        pub mod core {
            use super::root_mod;
            use super::runtime_types;
            #[doc = " The `Core` runtime api that every Substrate runtime needs to implement."]
            pub struct Core;
            impl Core {
                #[doc = " Returns the version of the runtime."]
                pub fn version(
                    &self,
                ) -> ::subxt::runtime_api::Payload<types::Version, types::version::output::Output>
                {
                    ::subxt::runtime_api::Payload::new_static(
                        "Core",
                        "version",
                        types::Version {},
                        [
                            76u8, 202u8, 17u8, 117u8, 189u8, 237u8, 239u8, 237u8, 151u8, 17u8,
                            125u8, 159u8, 218u8, 92u8, 57u8, 238u8, 64u8, 147u8, 40u8, 72u8, 157u8,
                            116u8, 37u8, 195u8, 156u8, 27u8, 123u8, 173u8, 178u8, 102u8, 136u8,
                            6u8,
                        ],
                    )
                }
                #[doc = " Execute the given block."]
                pub fn execute_block(
                    &self,
                    block: types::execute_block::Block,
                ) -> ::subxt::runtime_api::Payload<
                    types::ExecuteBlock,
                    types::execute_block::output::Output,
                > {
                    ::subxt::runtime_api::Payload::new_static(
                        "Core",
                        "execute_block",
                        types::ExecuteBlock { block },
                        [
                            133u8, 135u8, 228u8, 65u8, 106u8, 27u8, 85u8, 158u8, 112u8, 254u8,
                            93u8, 26u8, 102u8, 201u8, 118u8, 216u8, 249u8, 247u8, 91u8, 74u8, 56u8,
                            208u8, 231u8, 115u8, 131u8, 29u8, 209u8, 6u8, 65u8, 57u8, 214u8, 125u8,
                        ],
                    )
                }
                #[doc = " Initialize a block with the given header."]
                pub fn initialize_block(
                    &self,
                    header: types::initialize_block::Header,
                ) -> ::subxt::runtime_api::Payload<
                    types::InitializeBlock,
                    types::initialize_block::output::Output,
                > {
                    ::subxt::runtime_api::Payload::new_static(
                        "Core",
                        "initialize_block",
                        types::InitializeBlock { header },
                        [
                            146u8, 138u8, 72u8, 240u8, 63u8, 96u8, 110u8, 189u8, 77u8, 92u8, 96u8,
                            232u8, 41u8, 217u8, 105u8, 148u8, 83u8, 190u8, 152u8, 219u8, 19u8,
                            87u8, 163u8, 1u8, 232u8, 25u8, 221u8, 74u8, 224u8, 67u8, 223u8, 34u8,
                        ],
                    )
                }
            }
            pub mod types {
                use super::runtime_types;
                pub mod version {
                    use super::runtime_types;
                    pub mod output {
                        use super::runtime_types;
                        pub type Output = runtime_types::sp_version::RuntimeVersion;
                    }
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Version {}
                pub mod execute_block {
                    use super::runtime_types;
                    pub type Block = runtime_types :: sp_runtime :: generic :: block :: Block < runtime_types :: sp_runtime :: generic :: header :: Header < :: core :: primitive :: u32 > , :: subxt :: utils :: UncheckedExtrinsic < :: subxt :: utils :: MultiAddress < :: subxt :: utils :: AccountId32 , () > , runtime_types :: bridge_hub_rococo_runtime :: RuntimeCall , runtime_types :: sp_runtime :: MultiSignature , (runtime_types :: frame_system :: extensions :: check_non_zero_sender :: CheckNonZeroSender , runtime_types :: frame_system :: extensions :: check_spec_version :: CheckSpecVersion , runtime_types :: frame_system :: extensions :: check_tx_version :: CheckTxVersion , runtime_types :: frame_system :: extensions :: check_genesis :: CheckGenesis , runtime_types :: frame_system :: extensions :: check_mortality :: CheckMortality , runtime_types :: frame_system :: extensions :: check_nonce :: CheckNonce , runtime_types :: frame_system :: extensions :: check_weight :: CheckWeight , runtime_types :: pallet_transaction_payment :: ChargeTransactionPayment , runtime_types :: bridge_hub_rococo_runtime :: BridgeRejectObsoleteHeadersAndMessages , (runtime_types :: bridge_runtime_common :: refund_relayer_extension :: RefundSignedExtensionAdapter < runtime_types :: bridge_runtime_common :: refund_relayer_extension :: RefundBridgedParachainMessages > , runtime_types :: bridge_runtime_common :: refund_relayer_extension :: RefundSignedExtensionAdapter < runtime_types :: bridge_runtime_common :: refund_relayer_extension :: RefundBridgedGrandpaMessages > ,) ,) > > ;
                    pub mod output {
                        use super::runtime_types;
                        pub type Output = ();
                    }
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ExecuteBlock {
                    pub block: execute_block::Block,
                }
                pub mod initialize_block {
                    use super::runtime_types;
                    pub type Header =
                        runtime_types::sp_runtime::generic::header::Header<::core::primitive::u32>;
                    pub mod output {
                        use super::runtime_types;
                        pub type Output = ();
                    }
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct InitializeBlock {
                    pub header: initialize_block::Header,
                }
            }
        }
        pub mod metadata {
            use super::root_mod;
            use super::runtime_types;
            #[doc = " The `Metadata` api trait that returns metadata for the runtime."]
            pub struct Metadata;
            impl Metadata {
                #[doc = " Returns the metadata of a runtime."]
                pub fn metadata(
                    &self,
                ) -> ::subxt::runtime_api::Payload<types::Metadata, types::metadata::output::Output>
                {
                    ::subxt::runtime_api::Payload::new_static(
                        "Metadata",
                        "metadata",
                        types::Metadata {},
                        [
                            231u8, 24u8, 67u8, 152u8, 23u8, 26u8, 188u8, 82u8, 229u8, 6u8, 185u8,
                            27u8, 175u8, 68u8, 83u8, 122u8, 69u8, 89u8, 185u8, 74u8, 248u8, 87u8,
                            217u8, 124u8, 193u8, 252u8, 199u8, 186u8, 196u8, 179u8, 179u8, 96u8,
                        ],
                    )
                }
                #[doc = " Returns the metadata at a given version."]
                #[doc = ""]
                #[doc = " If the given `version` isn't supported, this will return `None`."]
                #[doc = " Use [`Self::metadata_versions`] to find out about supported metadata version of the runtime."]
                pub fn metadata_at_version(
                    &self,
                    version: types::metadata_at_version::Version,
                ) -> ::subxt::runtime_api::Payload<
                    types::MetadataAtVersion,
                    types::metadata_at_version::output::Output,
                > {
                    ::subxt::runtime_api::Payload::new_static(
                        "Metadata",
                        "metadata_at_version",
                        types::MetadataAtVersion { version },
                        [
                            131u8, 53u8, 212u8, 234u8, 16u8, 25u8, 120u8, 252u8, 153u8, 153u8,
                            216u8, 28u8, 54u8, 113u8, 52u8, 236u8, 146u8, 68u8, 142u8, 8u8, 10u8,
                            169u8, 131u8, 142u8, 204u8, 38u8, 48u8, 108u8, 134u8, 86u8, 226u8,
                            61u8,
                        ],
                    )
                }
                #[doc = " Returns the supported metadata versions."]
                #[doc = ""]
                #[doc = " This can be used to call `metadata_at_version`."]
                pub fn metadata_versions(
                    &self,
                ) -> ::subxt::runtime_api::Payload<
                    types::MetadataVersions,
                    types::metadata_versions::output::Output,
                > {
                    ::subxt::runtime_api::Payload::new_static(
                        "Metadata",
                        "metadata_versions",
                        types::MetadataVersions {},
                        [
                            23u8, 144u8, 137u8, 91u8, 188u8, 39u8, 231u8, 208u8, 252u8, 218u8,
                            224u8, 176u8, 77u8, 32u8, 130u8, 212u8, 223u8, 76u8, 100u8, 190u8,
                            82u8, 94u8, 190u8, 8u8, 82u8, 244u8, 225u8, 179u8, 85u8, 176u8, 56u8,
                            16u8,
                        ],
                    )
                }
            }
            pub mod types {
                use super::runtime_types;
                pub mod metadata {
                    use super::runtime_types;
                    pub mod output {
                        use super::runtime_types;
                        pub type Output = runtime_types::sp_core::OpaqueMetadata;
                    }
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Metadata {}
                pub mod metadata_at_version {
                    use super::runtime_types;
                    pub type Version = ::core::primitive::u32;
                    pub mod output {
                        use super::runtime_types;
                        pub type Output =
                            ::core::option::Option<runtime_types::sp_core::OpaqueMetadata>;
                    }
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct MetadataAtVersion {
                    pub version: metadata_at_version::Version,
                }
                pub mod metadata_versions {
                    use super::runtime_types;
                    pub mod output {
                        use super::runtime_types;
                        pub type Output = ::std::vec::Vec<::core::primitive::u32>;
                    }
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct MetadataVersions {}
            }
        }
        pub mod block_builder {
            use super::root_mod;
            use super::runtime_types;
            #[doc = " The `BlockBuilder` api trait that provides the required functionality for building a block."]
            pub struct BlockBuilder;
            impl BlockBuilder {
                #[doc = " Apply the given extrinsic."]
                #[doc = ""]
                #[doc = " Returns an inclusion outcome which specifies if this extrinsic is included in"]
                #[doc = " this block or not."]
                pub fn apply_extrinsic(
                    &self,
                    extrinsic: types::apply_extrinsic::Extrinsic,
                ) -> ::subxt::runtime_api::Payload<
                    types::ApplyExtrinsic,
                    types::apply_extrinsic::output::Output,
                > {
                    ::subxt::runtime_api::Payload::new_static(
                        "BlockBuilder",
                        "apply_extrinsic",
                        types::ApplyExtrinsic { extrinsic },
                        [
                            72u8, 54u8, 139u8, 3u8, 118u8, 136u8, 65u8, 47u8, 6u8, 105u8, 125u8,
                            223u8, 160u8, 29u8, 103u8, 74u8, 79u8, 149u8, 48u8, 90u8, 237u8, 2u8,
                            97u8, 201u8, 123u8, 34u8, 167u8, 37u8, 187u8, 35u8, 176u8, 97u8,
                        ],
                    )
                }
                #[doc = " Finish the current block."]
                pub fn finalize_block(
                    &self,
                ) -> ::subxt::runtime_api::Payload<
                    types::FinalizeBlock,
                    types::finalize_block::output::Output,
                > {
                    ::subxt::runtime_api::Payload::new_static(
                        "BlockBuilder",
                        "finalize_block",
                        types::FinalizeBlock {},
                        [
                            244u8, 207u8, 24u8, 33u8, 13u8, 69u8, 9u8, 249u8, 145u8, 143u8, 122u8,
                            96u8, 197u8, 55u8, 64u8, 111u8, 238u8, 224u8, 34u8, 201u8, 27u8, 146u8,
                            232u8, 99u8, 191u8, 30u8, 114u8, 16u8, 32u8, 220u8, 58u8, 62u8,
                        ],
                    )
                }
                #[doc = " Generate inherent extrinsics. The inherent data will vary from chain to chain."]
                pub fn inherent_extrinsics(
                    &self,
                    inherent: types::inherent_extrinsics::Inherent,
                ) -> ::subxt::runtime_api::Payload<
                    types::InherentExtrinsics,
                    types::inherent_extrinsics::output::Output,
                > {
                    ::subxt::runtime_api::Payload::new_static(
                        "BlockBuilder",
                        "inherent_extrinsics",
                        types::InherentExtrinsics { inherent },
                        [
                            254u8, 110u8, 245u8, 201u8, 250u8, 192u8, 27u8, 228u8, 151u8, 213u8,
                            166u8, 89u8, 94u8, 81u8, 189u8, 234u8, 64u8, 18u8, 245u8, 80u8, 29u8,
                            18u8, 140u8, 129u8, 113u8, 236u8, 135u8, 55u8, 79u8, 159u8, 175u8,
                            183u8,
                        ],
                    )
                }
                #[doc = " Check that the inherents are valid. The inherent data will vary from chain to chain."]
                pub fn check_inherents(
                    &self,
                    block: types::check_inherents::Block,
                    data: types::check_inherents::Data,
                ) -> ::subxt::runtime_api::Payload<
                    types::CheckInherents,
                    types::check_inherents::output::Output,
                > {
                    ::subxt::runtime_api::Payload::new_static(
                        "BlockBuilder",
                        "check_inherents",
                        types::CheckInherents { block, data },
                        [
                            153u8, 134u8, 1u8, 215u8, 139u8, 11u8, 53u8, 51u8, 210u8, 175u8, 197u8,
                            28u8, 38u8, 209u8, 175u8, 247u8, 142u8, 157u8, 50u8, 151u8, 164u8,
                            191u8, 181u8, 118u8, 80u8, 97u8, 160u8, 248u8, 110u8, 217u8, 181u8,
                            234u8,
                        ],
                    )
                }
            }
            pub mod types {
                use super::runtime_types;
                pub mod apply_extrinsic {
                    use super::runtime_types;
                    pub type Extrinsic = :: subxt :: utils :: UncheckedExtrinsic < :: subxt :: utils :: MultiAddress < :: subxt :: utils :: AccountId32 , () > , runtime_types :: bridge_hub_rococo_runtime :: RuntimeCall , runtime_types :: sp_runtime :: MultiSignature , (runtime_types :: frame_system :: extensions :: check_non_zero_sender :: CheckNonZeroSender , runtime_types :: frame_system :: extensions :: check_spec_version :: CheckSpecVersion , runtime_types :: frame_system :: extensions :: check_tx_version :: CheckTxVersion , runtime_types :: frame_system :: extensions :: check_genesis :: CheckGenesis , runtime_types :: frame_system :: extensions :: check_mortality :: CheckMortality , runtime_types :: frame_system :: extensions :: check_nonce :: CheckNonce , runtime_types :: frame_system :: extensions :: check_weight :: CheckWeight , runtime_types :: pallet_transaction_payment :: ChargeTransactionPayment , runtime_types :: bridge_hub_rococo_runtime :: BridgeRejectObsoleteHeadersAndMessages , (runtime_types :: bridge_runtime_common :: refund_relayer_extension :: RefundSignedExtensionAdapter < runtime_types :: bridge_runtime_common :: refund_relayer_extension :: RefundBridgedParachainMessages > , runtime_types :: bridge_runtime_common :: refund_relayer_extension :: RefundSignedExtensionAdapter < runtime_types :: bridge_runtime_common :: refund_relayer_extension :: RefundBridgedGrandpaMessages > ,) ,) > ;
                    pub mod output {
                        use super::runtime_types;
                        pub type Output = :: core :: result :: Result < :: core :: result :: Result < () , runtime_types :: sp_runtime :: DispatchError > , runtime_types :: sp_runtime :: transaction_validity :: TransactionValidityError > ;
                    }
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ApplyExtrinsic {
                    pub extrinsic: apply_extrinsic::Extrinsic,
                }
                pub mod finalize_block {
                    use super::runtime_types;
                    pub mod output {
                        use super::runtime_types;
                        pub type Output = runtime_types::sp_runtime::generic::header::Header<
                            ::core::primitive::u32,
                        >;
                    }
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct FinalizeBlock {}
                pub mod inherent_extrinsics {
                    use super::runtime_types;
                    pub type Inherent = runtime_types::sp_inherents::InherentData;
                    pub mod output {
                        use super::runtime_types;
                        pub type Output = :: std :: vec :: Vec < :: subxt :: utils :: UncheckedExtrinsic < :: subxt :: utils :: MultiAddress < :: subxt :: utils :: AccountId32 , () > , runtime_types :: bridge_hub_rococo_runtime :: RuntimeCall , runtime_types :: sp_runtime :: MultiSignature , (runtime_types :: frame_system :: extensions :: check_non_zero_sender :: CheckNonZeroSender , runtime_types :: frame_system :: extensions :: check_spec_version :: CheckSpecVersion , runtime_types :: frame_system :: extensions :: check_tx_version :: CheckTxVersion , runtime_types :: frame_system :: extensions :: check_genesis :: CheckGenesis , runtime_types :: frame_system :: extensions :: check_mortality :: CheckMortality , runtime_types :: frame_system :: extensions :: check_nonce :: CheckNonce , runtime_types :: frame_system :: extensions :: check_weight :: CheckWeight , runtime_types :: pallet_transaction_payment :: ChargeTransactionPayment , runtime_types :: bridge_hub_rococo_runtime :: BridgeRejectObsoleteHeadersAndMessages , (runtime_types :: bridge_runtime_common :: refund_relayer_extension :: RefundSignedExtensionAdapter < runtime_types :: bridge_runtime_common :: refund_relayer_extension :: RefundBridgedParachainMessages > , runtime_types :: bridge_runtime_common :: refund_relayer_extension :: RefundSignedExtensionAdapter < runtime_types :: bridge_runtime_common :: refund_relayer_extension :: RefundBridgedGrandpaMessages > ,) ,) > > ;
                    }
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct InherentExtrinsics {
                    pub inherent: inherent_extrinsics::Inherent,
                }
                pub mod check_inherents {
                    use super::runtime_types;
                    pub type Block = runtime_types :: sp_runtime :: generic :: block :: Block < runtime_types :: sp_runtime :: generic :: header :: Header < :: core :: primitive :: u32 > , :: subxt :: utils :: UncheckedExtrinsic < :: subxt :: utils :: MultiAddress < :: subxt :: utils :: AccountId32 , () > , runtime_types :: bridge_hub_rococo_runtime :: RuntimeCall , runtime_types :: sp_runtime :: MultiSignature , (runtime_types :: frame_system :: extensions :: check_non_zero_sender :: CheckNonZeroSender , runtime_types :: frame_system :: extensions :: check_spec_version :: CheckSpecVersion , runtime_types :: frame_system :: extensions :: check_tx_version :: CheckTxVersion , runtime_types :: frame_system :: extensions :: check_genesis :: CheckGenesis , runtime_types :: frame_system :: extensions :: check_mortality :: CheckMortality , runtime_types :: frame_system :: extensions :: check_nonce :: CheckNonce , runtime_types :: frame_system :: extensions :: check_weight :: CheckWeight , runtime_types :: pallet_transaction_payment :: ChargeTransactionPayment , runtime_types :: bridge_hub_rococo_runtime :: BridgeRejectObsoleteHeadersAndMessages , (runtime_types :: bridge_runtime_common :: refund_relayer_extension :: RefundSignedExtensionAdapter < runtime_types :: bridge_runtime_common :: refund_relayer_extension :: RefundBridgedParachainMessages > , runtime_types :: bridge_runtime_common :: refund_relayer_extension :: RefundSignedExtensionAdapter < runtime_types :: bridge_runtime_common :: refund_relayer_extension :: RefundBridgedGrandpaMessages > ,) ,) > > ;
                    pub type Data = runtime_types::sp_inherents::InherentData;
                    pub mod output {
                        use super::runtime_types;
                        pub type Output = runtime_types::sp_inherents::CheckInherentsResult;
                    }
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct CheckInherents {
                    pub block: check_inherents::Block,
                    pub data: check_inherents::Data,
                }
            }
        }
        pub mod tagged_transaction_queue {
            use super::root_mod;
            use super::runtime_types;
            #[doc = " The `TaggedTransactionQueue` api trait for interfering with the transaction queue."]
            pub struct TaggedTransactionQueue;
            impl TaggedTransactionQueue {
                #[doc = " Validate the transaction."]
                #[doc = ""]
                #[doc = " This method is invoked by the transaction pool to learn details about given transaction."]
                #[doc = " The implementation should make sure to verify the correctness of the transaction"]
                #[doc = " against current state. The given `block_hash` corresponds to the hash of the block"]
                #[doc = " that is used as current state."]
                #[doc = ""]
                #[doc = " Note that this call may be performed by the pool multiple times and transactions"]
                #[doc = " might be verified in any possible order."]
                pub fn validate_transaction(
                    &self,
                    source: types::validate_transaction::Source,
                    tx: types::validate_transaction::Tx,
                    block_hash: types::validate_transaction::BlockHash,
                ) -> ::subxt::runtime_api::Payload<
                    types::ValidateTransaction,
                    types::validate_transaction::output::Output,
                > {
                    ::subxt::runtime_api::Payload::new_static(
                        "TaggedTransactionQueue",
                        "validate_transaction",
                        types::ValidateTransaction {
                            source,
                            tx,
                            block_hash,
                        },
                        [
                            196u8, 50u8, 90u8, 49u8, 109u8, 251u8, 200u8, 35u8, 23u8, 150u8, 140u8,
                            143u8, 232u8, 164u8, 133u8, 89u8, 32u8, 240u8, 115u8, 39u8, 95u8, 70u8,
                            162u8, 76u8, 122u8, 73u8, 151u8, 144u8, 234u8, 120u8, 100u8, 29u8,
                        ],
                    )
                }
            }
            pub mod types {
                use super::runtime_types;
                pub mod validate_transaction {
                    use super::runtime_types;
                    pub type Source =
                        runtime_types::sp_runtime::transaction_validity::TransactionSource;
                    pub type Tx = :: subxt :: utils :: UncheckedExtrinsic < :: subxt :: utils :: MultiAddress < :: subxt :: utils :: AccountId32 , () > , runtime_types :: bridge_hub_rococo_runtime :: RuntimeCall , runtime_types :: sp_runtime :: MultiSignature , (runtime_types :: frame_system :: extensions :: check_non_zero_sender :: CheckNonZeroSender , runtime_types :: frame_system :: extensions :: check_spec_version :: CheckSpecVersion , runtime_types :: frame_system :: extensions :: check_tx_version :: CheckTxVersion , runtime_types :: frame_system :: extensions :: check_genesis :: CheckGenesis , runtime_types :: frame_system :: extensions :: check_mortality :: CheckMortality , runtime_types :: frame_system :: extensions :: check_nonce :: CheckNonce , runtime_types :: frame_system :: extensions :: check_weight :: CheckWeight , runtime_types :: pallet_transaction_payment :: ChargeTransactionPayment , runtime_types :: bridge_hub_rococo_runtime :: BridgeRejectObsoleteHeadersAndMessages , (runtime_types :: bridge_runtime_common :: refund_relayer_extension :: RefundSignedExtensionAdapter < runtime_types :: bridge_runtime_common :: refund_relayer_extension :: RefundBridgedParachainMessages > , runtime_types :: bridge_runtime_common :: refund_relayer_extension :: RefundSignedExtensionAdapter < runtime_types :: bridge_runtime_common :: refund_relayer_extension :: RefundBridgedGrandpaMessages > ,) ,) > ;
                    pub type BlockHash = ::subxt::utils::H256;
                    pub mod output {
                        use super::runtime_types;
                        pub type Output = :: core :: result :: Result < runtime_types :: sp_runtime :: transaction_validity :: ValidTransaction , runtime_types :: sp_runtime :: transaction_validity :: TransactionValidityError > ;
                    }
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ValidateTransaction {
                    pub source: validate_transaction::Source,
                    pub tx: validate_transaction::Tx,
                    pub block_hash: validate_transaction::BlockHash,
                }
            }
        }
        pub mod offchain_worker_api {
            use super::root_mod;
            use super::runtime_types;
            #[doc = " The offchain worker api."]
            pub struct OffchainWorkerApi;
            impl OffchainWorkerApi {
                #[doc = " Starts the off-chain task for given block header."]
                pub fn offchain_worker(
                    &self,
                    header: types::offchain_worker::Header,
                ) -> ::subxt::runtime_api::Payload<
                    types::OffchainWorker,
                    types::offchain_worker::output::Output,
                > {
                    ::subxt::runtime_api::Payload::new_static(
                        "OffchainWorkerApi",
                        "offchain_worker",
                        types::OffchainWorker { header },
                        [
                            10u8, 135u8, 19u8, 153u8, 33u8, 216u8, 18u8, 242u8, 33u8, 140u8, 4u8,
                            223u8, 200u8, 130u8, 103u8, 118u8, 137u8, 24u8, 19u8, 127u8, 161u8,
                            29u8, 184u8, 111u8, 222u8, 111u8, 253u8, 73u8, 45u8, 31u8, 79u8, 60u8,
                        ],
                    )
                }
            }
            pub mod types {
                use super::runtime_types;
                pub mod offchain_worker {
                    use super::runtime_types;
                    pub type Header =
                        runtime_types::sp_runtime::generic::header::Header<::core::primitive::u32>;
                    pub mod output {
                        use super::runtime_types;
                        pub type Output = ();
                    }
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct OffchainWorker {
                    pub header: offchain_worker::Header,
                }
            }
        }
        pub mod session_keys {
            use super::root_mod;
            use super::runtime_types;
            #[doc = " Session keys runtime api."]
            pub struct SessionKeys;
            impl SessionKeys {
                #[doc = " Generate a set of session keys with optionally using the given seed."]
                #[doc = " The keys should be stored within the keystore exposed via runtime"]
                #[doc = " externalities."]
                #[doc = ""]
                #[doc = " The seed needs to be a valid `utf8` string."]
                #[doc = ""]
                #[doc = " Returns the concatenated SCALE encoded public keys."]
                pub fn generate_session_keys(
                    &self,
                    seed: types::generate_session_keys::Seed,
                ) -> ::subxt::runtime_api::Payload<
                    types::GenerateSessionKeys,
                    types::generate_session_keys::output::Output,
                > {
                    ::subxt::runtime_api::Payload::new_static(
                        "SessionKeys",
                        "generate_session_keys",
                        types::GenerateSessionKeys { seed },
                        [
                            96u8, 171u8, 164u8, 166u8, 175u8, 102u8, 101u8, 47u8, 133u8, 95u8,
                            102u8, 202u8, 83u8, 26u8, 238u8, 47u8, 126u8, 132u8, 22u8, 11u8, 33u8,
                            190u8, 175u8, 94u8, 58u8, 245u8, 46u8, 80u8, 195u8, 184u8, 107u8, 65u8,
                        ],
                    )
                }
                #[doc = " Decode the given public session keys."]
                #[doc = ""]
                #[doc = " Returns the list of public raw public keys + key type."]
                pub fn decode_session_keys(
                    &self,
                    encoded: types::decode_session_keys::Encoded,
                ) -> ::subxt::runtime_api::Payload<
                    types::DecodeSessionKeys,
                    types::decode_session_keys::output::Output,
                > {
                    ::subxt::runtime_api::Payload::new_static(
                        "SessionKeys",
                        "decode_session_keys",
                        types::DecodeSessionKeys { encoded },
                        [
                            57u8, 242u8, 18u8, 51u8, 132u8, 110u8, 238u8, 255u8, 39u8, 194u8, 8u8,
                            54u8, 198u8, 178u8, 75u8, 151u8, 148u8, 176u8, 144u8, 197u8, 87u8,
                            29u8, 179u8, 235u8, 176u8, 78u8, 252u8, 103u8, 72u8, 203u8, 151u8,
                            248u8,
                        ],
                    )
                }
            }
            pub mod types {
                use super::runtime_types;
                pub mod generate_session_keys {
                    use super::runtime_types;
                    pub type Seed = ::core::option::Option<::std::vec::Vec<::core::primitive::u8>>;
                    pub mod output {
                        use super::runtime_types;
                        pub type Output = ::std::vec::Vec<::core::primitive::u8>;
                    }
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct GenerateSessionKeys {
                    pub seed: generate_session_keys::Seed,
                }
                pub mod decode_session_keys {
                    use super::runtime_types;
                    pub type Encoded = ::std::vec::Vec<::core::primitive::u8>;
                    pub mod output {
                        use super::runtime_types;
                        pub type Output = ::core::option::Option<
                            ::std::vec::Vec<(
                                ::std::vec::Vec<::core::primitive::u8>,
                                runtime_types::sp_core::crypto::KeyTypeId,
                            )>,
                        >;
                    }
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct DecodeSessionKeys {
                    pub encoded: decode_session_keys::Encoded,
                }
            }
        }
        pub mod account_nonce_api {
            use super::root_mod;
            use super::runtime_types;
            #[doc = " The API to query account nonce."]
            pub struct AccountNonceApi;
            impl AccountNonceApi {
                #[doc = " Get current account nonce of given `AccountId`."]
                pub fn account_nonce(
                    &self,
                    account: types::account_nonce::Account,
                ) -> ::subxt::runtime_api::Payload<
                    types::AccountNonce,
                    types::account_nonce::output::Output,
                > {
                    ::subxt::runtime_api::Payload::new_static(
                        "AccountNonceApi",
                        "account_nonce",
                        types::AccountNonce { account },
                        [
                            231u8, 82u8, 7u8, 227u8, 131u8, 2u8, 215u8, 252u8, 173u8, 82u8, 11u8,
                            103u8, 200u8, 25u8, 114u8, 116u8, 79u8, 229u8, 152u8, 150u8, 236u8,
                            37u8, 101u8, 26u8, 220u8, 146u8, 182u8, 101u8, 73u8, 55u8, 191u8,
                            171u8,
                        ],
                    )
                }
            }
            pub mod types {
                use super::runtime_types;
                pub mod account_nonce {
                    use super::runtime_types;
                    pub type Account = ::subxt::utils::AccountId32;
                    pub mod output {
                        use super::runtime_types;
                        pub type Output = ::core::primitive::u32;
                    }
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct AccountNonce {
                    pub account: account_nonce::Account,
                }
            }
        }
        pub mod transaction_payment_api {
            use super::root_mod;
            use super::runtime_types;
            pub struct TransactionPaymentApi;
            impl TransactionPaymentApi {
                pub fn query_info(
                    &self,
                    uxt: types::query_info::Uxt,
                    len: types::query_info::Len,
                ) -> ::subxt::runtime_api::Payload<
                    types::QueryInfo,
                    types::query_info::output::Output,
                > {
                    ::subxt::runtime_api::Payload::new_static(
                        "TransactionPaymentApi",
                        "query_info",
                        types::QueryInfo { uxt, len },
                        [
                            56u8, 30u8, 174u8, 34u8, 202u8, 24u8, 177u8, 189u8, 145u8, 36u8, 1u8,
                            156u8, 98u8, 209u8, 178u8, 49u8, 198u8, 23u8, 150u8, 173u8, 35u8,
                            205u8, 147u8, 129u8, 42u8, 22u8, 69u8, 3u8, 129u8, 8u8, 196u8, 139u8,
                        ],
                    )
                }
                pub fn query_fee_details(
                    &self,
                    uxt: types::query_fee_details::Uxt,
                    len: types::query_fee_details::Len,
                ) -> ::subxt::runtime_api::Payload<
                    types::QueryFeeDetails,
                    types::query_fee_details::output::Output,
                > {
                    ::subxt::runtime_api::Payload::new_static(
                        "TransactionPaymentApi",
                        "query_fee_details",
                        types::QueryFeeDetails { uxt, len },
                        [
                            117u8, 60u8, 137u8, 159u8, 237u8, 252u8, 216u8, 238u8, 232u8, 1u8,
                            100u8, 152u8, 26u8, 185u8, 145u8, 125u8, 68u8, 189u8, 4u8, 30u8, 125u8,
                            7u8, 196u8, 153u8, 235u8, 51u8, 219u8, 108u8, 185u8, 254u8, 100u8,
                            201u8,
                        ],
                    )
                }
                pub fn query_weight_to_fee(
                    &self,
                    weight: types::query_weight_to_fee::Weight,
                ) -> ::subxt::runtime_api::Payload<
                    types::QueryWeightToFee,
                    types::query_weight_to_fee::output::Output,
                > {
                    ::subxt::runtime_api::Payload::new_static(
                        "TransactionPaymentApi",
                        "query_weight_to_fee",
                        types::QueryWeightToFee { weight },
                        [
                            206u8, 243u8, 189u8, 83u8, 231u8, 244u8, 247u8, 52u8, 126u8, 208u8,
                            224u8, 5u8, 163u8, 108u8, 254u8, 114u8, 214u8, 156u8, 227u8, 217u8,
                            211u8, 198u8, 121u8, 164u8, 110u8, 54u8, 181u8, 146u8, 50u8, 146u8,
                            146u8, 23u8,
                        ],
                    )
                }
                pub fn query_length_to_fee(
                    &self,
                    length: types::query_length_to_fee::Length,
                ) -> ::subxt::runtime_api::Payload<
                    types::QueryLengthToFee,
                    types::query_length_to_fee::output::Output,
                > {
                    ::subxt::runtime_api::Payload::new_static(
                        "TransactionPaymentApi",
                        "query_length_to_fee",
                        types::QueryLengthToFee { length },
                        [
                            92u8, 132u8, 29u8, 119u8, 66u8, 11u8, 196u8, 224u8, 129u8, 23u8, 249u8,
                            12u8, 32u8, 28u8, 92u8, 50u8, 188u8, 101u8, 203u8, 229u8, 248u8, 216u8,
                            130u8, 150u8, 212u8, 161u8, 81u8, 254u8, 116u8, 89u8, 162u8, 48u8,
                        ],
                    )
                }
            }
            pub mod types {
                use super::runtime_types;
                pub mod query_info {
                    use super::runtime_types;
                    pub type Uxt = :: subxt :: utils :: UncheckedExtrinsic < :: subxt :: utils :: MultiAddress < :: subxt :: utils :: AccountId32 , () > , runtime_types :: bridge_hub_rococo_runtime :: RuntimeCall , runtime_types :: sp_runtime :: MultiSignature , (runtime_types :: frame_system :: extensions :: check_non_zero_sender :: CheckNonZeroSender , runtime_types :: frame_system :: extensions :: check_spec_version :: CheckSpecVersion , runtime_types :: frame_system :: extensions :: check_tx_version :: CheckTxVersion , runtime_types :: frame_system :: extensions :: check_genesis :: CheckGenesis , runtime_types :: frame_system :: extensions :: check_mortality :: CheckMortality , runtime_types :: frame_system :: extensions :: check_nonce :: CheckNonce , runtime_types :: frame_system :: extensions :: check_weight :: CheckWeight , runtime_types :: pallet_transaction_payment :: ChargeTransactionPayment , runtime_types :: bridge_hub_rococo_runtime :: BridgeRejectObsoleteHeadersAndMessages , (runtime_types :: bridge_runtime_common :: refund_relayer_extension :: RefundSignedExtensionAdapter < runtime_types :: bridge_runtime_common :: refund_relayer_extension :: RefundBridgedParachainMessages > , runtime_types :: bridge_runtime_common :: refund_relayer_extension :: RefundSignedExtensionAdapter < runtime_types :: bridge_runtime_common :: refund_relayer_extension :: RefundBridgedGrandpaMessages > ,) ,) > ;
                    pub type Len = ::core::primitive::u32;
                    pub mod output {
                        use super::runtime_types;
                        pub type Output =
                            runtime_types::pallet_transaction_payment::types::RuntimeDispatchInfo<
                                ::core::primitive::u128,
                                runtime_types::sp_weights::weight_v2::Weight,
                            >;
                    }
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct QueryInfo {
                    pub uxt: query_info::Uxt,
                    pub len: query_info::Len,
                }
                pub mod query_fee_details {
                    use super::runtime_types;
                    pub type Uxt = :: subxt :: utils :: UncheckedExtrinsic < :: subxt :: utils :: MultiAddress < :: subxt :: utils :: AccountId32 , () > , runtime_types :: bridge_hub_rococo_runtime :: RuntimeCall , runtime_types :: sp_runtime :: MultiSignature , (runtime_types :: frame_system :: extensions :: check_non_zero_sender :: CheckNonZeroSender , runtime_types :: frame_system :: extensions :: check_spec_version :: CheckSpecVersion , runtime_types :: frame_system :: extensions :: check_tx_version :: CheckTxVersion , runtime_types :: frame_system :: extensions :: check_genesis :: CheckGenesis , runtime_types :: frame_system :: extensions :: check_mortality :: CheckMortality , runtime_types :: frame_system :: extensions :: check_nonce :: CheckNonce , runtime_types :: frame_system :: extensions :: check_weight :: CheckWeight , runtime_types :: pallet_transaction_payment :: ChargeTransactionPayment , runtime_types :: bridge_hub_rococo_runtime :: BridgeRejectObsoleteHeadersAndMessages , (runtime_types :: bridge_runtime_common :: refund_relayer_extension :: RefundSignedExtensionAdapter < runtime_types :: bridge_runtime_common :: refund_relayer_extension :: RefundBridgedParachainMessages > , runtime_types :: bridge_runtime_common :: refund_relayer_extension :: RefundSignedExtensionAdapter < runtime_types :: bridge_runtime_common :: refund_relayer_extension :: RefundBridgedGrandpaMessages > ,) ,) > ;
                    pub type Len = ::core::primitive::u32;
                    pub mod output {
                        use super::runtime_types;
                        pub type Output =
                            runtime_types::pallet_transaction_payment::types::FeeDetails<
                                ::core::primitive::u128,
                            >;
                    }
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct QueryFeeDetails {
                    pub uxt: query_fee_details::Uxt,
                    pub len: query_fee_details::Len,
                }
                pub mod query_weight_to_fee {
                    use super::runtime_types;
                    pub type Weight = runtime_types::sp_weights::weight_v2::Weight;
                    pub mod output {
                        use super::runtime_types;
                        pub type Output = ::core::primitive::u128;
                    }
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct QueryWeightToFee {
                    pub weight: query_weight_to_fee::Weight,
                }
                pub mod query_length_to_fee {
                    use super::runtime_types;
                    pub type Length = ::core::primitive::u32;
                    pub mod output {
                        use super::runtime_types;
                        pub type Output = ::core::primitive::u128;
                    }
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct QueryLengthToFee {
                    pub length: query_length_to_fee::Length,
                }
            }
        }
        pub mod transaction_payment_call_api {
            use super::root_mod;
            use super::runtime_types;
            pub struct TransactionPaymentCallApi;
            impl TransactionPaymentCallApi {
                #[doc = " Query information of a dispatch class, weight, and fee of a given encoded `Call`."]
                pub fn query_call_info(
                    &self,
                    call: types::query_call_info::Call,
                    len: types::query_call_info::Len,
                ) -> ::subxt::runtime_api::Payload<
                    types::QueryCallInfo,
                    types::query_call_info::output::Output,
                > {
                    ::subxt::runtime_api::Payload::new_static(
                        "TransactionPaymentCallApi",
                        "query_call_info",
                        types::QueryCallInfo { call, len },
                        [
                            22u8, 238u8, 10u8, 95u8, 18u8, 167u8, 229u8, 14u8, 160u8, 184u8, 103u8,
                            76u8, 212u8, 242u8, 58u8, 44u8, 6u8, 33u8, 133u8, 217u8, 155u8, 202u8,
                            196u8, 143u8, 12u8, 0u8, 236u8, 69u8, 192u8, 83u8, 113u8, 187u8,
                        ],
                    )
                }
                #[doc = " Query fee details of a given encoded `Call`."]
                pub fn query_call_fee_details(
                    &self,
                    call: types::query_call_fee_details::Call,
                    len: types::query_call_fee_details::Len,
                ) -> ::subxt::runtime_api::Payload<
                    types::QueryCallFeeDetails,
                    types::query_call_fee_details::output::Output,
                > {
                    ::subxt::runtime_api::Payload::new_static(
                        "TransactionPaymentCallApi",
                        "query_call_fee_details",
                        types::QueryCallFeeDetails { call, len },
                        [
                            134u8, 250u8, 144u8, 95u8, 167u8, 229u8, 186u8, 198u8, 241u8, 213u8,
                            3u8, 148u8, 247u8, 29u8, 144u8, 185u8, 89u8, 39u8, 70u8, 154u8, 49u8,
                            119u8, 210u8, 100u8, 199u8, 83u8, 87u8, 174u8, 66u8, 228u8, 132u8,
                            237u8,
                        ],
                    )
                }
                #[doc = " Query the output of the current `WeightToFee` given some input."]
                pub fn query_weight_to_fee(
                    &self,
                    weight: types::query_weight_to_fee::Weight,
                ) -> ::subxt::runtime_api::Payload<
                    types::QueryWeightToFee,
                    types::query_weight_to_fee::output::Output,
                > {
                    ::subxt::runtime_api::Payload::new_static(
                        "TransactionPaymentCallApi",
                        "query_weight_to_fee",
                        types::QueryWeightToFee { weight },
                        [
                            117u8, 91u8, 94u8, 22u8, 248u8, 212u8, 15u8, 23u8, 97u8, 116u8, 64u8,
                            228u8, 83u8, 123u8, 87u8, 77u8, 97u8, 7u8, 98u8, 181u8, 6u8, 165u8,
                            114u8, 141u8, 164u8, 113u8, 126u8, 88u8, 174u8, 171u8, 224u8, 35u8,
                        ],
                    )
                }
                #[doc = " Query the output of the current `LengthToFee` given some input."]
                pub fn query_length_to_fee(
                    &self,
                    length: types::query_length_to_fee::Length,
                ) -> ::subxt::runtime_api::Payload<
                    types::QueryLengthToFee,
                    types::query_length_to_fee::output::Output,
                > {
                    ::subxt::runtime_api::Payload::new_static(
                        "TransactionPaymentCallApi",
                        "query_length_to_fee",
                        types::QueryLengthToFee { length },
                        [
                            246u8, 40u8, 4u8, 160u8, 152u8, 94u8, 170u8, 53u8, 205u8, 122u8, 5u8,
                            69u8, 70u8, 25u8, 128u8, 156u8, 119u8, 134u8, 116u8, 147u8, 14u8,
                            164u8, 65u8, 140u8, 86u8, 13u8, 250u8, 218u8, 89u8, 95u8, 234u8, 228u8,
                        ],
                    )
                }
            }
            pub mod types {
                use super::runtime_types;
                pub mod query_call_info {
                    use super::runtime_types;
                    pub type Call = runtime_types::bridge_hub_rococo_runtime::RuntimeCall;
                    pub type Len = ::core::primitive::u32;
                    pub mod output {
                        use super::runtime_types;
                        pub type Output =
                            runtime_types::pallet_transaction_payment::types::RuntimeDispatchInfo<
                                ::core::primitive::u128,
                                runtime_types::sp_weights::weight_v2::Weight,
                            >;
                    }
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct QueryCallInfo {
                    pub call: query_call_info::Call,
                    pub len: query_call_info::Len,
                }
                pub mod query_call_fee_details {
                    use super::runtime_types;
                    pub type Call = runtime_types::bridge_hub_rococo_runtime::RuntimeCall;
                    pub type Len = ::core::primitive::u32;
                    pub mod output {
                        use super::runtime_types;
                        pub type Output =
                            runtime_types::pallet_transaction_payment::types::FeeDetails<
                                ::core::primitive::u128,
                            >;
                    }
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct QueryCallFeeDetails {
                    pub call: query_call_fee_details::Call,
                    pub len: query_call_fee_details::Len,
                }
                pub mod query_weight_to_fee {
                    use super::runtime_types;
                    pub type Weight = runtime_types::sp_weights::weight_v2::Weight;
                    pub mod output {
                        use super::runtime_types;
                        pub type Output = ::core::primitive::u128;
                    }
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct QueryWeightToFee {
                    pub weight: query_weight_to_fee::Weight,
                }
                pub mod query_length_to_fee {
                    use super::runtime_types;
                    pub type Length = ::core::primitive::u32;
                    pub mod output {
                        use super::runtime_types;
                        pub type Output = ::core::primitive::u128;
                    }
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct QueryLengthToFee {
                    pub length: query_length_to_fee::Length,
                }
            }
        }
        pub mod collect_collation_info {
            use super::root_mod;
            use super::runtime_types;
            #[doc = " Runtime api to collect information about a collation."]
            pub struct CollectCollationInfo;
            impl CollectCollationInfo {
                #[doc = " Collect information about a collation."]
                #[doc = ""]
                #[doc = " The given `header` is the header of the built block for that"]
                #[doc = " we are collecting the collation info for."]
                pub fn collect_collation_info(
                    &self,
                    header: types::collect_collation_info::Header,
                ) -> ::subxt::runtime_api::Payload<
                    types::CollectCollationInfo,
                    types::collect_collation_info::output::Output,
                > {
                    ::subxt::runtime_api::Payload::new_static(
                        "CollectCollationInfo",
                        "collect_collation_info",
                        types::CollectCollationInfo { header },
                        [
                            56u8, 138u8, 105u8, 91u8, 216u8, 40u8, 255u8, 98u8, 86u8, 138u8, 185u8,
                            155u8, 80u8, 141u8, 85u8, 48u8, 252u8, 235u8, 178u8, 231u8, 111u8,
                            216u8, 71u8, 20u8, 33u8, 202u8, 24u8, 215u8, 214u8, 132u8, 51u8, 166u8,
                        ],
                    )
                }
            }
            pub mod types {
                use super::runtime_types;
                pub mod collect_collation_info {
                    use super::runtime_types;
                    pub type Header =
                        runtime_types::sp_runtime::generic::header::Header<::core::primitive::u32>;
                    pub mod output {
                        use super::runtime_types;
                        pub type Output = runtime_types::cumulus_primitives_core::CollationInfo;
                    }
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct CollectCollationInfo {
                    pub header: collect_collation_info::Header,
                }
            }
        }
        pub mod westend_finality_api {
            use super::root_mod;
            use super::runtime_types;
            #[doc = " API for querying information about the finalized chain headers."]
            #[doc = ""]
            #[doc = " This API is implemented by runtimes that are receiving messages from this chain, not by this"]
            #[doc = " chain's runtime itself."]
            pub struct WestendFinalityApi;
            impl WestendFinalityApi {
                #[doc = " Returns number and hash of the best finalized header known to the bridge module."]
                pub fn best_finalized(
                    &self,
                ) -> ::subxt::runtime_api::Payload<
                    types::BestFinalized,
                    types::best_finalized::output::Output,
                > {
                    ::subxt::runtime_api::Payload::new_static(
                        "WestendFinalityApi",
                        "best_finalized",
                        types::BestFinalized {},
                        [
                            253u8, 113u8, 48u8, 247u8, 65u8, 253u8, 210u8, 187u8, 246u8, 171u8,
                            28u8, 3u8, 35u8, 222u8, 54u8, 86u8, 193u8, 33u8, 42u8, 251u8, 219u8,
                            135u8, 69u8, 149u8, 18u8, 62u8, 231u8, 176u8, 189u8, 158u8, 30u8, 18u8,
                        ],
                    )
                }
                #[doc = " Returns the justifications accepted in the current block."]
                pub fn synced_headers_grandpa_info(
                    &self,
                ) -> ::subxt::runtime_api::Payload<
                    types::SyncedHeadersGrandpaInfo,
                    types::synced_headers_grandpa_info::output::Output,
                > {
                    ::subxt::runtime_api::Payload::new_static(
                        "WestendFinalityApi",
                        "synced_headers_grandpa_info",
                        types::SyncedHeadersGrandpaInfo {},
                        [
                            153u8, 86u8, 119u8, 195u8, 37u8, 108u8, 79u8, 155u8, 205u8, 51u8,
                            164u8, 158u8, 241u8, 79u8, 149u8, 195u8, 170u8, 224u8, 138u8, 226u8,
                            235u8, 146u8, 1u8, 241u8, 135u8, 140u8, 141u8, 54u8, 10u8, 251u8, 38u8,
                            240u8,
                        ],
                    )
                }
            }
            pub mod types {
                use super::runtime_types;
                pub mod best_finalized {
                    use super::runtime_types;
                    pub mod output {
                        use super::runtime_types;
                        pub type Output = ::core::option::Option<
                            runtime_types::bp_runtime::HeaderId<
                                ::subxt::utils::H256,
                                ::core::primitive::u32,
                            >,
                        >;
                    }
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct BestFinalized {}
                pub mod synced_headers_grandpa_info {
                    use super::runtime_types;
                    pub mod output {
                        use super::runtime_types;
                        pub type Output = ::std::vec::Vec<
                            runtime_types::bp_header_chain::HeaderFinalityInfo<
                                runtime_types::bp_header_chain::justification::GrandpaJustification<
                                    runtime_types::sp_runtime::generic::header::Header<
                                        ::core::primitive::u32,
                                    >,
                                >,
                                runtime_types::bp_header_chain::AuthoritySet,
                            >,
                        >;
                    }
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SyncedHeadersGrandpaInfo {}
            }
        }
        pub mod bridge_hub_westend_finality_api {
            use super::root_mod;
            use super::runtime_types;
            #[doc = " API for querying information about the finalized chain headers."]
            #[doc = ""]
            #[doc = " This API is implemented by runtimes that are receiving messages from this chain, not by this"]
            #[doc = " chain's runtime itself."]
            pub struct BridgeHubWestendFinalityApi;
            impl BridgeHubWestendFinalityApi {
                #[doc = " Returns number and hash of the best finalized header known to the bridge module."]
                pub fn best_finalized(
                    &self,
                ) -> ::subxt::runtime_api::Payload<
                    types::BestFinalized,
                    types::best_finalized::output::Output,
                > {
                    ::subxt::runtime_api::Payload::new_static(
                        "BridgeHubWestendFinalityApi",
                        "best_finalized",
                        types::BestFinalized {},
                        [
                            54u8, 31u8, 176u8, 56u8, 216u8, 213u8, 82u8, 121u8, 164u8, 63u8, 19u8,
                            115u8, 243u8, 220u8, 237u8, 84u8, 28u8, 99u8, 67u8, 190u8, 66u8, 157u8,
                            191u8, 251u8, 240u8, 178u8, 9u8, 81u8, 163u8, 139u8, 177u8, 77u8,
                        ],
                    )
                }
            }
            pub mod types {
                use super::runtime_types;
                pub mod best_finalized {
                    use super::runtime_types;
                    pub mod output {
                        use super::runtime_types;
                        pub type Output = ::core::option::Option<
                            runtime_types::bp_runtime::HeaderId<
                                ::subxt::utils::H256,
                                ::core::primitive::u32,
                            >,
                        >;
                    }
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct BestFinalized {}
            }
        }
        pub mod from_bridge_hub_westend_inbound_lane_api {
            use super::root_mod;
            use super::runtime_types;
            #[doc = " Inbound message lane API for messages sent by this chain."]
            #[doc = ""]
            #[doc = " This API is implemented by runtimes that are receiving messages from this chain, not by this"]
            #[doc = " chain's runtime itself."]
            #[doc = ""]
            #[doc = " Entries of the resulting vector are matching entries of the `messages` vector. Entries of the"]
            #[doc = " `messages` vector may (and need to) be read using `To<ThisChain>OutboundLaneApi::message_details`."]
            pub struct FromBridgeHubWestendInboundLaneApi;
            impl FromBridgeHubWestendInboundLaneApi {
                #[doc = " Return details of given inbound messages."]
                pub fn message_details(
                    &self,
                    lane: types::message_details::Lane,
                    messages: types::message_details::Messages,
                ) -> ::subxt::runtime_api::Payload<
                    types::MessageDetails,
                    types::message_details::output::Output,
                > {
                    ::subxt::runtime_api::Payload::new_static(
                        "FromBridgeHubWestendInboundLaneApi",
                        "message_details",
                        types::MessageDetails { lane, messages },
                        [
                            28u8, 151u8, 152u8, 152u8, 198u8, 182u8, 145u8, 171u8, 181u8, 197u8,
                            126u8, 39u8, 108u8, 82u8, 254u8, 135u8, 38u8, 152u8, 75u8, 204u8,
                            222u8, 18u8, 205u8, 184u8, 11u8, 31u8, 227u8, 120u8, 52u8, 171u8, 34u8,
                            232u8,
                        ],
                    )
                }
            }
            pub mod types {
                use super::runtime_types;
                pub mod message_details {
                    use super::runtime_types;
                    pub type Lane = runtime_types::bp_messages::LaneId;
                    pub type Messages = ::std::vec::Vec<(
                        ::std::vec::Vec<::core::primitive::u8>,
                        runtime_types::bp_messages::OutboundMessageDetails,
                    )>;
                    pub mod output {
                        use super::runtime_types;
                        pub type Output =
                            ::std::vec::Vec<runtime_types::bp_messages::InboundMessageDetails>;
                    }
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct MessageDetails {
                    pub lane: message_details::Lane,
                    pub messages: message_details::Messages,
                }
            }
        }
        pub mod to_bridge_hub_westend_outbound_lane_api {
            use super::root_mod;
            use super::runtime_types;
            #[doc = " Outbound message lane API for messages that are sent to this chain."]
            #[doc = ""]
            #[doc = " This API is implemented by runtimes that are receiving messages from this chain, not by this"]
            #[doc = " chain's runtime itself."]
            pub struct ToBridgeHubWestendOutboundLaneApi;
            impl ToBridgeHubWestendOutboundLaneApi {
                #[doc = " Returns dispatch weight, encoded payload size and delivery+dispatch fee of all"]
                #[doc = " messages in given inclusive range."]
                #[doc = ""]
                #[doc = " If some (or all) messages are missing from the storage, they'll also will"]
                #[doc = " be missing from the resulting vector. The vector is ordered by the nonce."]
                pub fn message_details(
                    &self,
                    lane: types::message_details::Lane,
                    begin: types::message_details::Begin,
                    end: types::message_details::End,
                ) -> ::subxt::runtime_api::Payload<
                    types::MessageDetails,
                    types::message_details::output::Output,
                > {
                    ::subxt::runtime_api::Payload::new_static(
                        "ToBridgeHubWestendOutboundLaneApi",
                        "message_details",
                        types::MessageDetails { lane, begin, end },
                        [
                            77u8, 23u8, 84u8, 127u8, 133u8, 201u8, 30u8, 108u8, 19u8, 180u8, 38u8,
                            206u8, 80u8, 45u8, 140u8, 149u8, 198u8, 79u8, 77u8, 53u8, 235u8, 75u8,
                            246u8, 203u8, 89u8, 38u8, 2u8, 31u8, 99u8, 124u8, 163u8, 94u8,
                        ],
                    )
                }
            }
            pub mod types {
                use super::runtime_types;
                pub mod message_details {
                    use super::runtime_types;
                    pub type Lane = runtime_types::bp_messages::LaneId;
                    pub type Begin = ::core::primitive::u64;
                    pub type End = ::core::primitive::u64;
                    pub mod output {
                        use super::runtime_types;
                        pub type Output =
                            ::std::vec::Vec<runtime_types::bp_messages::OutboundMessageDetails>;
                    }
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct MessageDetails {
                    pub lane: message_details::Lane,
                    pub begin: message_details::Begin,
                    pub end: message_details::End,
                }
            }
        }
        pub mod polkadot_bulletin_finality_api {
            use super::root_mod;
            use super::runtime_types;
            #[doc = " API for querying information about the finalized chain headers."]
            #[doc = ""]
            #[doc = " This API is implemented by runtimes that are receiving messages from this chain, not by this"]
            #[doc = " chain's runtime itself."]
            pub struct PolkadotBulletinFinalityApi;
            impl PolkadotBulletinFinalityApi {
                #[doc = " Returns number and hash of the best finalized header known to the bridge module."]
                pub fn best_finalized(
                    &self,
                ) -> ::subxt::runtime_api::Payload<
                    types::BestFinalized,
                    types::best_finalized::output::Output,
                > {
                    ::subxt::runtime_api::Payload::new_static(
                        "PolkadotBulletinFinalityApi",
                        "best_finalized",
                        types::BestFinalized {},
                        [
                            123u8, 211u8, 194u8, 151u8, 60u8, 179u8, 215u8, 50u8, 132u8, 63u8,
                            106u8, 170u8, 164u8, 192u8, 202u8, 120u8, 199u8, 60u8, 48u8, 91u8,
                            50u8, 233u8, 244u8, 240u8, 37u8, 88u8, 135u8, 95u8, 137u8, 117u8,
                            195u8, 99u8,
                        ],
                    )
                }
                #[doc = " Returns the justifications accepted in the current block."]
                pub fn synced_headers_grandpa_info(
                    &self,
                ) -> ::subxt::runtime_api::Payload<
                    types::SyncedHeadersGrandpaInfo,
                    types::synced_headers_grandpa_info::output::Output,
                > {
                    ::subxt::runtime_api::Payload::new_static(
                        "PolkadotBulletinFinalityApi",
                        "synced_headers_grandpa_info",
                        types::SyncedHeadersGrandpaInfo {},
                        [
                            143u8, 57u8, 193u8, 137u8, 67u8, 219u8, 64u8, 51u8, 243u8, 146u8,
                            162u8, 1u8, 170u8, 18u8, 58u8, 117u8, 241u8, 25u8, 174u8, 1u8, 253u8,
                            185u8, 179u8, 150u8, 230u8, 87u8, 129u8, 171u8, 151u8, 243u8, 22u8,
                            107u8,
                        ],
                    )
                }
            }
            pub mod types {
                use super::runtime_types;
                pub mod best_finalized {
                    use super::runtime_types;
                    pub mod output {
                        use super::runtime_types;
                        pub type Output = ::core::option::Option<
                            runtime_types::bp_runtime::HeaderId<
                                ::subxt::utils::H256,
                                ::core::primitive::u32,
                            >,
                        >;
                    }
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct BestFinalized {}
                pub mod synced_headers_grandpa_info {
                    use super::runtime_types;
                    pub mod output {
                        use super::runtime_types;
                        pub type Output = ::std::vec::Vec<
                            runtime_types::bp_header_chain::HeaderFinalityInfo<
                                runtime_types::bp_header_chain::justification::GrandpaJustification<
                                    runtime_types::sp_runtime::generic::header::Header<
                                        ::core::primitive::u32,
                                    >,
                                >,
                                runtime_types::bp_header_chain::AuthoritySet,
                            >,
                        >;
                    }
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SyncedHeadersGrandpaInfo {}
            }
        }
        pub mod from_polkadot_bulletin_inbound_lane_api {
            use super::root_mod;
            use super::runtime_types;
            #[doc = " Inbound message lane API for messages sent by this chain."]
            #[doc = ""]
            #[doc = " This API is implemented by runtimes that are receiving messages from this chain, not by this"]
            #[doc = " chain's runtime itself."]
            #[doc = ""]
            #[doc = " Entries of the resulting vector are matching entries of the `messages` vector. Entries of the"]
            #[doc = " `messages` vector may (and need to) be read using `To<ThisChain>OutboundLaneApi::message_details`."]
            pub struct FromPolkadotBulletinInboundLaneApi;
            impl FromPolkadotBulletinInboundLaneApi {
                #[doc = " Return details of given inbound messages."]
                pub fn message_details(
                    &self,
                    lane: types::message_details::Lane,
                    messages: types::message_details::Messages,
                ) -> ::subxt::runtime_api::Payload<
                    types::MessageDetails,
                    types::message_details::output::Output,
                > {
                    ::subxt::runtime_api::Payload::new_static(
                        "FromPolkadotBulletinInboundLaneApi",
                        "message_details",
                        types::MessageDetails { lane, messages },
                        [
                            49u8, 147u8, 78u8, 49u8, 206u8, 11u8, 242u8, 60u8, 246u8, 78u8, 16u8,
                            22u8, 102u8, 165u8, 81u8, 155u8, 101u8, 49u8, 57u8, 178u8, 26u8, 128u8,
                            244u8, 43u8, 11u8, 99u8, 137u8, 189u8, 196u8, 156u8, 219u8, 57u8,
                        ],
                    )
                }
            }
            pub mod types {
                use super::runtime_types;
                pub mod message_details {
                    use super::runtime_types;
                    pub type Lane = runtime_types::bp_messages::LaneId;
                    pub type Messages = ::std::vec::Vec<(
                        ::std::vec::Vec<::core::primitive::u8>,
                        runtime_types::bp_messages::OutboundMessageDetails,
                    )>;
                    pub mod output {
                        use super::runtime_types;
                        pub type Output =
                            ::std::vec::Vec<runtime_types::bp_messages::InboundMessageDetails>;
                    }
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct MessageDetails {
                    pub lane: message_details::Lane,
                    pub messages: message_details::Messages,
                }
            }
        }
        pub mod to_polkadot_bulletin_outbound_lane_api {
            use super::root_mod;
            use super::runtime_types;
            #[doc = " Outbound message lane API for messages that are sent to this chain."]
            #[doc = ""]
            #[doc = " This API is implemented by runtimes that are receiving messages from this chain, not by this"]
            #[doc = " chain's runtime itself."]
            pub struct ToPolkadotBulletinOutboundLaneApi;
            impl ToPolkadotBulletinOutboundLaneApi {
                #[doc = " Returns dispatch weight, encoded payload size and delivery+dispatch fee of all"]
                #[doc = " messages in given inclusive range."]
                #[doc = ""]
                #[doc = " If some (or all) messages are missing from the storage, they'll also will"]
                #[doc = " be missing from the resulting vector. The vector is ordered by the nonce."]
                pub fn message_details(
                    &self,
                    lane: types::message_details::Lane,
                    begin: types::message_details::Begin,
                    end: types::message_details::End,
                ) -> ::subxt::runtime_api::Payload<
                    types::MessageDetails,
                    types::message_details::output::Output,
                > {
                    ::subxt::runtime_api::Payload::new_static(
                        "ToPolkadotBulletinOutboundLaneApi",
                        "message_details",
                        types::MessageDetails { lane, begin, end },
                        [
                            5u8, 16u8, 222u8, 54u8, 18u8, 218u8, 76u8, 50u8, 243u8, 130u8, 66u8,
                            128u8, 207u8, 49u8, 48u8, 44u8, 221u8, 164u8, 108u8, 212u8, 166u8,
                            80u8, 70u8, 35u8, 233u8, 29u8, 79u8, 97u8, 216u8, 189u8, 12u8, 154u8,
                        ],
                    )
                }
            }
            pub mod types {
                use super::runtime_types;
                pub mod message_details {
                    use super::runtime_types;
                    pub type Lane = runtime_types::bp_messages::LaneId;
                    pub type Begin = ::core::primitive::u64;
                    pub type End = ::core::primitive::u64;
                    pub mod output {
                        use super::runtime_types;
                        pub type Output =
                            ::std::vec::Vec<runtime_types::bp_messages::OutboundMessageDetails>;
                    }
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct MessageDetails {
                    pub lane: message_details::Lane,
                    pub begin: message_details::Begin,
                    pub end: message_details::End,
                }
            }
        }
        pub mod outbound_queue_api {
            use super::root_mod;
            use super::runtime_types;
            pub struct OutboundQueueApi;
            impl OutboundQueueApi {
                #[doc = " Generate a merkle proof for a committed message identified by `leaf_index`."]
                #[doc = " The merkle root is stored in the block header as a"]
                #[doc = " `\\[`sp_runtime::generic::DigestItem::Other`\\]`"]
                pub fn prove_message(
                    &self,
                    leaf_index: types::prove_message::LeafIndex,
                ) -> ::subxt::runtime_api::Payload<
                    types::ProveMessage,
                    types::prove_message::output::Output,
                > {
                    ::subxt::runtime_api::Payload::new_static(
                        "OutboundQueueApi",
                        "prove_message",
                        types::ProveMessage { leaf_index },
                        [
                            91u8, 248u8, 79u8, 191u8, 34u8, 130u8, 159u8, 142u8, 22u8, 38u8, 175u8,
                            249u8, 166u8, 203u8, 167u8, 179u8, 172u8, 112u8, 136u8, 198u8, 151u8,
                            97u8, 100u8, 0u8, 248u8, 184u8, 199u8, 7u8, 140u8, 85u8, 142u8, 47u8,
                        ],
                    )
                }
                #[doc = " Calculate the delivery fee for `message`"]
                pub fn calculate_fee(
                    &self,
                    message: types::calculate_fee::Message,
                ) -> ::subxt::runtime_api::Payload<
                    types::CalculateFee,
                    types::calculate_fee::output::Output,
                > {
                    ::subxt::runtime_api::Payload::new_static(
                        "OutboundQueueApi",
                        "calculate_fee",
                        types::CalculateFee { message },
                        [
                            59u8, 84u8, 200u8, 198u8, 196u8, 250u8, 113u8, 141u8, 208u8, 121u8,
                            201u8, 82u8, 12u8, 116u8, 89u8, 37u8, 145u8, 93u8, 75u8, 22u8, 29u8,
                            163u8, 33u8, 38u8, 202u8, 100u8, 188u8, 19u8, 233u8, 121u8, 147u8,
                            79u8,
                        ],
                    )
                }
            }
            pub mod types {
                use super::runtime_types;
                pub mod prove_message {
                    use super::runtime_types;
                    pub type LeafIndex = ::core::primitive::u64;
                    pub mod output {
                        use super::runtime_types;
                        pub type Output = ::core::option::Option<
                            runtime_types::snowbridge_outbound_queue_merkle_tree::MerkleProof,
                        >;
                    }
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ProveMessage {
                    pub leaf_index: prove_message::LeafIndex,
                }
                pub mod calculate_fee {
                    use super::runtime_types;
                    pub type Message = runtime_types::snowbridge_core::outbound::v1::Message;
                    pub mod output {
                        use super::runtime_types;
                        pub type Output = ::core::option::Option<::core::primitive::u128>;
                    }
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct CalculateFee {
                    pub message: calculate_fee::Message,
                }
            }
        }
        pub mod control_api {
            use super::root_mod;
            use super::runtime_types;
            pub struct ControlApi;
            impl ControlApi {
                pub fn agent_id(
                    &self,
                    location: types::agent_id::Location,
                ) -> ::subxt::runtime_api::Payload<types::AgentId, types::agent_id::output::Output>
                {
                    ::subxt::runtime_api::Payload::new_static(
                        "ControlApi",
                        "agent_id",
                        types::AgentId { location },
                        [
                            157u8, 227u8, 149u8, 102u8, 224u8, 125u8, 112u8, 109u8, 191u8, 214u8,
                            8u8, 4u8, 61u8, 141u8, 54u8, 142u8, 18u8, 214u8, 92u8, 156u8, 163u8,
                            102u8, 169u8, 91u8, 22u8, 242u8, 137u8, 117u8, 97u8, 31u8, 192u8,
                            154u8,
                        ],
                    )
                }
            }
            pub mod types {
                use super::runtime_types;
                pub mod agent_id {
                    use super::runtime_types;
                    pub type Location = runtime_types::xcm::VersionedLocation;
                    pub mod output {
                        use super::runtime_types;
                        pub type Output = ::core::option::Option<::subxt::utils::H256>;
                    }
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct AgentId {
                    pub location: agent_id::Location,
                }
            }
        }
        pub mod genesis_builder {
            use super::root_mod;
            use super::runtime_types;
            #[doc = " API to interact with GenesisConfig for the runtime"]
            pub struct GenesisBuilder;
            impl GenesisBuilder {
                #[doc = " Creates the default `GenesisConfig` and returns it as a JSON blob."]
                #[doc = ""]
                #[doc = " This function instantiates the default `GenesisConfig` struct for the runtime and serializes it into a JSON"]
                #[doc = " blob. It returns a `Vec<u8>` containing the JSON representation of the default `GenesisConfig`."]
                pub fn create_default_config(
                    &self,
                ) -> ::subxt::runtime_api::Payload<
                    types::CreateDefaultConfig,
                    types::create_default_config::output::Output,
                > {
                    ::subxt::runtime_api::Payload::new_static(
                        "GenesisBuilder",
                        "create_default_config",
                        types::CreateDefaultConfig {},
                        [
                            238u8, 5u8, 139u8, 81u8, 184u8, 155u8, 221u8, 118u8, 190u8, 76u8,
                            229u8, 67u8, 132u8, 89u8, 83u8, 80u8, 56u8, 171u8, 169u8, 64u8, 123u8,
                            20u8, 129u8, 159u8, 28u8, 135u8, 84u8, 52u8, 192u8, 98u8, 104u8, 214u8,
                        ],
                    )
                }
                #[doc = " Build `GenesisConfig` from a JSON blob not using any defaults and store it in the storage."]
                #[doc = ""]
                #[doc = " This function deserializes the full `GenesisConfig` from the given JSON blob and puts it into the storage."]
                #[doc = " If the provided JSON blob is incorrect or incomplete or the deserialization fails, an error is returned."]
                #[doc = " It is recommended to log any errors encountered during the process."]
                #[doc = ""]
                #[doc = " Please note that provided json blob must contain all `GenesisConfig` fields, no defaults will be used."]
                pub fn build_config(
                    &self,
                    json: types::build_config::Json,
                ) -> ::subxt::runtime_api::Payload<
                    types::BuildConfig,
                    types::build_config::output::Output,
                > {
                    ::subxt::runtime_api::Payload::new_static(
                        "GenesisBuilder",
                        "build_config",
                        types::BuildConfig { json },
                        [
                            6u8, 98u8, 68u8, 125u8, 157u8, 26u8, 107u8, 86u8, 213u8, 227u8, 26u8,
                            229u8, 122u8, 161u8, 229u8, 114u8, 123u8, 192u8, 66u8, 231u8, 148u8,
                            175u8, 5u8, 185u8, 248u8, 88u8, 40u8, 122u8, 230u8, 209u8, 170u8,
                            254u8,
                        ],
                    )
                }
            }
            pub mod types {
                use super::runtime_types;
                pub mod create_default_config {
                    use super::runtime_types;
                    pub mod output {
                        use super::runtime_types;
                        pub type Output = ::std::vec::Vec<::core::primitive::u8>;
                    }
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct CreateDefaultConfig {}
                pub mod build_config {
                    use super::runtime_types;
                    pub type Json = ::std::vec::Vec<::core::primitive::u8>;
                    pub mod output {
                        use super::runtime_types;
                        pub type Output = ::core::result::Result<(), ::std::string::String>;
                    }
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct BuildConfig {
                    pub json: build_config::Json,
                }
            }
        }
    }
    pub fn custom() -> CustomValuesApi {
        CustomValuesApi
    }
    pub struct CustomValuesApi;
    impl CustomValuesApi {}
    pub struct ConstantsApi;
    impl ConstantsApi {
        pub fn system(&self) -> system::constants::ConstantsApi {
            system::constants::ConstantsApi
        }
        pub fn timestamp(&self) -> timestamp::constants::ConstantsApi {
            timestamp::constants::ConstantsApi
        }
        pub fn balances(&self) -> balances::constants::ConstantsApi {
            balances::constants::ConstantsApi
        }
        pub fn transaction_payment(&self) -> transaction_payment::constants::ConstantsApi {
            transaction_payment::constants::ConstantsApi
        }
        pub fn xcmp_queue(&self) -> xcmp_queue::constants::ConstantsApi {
            xcmp_queue::constants::ConstantsApi
        }
        pub fn utility(&self) -> utility::constants::ConstantsApi {
            utility::constants::ConstantsApi
        }
        pub fn multisig(&self) -> multisig::constants::ConstantsApi {
            multisig::constants::ConstantsApi
        }
        pub fn bridge_westend_grandpa(&self) -> bridge_westend_grandpa::constants::ConstantsApi {
            bridge_westend_grandpa::constants::ConstantsApi
        }
        pub fn bridge_westend_parachains(
            &self,
        ) -> bridge_westend_parachains::constants::ConstantsApi {
            bridge_westend_parachains::constants::ConstantsApi
        }
        pub fn bridge_westend_messages(&self) -> bridge_westend_messages::constants::ConstantsApi {
            bridge_westend_messages::constants::ConstantsApi
        }
        pub fn xcm_over_bridge_hub_westend(
            &self,
        ) -> xcm_over_bridge_hub_westend::constants::ConstantsApi {
            xcm_over_bridge_hub_westend::constants::ConstantsApi
        }
        pub fn bridge_polkadot_bulletin_grandpa(
            &self,
        ) -> bridge_polkadot_bulletin_grandpa::constants::ConstantsApi {
            bridge_polkadot_bulletin_grandpa::constants::ConstantsApi
        }
        pub fn bridge_polkadot_bulletin_messages(
            &self,
        ) -> bridge_polkadot_bulletin_messages::constants::ConstantsApi {
            bridge_polkadot_bulletin_messages::constants::ConstantsApi
        }
        pub fn xcm_over_polkadot_bulletin(
            &self,
        ) -> xcm_over_polkadot_bulletin::constants::ConstantsApi {
            xcm_over_polkadot_bulletin::constants::ConstantsApi
        }
        pub fn ethereum_inbound_queue(&self) -> ethereum_inbound_queue::constants::ConstantsApi {
            ethereum_inbound_queue::constants::ConstantsApi
        }
        pub fn ethereum_outbound_queue(&self) -> ethereum_outbound_queue::constants::ConstantsApi {
            ethereum_outbound_queue::constants::ConstantsApi
        }
        pub fn ethereum_beacon_client(&self) -> ethereum_beacon_client::constants::ConstantsApi {
            ethereum_beacon_client::constants::ConstantsApi
        }
        pub fn ethereum_system(&self) -> ethereum_system::constants::ConstantsApi {
            ethereum_system::constants::ConstantsApi
        }
        pub fn message_queue(&self) -> message_queue::constants::ConstantsApi {
            message_queue::constants::ConstantsApi
        }
    }
    pub struct StorageApi;
    impl StorageApi {
        pub fn system(&self) -> system::storage::StorageApi {
            system::storage::StorageApi
        }
        pub fn parachain_system(&self) -> parachain_system::storage::StorageApi {
            parachain_system::storage::StorageApi
        }
        pub fn timestamp(&self) -> timestamp::storage::StorageApi {
            timestamp::storage::StorageApi
        }
        pub fn parachain_info(&self) -> parachain_info::storage::StorageApi {
            parachain_info::storage::StorageApi
        }
        pub fn balances(&self) -> balances::storage::StorageApi {
            balances::storage::StorageApi
        }
        pub fn transaction_payment(&self) -> transaction_payment::storage::StorageApi {
            transaction_payment::storage::StorageApi
        }
        pub fn authorship(&self) -> authorship::storage::StorageApi {
            authorship::storage::StorageApi
        }
        pub fn collator_selection(&self) -> collator_selection::storage::StorageApi {
            collator_selection::storage::StorageApi
        }
        pub fn session(&self) -> session::storage::StorageApi {
            session::storage::StorageApi
        }
        pub fn aura(&self) -> aura::storage::StorageApi {
            aura::storage::StorageApi
        }
        pub fn aura_ext(&self) -> aura_ext::storage::StorageApi {
            aura_ext::storage::StorageApi
        }
        pub fn xcmp_queue(&self) -> xcmp_queue::storage::StorageApi {
            xcmp_queue::storage::StorageApi
        }
        pub fn polkadot_xcm(&self) -> polkadot_xcm::storage::StorageApi {
            polkadot_xcm::storage::StorageApi
        }
        pub fn multisig(&self) -> multisig::storage::StorageApi {
            multisig::storage::StorageApi
        }
        pub fn bridge_relayers(&self) -> bridge_relayers::storage::StorageApi {
            bridge_relayers::storage::StorageApi
        }
        pub fn bridge_westend_grandpa(&self) -> bridge_westend_grandpa::storage::StorageApi {
            bridge_westend_grandpa::storage::StorageApi
        }
        pub fn bridge_westend_parachains(&self) -> bridge_westend_parachains::storage::StorageApi {
            bridge_westend_parachains::storage::StorageApi
        }
        pub fn bridge_westend_messages(&self) -> bridge_westend_messages::storage::StorageApi {
            bridge_westend_messages::storage::StorageApi
        }
        pub fn bridge_polkadot_bulletin_grandpa(
            &self,
        ) -> bridge_polkadot_bulletin_grandpa::storage::StorageApi {
            bridge_polkadot_bulletin_grandpa::storage::StorageApi
        }
        pub fn bridge_polkadot_bulletin_messages(
            &self,
        ) -> bridge_polkadot_bulletin_messages::storage::StorageApi {
            bridge_polkadot_bulletin_messages::storage::StorageApi
        }
        pub fn ethereum_inbound_queue(&self) -> ethereum_inbound_queue::storage::StorageApi {
            ethereum_inbound_queue::storage::StorageApi
        }
        pub fn ethereum_outbound_queue(&self) -> ethereum_outbound_queue::storage::StorageApi {
            ethereum_outbound_queue::storage::StorageApi
        }
        pub fn ethereum_beacon_client(&self) -> ethereum_beacon_client::storage::StorageApi {
            ethereum_beacon_client::storage::StorageApi
        }
        pub fn ethereum_system(&self) -> ethereum_system::storage::StorageApi {
            ethereum_system::storage::StorageApi
        }
        pub fn message_queue(&self) -> message_queue::storage::StorageApi {
            message_queue::storage::StorageApi
        }
    }
    pub struct TransactionApi;
    impl TransactionApi {
        pub fn system(&self) -> system::calls::TransactionApi {
            system::calls::TransactionApi
        }
        pub fn parachain_system(&self) -> parachain_system::calls::TransactionApi {
            parachain_system::calls::TransactionApi
        }
        pub fn timestamp(&self) -> timestamp::calls::TransactionApi {
            timestamp::calls::TransactionApi
        }
        pub fn parachain_info(&self) -> parachain_info::calls::TransactionApi {
            parachain_info::calls::TransactionApi
        }
        pub fn balances(&self) -> balances::calls::TransactionApi {
            balances::calls::TransactionApi
        }
        pub fn collator_selection(&self) -> collator_selection::calls::TransactionApi {
            collator_selection::calls::TransactionApi
        }
        pub fn session(&self) -> session::calls::TransactionApi {
            session::calls::TransactionApi
        }
        pub fn xcmp_queue(&self) -> xcmp_queue::calls::TransactionApi {
            xcmp_queue::calls::TransactionApi
        }
        pub fn polkadot_xcm(&self) -> polkadot_xcm::calls::TransactionApi {
            polkadot_xcm::calls::TransactionApi
        }
        pub fn cumulus_xcm(&self) -> cumulus_xcm::calls::TransactionApi {
            cumulus_xcm::calls::TransactionApi
        }
        pub fn utility(&self) -> utility::calls::TransactionApi {
            utility::calls::TransactionApi
        }
        pub fn multisig(&self) -> multisig::calls::TransactionApi {
            multisig::calls::TransactionApi
        }
        pub fn bridge_relayers(&self) -> bridge_relayers::calls::TransactionApi {
            bridge_relayers::calls::TransactionApi
        }
        pub fn bridge_westend_grandpa(&self) -> bridge_westend_grandpa::calls::TransactionApi {
            bridge_westend_grandpa::calls::TransactionApi
        }
        pub fn bridge_westend_parachains(
            &self,
        ) -> bridge_westend_parachains::calls::TransactionApi {
            bridge_westend_parachains::calls::TransactionApi
        }
        pub fn bridge_westend_messages(&self) -> bridge_westend_messages::calls::TransactionApi {
            bridge_westend_messages::calls::TransactionApi
        }
        pub fn bridge_polkadot_bulletin_grandpa(
            &self,
        ) -> bridge_polkadot_bulletin_grandpa::calls::TransactionApi {
            bridge_polkadot_bulletin_grandpa::calls::TransactionApi
        }
        pub fn bridge_polkadot_bulletin_messages(
            &self,
        ) -> bridge_polkadot_bulletin_messages::calls::TransactionApi {
            bridge_polkadot_bulletin_messages::calls::TransactionApi
        }
        pub fn ethereum_inbound_queue(&self) -> ethereum_inbound_queue::calls::TransactionApi {
            ethereum_inbound_queue::calls::TransactionApi
        }
        pub fn ethereum_outbound_queue(&self) -> ethereum_outbound_queue::calls::TransactionApi {
            ethereum_outbound_queue::calls::TransactionApi
        }
        pub fn ethereum_beacon_client(&self) -> ethereum_beacon_client::calls::TransactionApi {
            ethereum_beacon_client::calls::TransactionApi
        }
        pub fn ethereum_system(&self) -> ethereum_system::calls::TransactionApi {
            ethereum_system::calls::TransactionApi
        }
        pub fn message_queue(&self) -> message_queue::calls::TransactionApi {
            message_queue::calls::TransactionApi
        }
    }
    #[doc = r" check whether the metadata provided is aligned with this statically generated code."]
    pub fn is_codegen_valid_for(metadata: &::subxt::Metadata) -> bool {
        let runtime_metadata_hash = metadata
            .hasher()
            .only_these_pallets(&PALLETS)
            .only_these_runtime_apis(&RUNTIME_APIS)
            .hash();
        runtime_metadata_hash
            == [
                56u8, 82u8, 38u8, 107u8, 65u8, 2u8, 176u8, 168u8, 221u8, 82u8, 146u8, 116u8, 240u8,
                132u8, 165u8, 172u8, 13u8, 209u8, 49u8, 47u8, 31u8, 132u8, 82u8, 16u8, 187u8,
                177u8, 23u8, 157u8, 123u8, 57u8, 50u8, 167u8,
            ]
    }
    pub mod system {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "Error for the System pallet"]
        pub type Error = runtime_types::frame_system::pallet::Error;
        #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
        pub type Call = runtime_types::frame_system::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "See [`Pallet::remark`]."]
                pub struct Remark {
                    pub remark: remark::Remark,
                }
                pub mod remark {
                    use super::runtime_types;
                    pub type Remark = ::std::vec::Vec<::core::primitive::u8>;
                }
                impl ::subxt::blocks::StaticExtrinsic for Remark {
                    const PALLET: &'static str = "System";
                    const CALL: &'static str = "remark";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "See [`Pallet::set_heap_pages`]."]
                pub struct SetHeapPages {
                    pub pages: set_heap_pages::Pages,
                }
                pub mod set_heap_pages {
                    use super::runtime_types;
                    pub type Pages = ::core::primitive::u64;
                }
                impl ::subxt::blocks::StaticExtrinsic for SetHeapPages {
                    const PALLET: &'static str = "System";
                    const CALL: &'static str = "set_heap_pages";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "See [`Pallet::set_code`]."]
                pub struct SetCode {
                    pub code: set_code::Code,
                }
                pub mod set_code {
                    use super::runtime_types;
                    pub type Code = ::std::vec::Vec<::core::primitive::u8>;
                }
                impl ::subxt::blocks::StaticExtrinsic for SetCode {
                    const PALLET: &'static str = "System";
                    const CALL: &'static str = "set_code";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "See [`Pallet::set_code_without_checks`]."]
                pub struct SetCodeWithoutChecks {
                    pub code: set_code_without_checks::Code,
                }
                pub mod set_code_without_checks {
                    use super::runtime_types;
                    pub type Code = ::std::vec::Vec<::core::primitive::u8>;
                }
                impl ::subxt::blocks::StaticExtrinsic for SetCodeWithoutChecks {
                    const PALLET: &'static str = "System";
                    const CALL: &'static str = "set_code_without_checks";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "See [`Pallet::set_storage`]."]
                pub struct SetStorage {
                    pub items: set_storage::Items,
                }
                pub mod set_storage {
                    use super::runtime_types;
                    pub type Items = ::std::vec::Vec<(
                        ::std::vec::Vec<::core::primitive::u8>,
                        ::std::vec::Vec<::core::primitive::u8>,
                    )>;
                }
                impl ::subxt::blocks::StaticExtrinsic for SetStorage {
                    const PALLET: &'static str = "System";
                    const CALL: &'static str = "set_storage";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "See [`Pallet::kill_storage`]."]
                pub struct KillStorage {
                    pub keys: kill_storage::Keys,
                }
                pub mod kill_storage {
                    use super::runtime_types;
                    pub type Keys = ::std::vec::Vec<::std::vec::Vec<::core::primitive::u8>>;
                }
                impl ::subxt::blocks::StaticExtrinsic for KillStorage {
                    const PALLET: &'static str = "System";
                    const CALL: &'static str = "kill_storage";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "See [`Pallet::kill_prefix`]."]
                pub struct KillPrefix {
                    pub prefix: kill_prefix::Prefix,
                    pub subkeys: kill_prefix::Subkeys,
                }
                pub mod kill_prefix {
                    use super::runtime_types;
                    pub type Prefix = ::std::vec::Vec<::core::primitive::u8>;
                    pub type Subkeys = ::core::primitive::u32;
                }
                impl ::subxt::blocks::StaticExtrinsic for KillPrefix {
                    const PALLET: &'static str = "System";
                    const CALL: &'static str = "kill_prefix";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "See [`Pallet::remark_with_event`]."]
                pub struct RemarkWithEvent {
                    pub remark: remark_with_event::Remark,
                }
                pub mod remark_with_event {
                    use super::runtime_types;
                    pub type Remark = ::std::vec::Vec<::core::primitive::u8>;
                }
                impl ::subxt::blocks::StaticExtrinsic for RemarkWithEvent {
                    const PALLET: &'static str = "System";
                    const CALL: &'static str = "remark_with_event";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "See [`Pallet::authorize_upgrade`]."]
                pub struct AuthorizeUpgrade {
                    pub code_hash: authorize_upgrade::CodeHash,
                }
                pub mod authorize_upgrade {
                    use super::runtime_types;
                    pub type CodeHash = ::subxt::utils::H256;
                }
                impl ::subxt::blocks::StaticExtrinsic for AuthorizeUpgrade {
                    const PALLET: &'static str = "System";
                    const CALL: &'static str = "authorize_upgrade";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "See [`Pallet::authorize_upgrade_without_checks`]."]
                pub struct AuthorizeUpgradeWithoutChecks {
                    pub code_hash: authorize_upgrade_without_checks::CodeHash,
                }
                pub mod authorize_upgrade_without_checks {
                    use super::runtime_types;
                    pub type CodeHash = ::subxt::utils::H256;
                }
                impl ::subxt::blocks::StaticExtrinsic for AuthorizeUpgradeWithoutChecks {
                    const PALLET: &'static str = "System";
                    const CALL: &'static str = "authorize_upgrade_without_checks";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "See [`Pallet::apply_authorized_upgrade`]."]
                pub struct ApplyAuthorizedUpgrade {
                    pub code: apply_authorized_upgrade::Code,
                }
                pub mod apply_authorized_upgrade {
                    use super::runtime_types;
                    pub type Code = ::std::vec::Vec<::core::primitive::u8>;
                }
                impl ::subxt::blocks::StaticExtrinsic for ApplyAuthorizedUpgrade {
                    const PALLET: &'static str = "System";
                    const CALL: &'static str = "apply_authorized_upgrade";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "See [`Pallet::remark`]."]
                pub fn remark(
                    &self,
                    remark: types::remark::Remark,
                ) -> ::subxt::tx::Payload<types::Remark> {
                    ::subxt::tx::Payload::new_static(
                        "System",
                        "remark",
                        types::Remark { remark },
                        [
                            43u8, 126u8, 180u8, 174u8, 141u8, 48u8, 52u8, 125u8, 166u8, 212u8,
                            216u8, 98u8, 100u8, 24u8, 132u8, 71u8, 101u8, 64u8, 246u8, 169u8, 33u8,
                            250u8, 147u8, 208u8, 2u8, 40u8, 129u8, 209u8, 232u8, 207u8, 207u8,
                            13u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::set_heap_pages`]."]
                pub fn set_heap_pages(
                    &self,
                    pages: types::set_heap_pages::Pages,
                ) -> ::subxt::tx::Payload<types::SetHeapPages> {
                    ::subxt::tx::Payload::new_static(
                        "System",
                        "set_heap_pages",
                        types::SetHeapPages { pages },
                        [
                            188u8, 191u8, 99u8, 216u8, 219u8, 109u8, 141u8, 50u8, 78u8, 235u8,
                            215u8, 242u8, 195u8, 24u8, 111u8, 76u8, 229u8, 64u8, 99u8, 225u8,
                            134u8, 121u8, 81u8, 209u8, 127u8, 223u8, 98u8, 215u8, 150u8, 70u8,
                            57u8, 147u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::set_code`]."]
                pub fn set_code(
                    &self,
                    code: types::set_code::Code,
                ) -> ::subxt::tx::Payload<types::SetCode> {
                    ::subxt::tx::Payload::new_static(
                        "System",
                        "set_code",
                        types::SetCode { code },
                        [
                            233u8, 248u8, 88u8, 245u8, 28u8, 65u8, 25u8, 169u8, 35u8, 237u8, 19u8,
                            203u8, 136u8, 160u8, 18u8, 3u8, 20u8, 197u8, 81u8, 169u8, 244u8, 188u8,
                            27u8, 147u8, 147u8, 236u8, 65u8, 25u8, 3u8, 143u8, 182u8, 22u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::set_code_without_checks`]."]
                pub fn set_code_without_checks(
                    &self,
                    code: types::set_code_without_checks::Code,
                ) -> ::subxt::tx::Payload<types::SetCodeWithoutChecks> {
                    ::subxt::tx::Payload::new_static(
                        "System",
                        "set_code_without_checks",
                        types::SetCodeWithoutChecks { code },
                        [
                            82u8, 212u8, 157u8, 44u8, 70u8, 0u8, 143u8, 15u8, 109u8, 109u8, 107u8,
                            157u8, 141u8, 42u8, 169u8, 11u8, 15u8, 186u8, 252u8, 138u8, 10u8,
                            147u8, 15u8, 178u8, 247u8, 229u8, 213u8, 98u8, 207u8, 231u8, 119u8,
                            115u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::set_storage`]."]
                pub fn set_storage(
                    &self,
                    items: types::set_storage::Items,
                ) -> ::subxt::tx::Payload<types::SetStorage> {
                    ::subxt::tx::Payload::new_static(
                        "System",
                        "set_storage",
                        types::SetStorage { items },
                        [
                            141u8, 216u8, 52u8, 222u8, 223u8, 136u8, 123u8, 181u8, 19u8, 75u8,
                            163u8, 102u8, 229u8, 189u8, 158u8, 142u8, 95u8, 235u8, 240u8, 49u8,
                            150u8, 76u8, 78u8, 137u8, 126u8, 88u8, 183u8, 88u8, 231u8, 146u8,
                            234u8, 43u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::kill_storage`]."]
                pub fn kill_storage(
                    &self,
                    keys: types::kill_storage::Keys,
                ) -> ::subxt::tx::Payload<types::KillStorage> {
                    ::subxt::tx::Payload::new_static(
                        "System",
                        "kill_storage",
                        types::KillStorage { keys },
                        [
                            73u8, 63u8, 196u8, 36u8, 144u8, 114u8, 34u8, 213u8, 108u8, 93u8, 209u8,
                            234u8, 153u8, 185u8, 33u8, 91u8, 187u8, 195u8, 223u8, 130u8, 58u8,
                            156u8, 63u8, 47u8, 228u8, 249u8, 216u8, 139u8, 143u8, 177u8, 41u8,
                            35u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::kill_prefix`]."]
                pub fn kill_prefix(
                    &self,
                    prefix: types::kill_prefix::Prefix,
                    subkeys: types::kill_prefix::Subkeys,
                ) -> ::subxt::tx::Payload<types::KillPrefix> {
                    ::subxt::tx::Payload::new_static(
                        "System",
                        "kill_prefix",
                        types::KillPrefix { prefix, subkeys },
                        [
                            184u8, 57u8, 139u8, 24u8, 208u8, 87u8, 108u8, 215u8, 198u8, 189u8,
                            175u8, 242u8, 167u8, 215u8, 97u8, 63u8, 110u8, 166u8, 238u8, 98u8,
                            67u8, 236u8, 111u8, 110u8, 234u8, 81u8, 102u8, 5u8, 182u8, 5u8, 214u8,
                            85u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::remark_with_event`]."]
                pub fn remark_with_event(
                    &self,
                    remark: types::remark_with_event::Remark,
                ) -> ::subxt::tx::Payload<types::RemarkWithEvent> {
                    ::subxt::tx::Payload::new_static(
                        "System",
                        "remark_with_event",
                        types::RemarkWithEvent { remark },
                        [
                            120u8, 120u8, 153u8, 92u8, 184u8, 85u8, 34u8, 2u8, 174u8, 206u8, 105u8,
                            228u8, 233u8, 130u8, 80u8, 246u8, 228u8, 59u8, 234u8, 240u8, 4u8, 49u8,
                            147u8, 170u8, 115u8, 91u8, 149u8, 200u8, 228u8, 181u8, 8u8, 154u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::authorize_upgrade`]."]
                pub fn authorize_upgrade(
                    &self,
                    code_hash: types::authorize_upgrade::CodeHash,
                ) -> ::subxt::tx::Payload<types::AuthorizeUpgrade> {
                    ::subxt::tx::Payload::new_static(
                        "System",
                        "authorize_upgrade",
                        types::AuthorizeUpgrade { code_hash },
                        [
                            4u8, 14u8, 76u8, 107u8, 209u8, 129u8, 9u8, 39u8, 193u8, 17u8, 84u8,
                            254u8, 170u8, 214u8, 24u8, 155u8, 29u8, 184u8, 249u8, 241u8, 109u8,
                            58u8, 145u8, 131u8, 109u8, 63u8, 38u8, 165u8, 107u8, 215u8, 217u8,
                            172u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::authorize_upgrade_without_checks`]."]
                pub fn authorize_upgrade_without_checks(
                    &self,
                    code_hash: types::authorize_upgrade_without_checks::CodeHash,
                ) -> ::subxt::tx::Payload<types::AuthorizeUpgradeWithoutChecks> {
                    ::subxt::tx::Payload::new_static(
                        "System",
                        "authorize_upgrade_without_checks",
                        types::AuthorizeUpgradeWithoutChecks { code_hash },
                        [
                            126u8, 126u8, 55u8, 26u8, 47u8, 55u8, 66u8, 8u8, 167u8, 18u8, 29u8,
                            136u8, 146u8, 14u8, 189u8, 117u8, 16u8, 227u8, 162u8, 61u8, 149u8,
                            197u8, 104u8, 184u8, 185u8, 161u8, 99u8, 154u8, 80u8, 125u8, 181u8,
                            233u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::apply_authorized_upgrade`]."]
                pub fn apply_authorized_upgrade(
                    &self,
                    code: types::apply_authorized_upgrade::Code,
                ) -> ::subxt::tx::Payload<types::ApplyAuthorizedUpgrade> {
                    ::subxt::tx::Payload::new_static(
                        "System",
                        "apply_authorized_upgrade",
                        types::ApplyAuthorizedUpgrade { code },
                        [
                            232u8, 107u8, 127u8, 38u8, 230u8, 29u8, 97u8, 4u8, 160u8, 191u8, 222u8,
                            156u8, 245u8, 102u8, 196u8, 141u8, 44u8, 163u8, 98u8, 68u8, 125u8,
                            32u8, 124u8, 101u8, 108u8, 93u8, 211u8, 52u8, 0u8, 231u8, 33u8, 227u8,
                        ],
                    )
                }
            }
        }
        #[doc = "Event for the System pallet."]
        pub type Event = runtime_types::frame_system::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "An extrinsic completed successfully."]
            pub struct ExtrinsicSuccess {
                pub dispatch_info: extrinsic_success::DispatchInfo,
            }
            pub mod extrinsic_success {
                use super::runtime_types;
                pub type DispatchInfo = runtime_types::frame_support::dispatch::DispatchInfo;
            }
            impl ::subxt::events::StaticEvent for ExtrinsicSuccess {
                const PALLET: &'static str = "System";
                const EVENT: &'static str = "ExtrinsicSuccess";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "An extrinsic failed."]
            pub struct ExtrinsicFailed {
                pub dispatch_error: extrinsic_failed::DispatchError,
                pub dispatch_info: extrinsic_failed::DispatchInfo,
            }
            pub mod extrinsic_failed {
                use super::runtime_types;
                pub type DispatchError = runtime_types::sp_runtime::DispatchError;
                pub type DispatchInfo = runtime_types::frame_support::dispatch::DispatchInfo;
            }
            impl ::subxt::events::StaticEvent for ExtrinsicFailed {
                const PALLET: &'static str = "System";
                const EVENT: &'static str = "ExtrinsicFailed";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "`:code` was updated."]
            pub struct CodeUpdated;
            impl ::subxt::events::StaticEvent for CodeUpdated {
                const PALLET: &'static str = "System";
                const EVENT: &'static str = "CodeUpdated";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A new account was created."]
            pub struct NewAccount {
                pub account: new_account::Account,
            }
            pub mod new_account {
                use super::runtime_types;
                pub type Account = ::subxt::utils::AccountId32;
            }
            impl ::subxt::events::StaticEvent for NewAccount {
                const PALLET: &'static str = "System";
                const EVENT: &'static str = "NewAccount";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "An account was reaped."]
            pub struct KilledAccount {
                pub account: killed_account::Account,
            }
            pub mod killed_account {
                use super::runtime_types;
                pub type Account = ::subxt::utils::AccountId32;
            }
            impl ::subxt::events::StaticEvent for KilledAccount {
                const PALLET: &'static str = "System";
                const EVENT: &'static str = "KilledAccount";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "On on-chain remark happened."]
            pub struct Remarked {
                pub sender: remarked::Sender,
                pub hash: remarked::Hash,
            }
            pub mod remarked {
                use super::runtime_types;
                pub type Sender = ::subxt::utils::AccountId32;
                pub type Hash = ::subxt::utils::H256;
            }
            impl ::subxt::events::StaticEvent for Remarked {
                const PALLET: &'static str = "System";
                const EVENT: &'static str = "Remarked";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "An upgrade was authorized."]
            pub struct UpgradeAuthorized {
                pub code_hash: upgrade_authorized::CodeHash,
                pub check_version: upgrade_authorized::CheckVersion,
            }
            pub mod upgrade_authorized {
                use super::runtime_types;
                pub type CodeHash = ::subxt::utils::H256;
                pub type CheckVersion = ::core::primitive::bool;
            }
            impl ::subxt::events::StaticEvent for UpgradeAuthorized {
                const PALLET: &'static str = "System";
                const EVENT: &'static str = "UpgradeAuthorized";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub mod types {
                use super::runtime_types;
                pub mod account {
                    use super::runtime_types;
                    pub type Account = runtime_types::frame_system::AccountInfo<
                        ::core::primitive::u32,
                        runtime_types::pallet_balances::types::AccountData<::core::primitive::u128>,
                    >;
                    pub type Param0 = ::subxt::utils::AccountId32;
                }
                pub mod extrinsic_count {
                    use super::runtime_types;
                    pub type ExtrinsicCount = ::core::primitive::u32;
                }
                pub mod block_weight {
                    use super::runtime_types;
                    pub type BlockWeight = runtime_types::frame_support::dispatch::PerDispatchClass<
                        runtime_types::sp_weights::weight_v2::Weight,
                    >;
                }
                pub mod all_extrinsics_len {
                    use super::runtime_types;
                    pub type AllExtrinsicsLen = ::core::primitive::u32;
                }
                pub mod block_hash {
                    use super::runtime_types;
                    pub type BlockHash = ::subxt::utils::H256;
                    pub type Param0 = ::core::primitive::u32;
                }
                pub mod extrinsic_data {
                    use super::runtime_types;
                    pub type ExtrinsicData = ::std::vec::Vec<::core::primitive::u8>;
                    pub type Param0 = ::core::primitive::u32;
                }
                pub mod number {
                    use super::runtime_types;
                    pub type Number = ::core::primitive::u32;
                }
                pub mod parent_hash {
                    use super::runtime_types;
                    pub type ParentHash = ::subxt::utils::H256;
                }
                pub mod digest {
                    use super::runtime_types;
                    pub type Digest = runtime_types::sp_runtime::generic::digest::Digest;
                }
                pub mod events {
                    use super::runtime_types;
                    pub type Events = ::std::vec::Vec<
                        runtime_types::frame_system::EventRecord<
                            runtime_types::bridge_hub_rococo_runtime::RuntimeEvent,
                            ::subxt::utils::H256,
                        >,
                    >;
                }
                pub mod event_count {
                    use super::runtime_types;
                    pub type EventCount = ::core::primitive::u32;
                }
                pub mod event_topics {
                    use super::runtime_types;
                    pub type EventTopics =
                        ::std::vec::Vec<(::core::primitive::u32, ::core::primitive::u32)>;
                    pub type Param0 = ::subxt::utils::H256;
                }
                pub mod last_runtime_upgrade {
                    use super::runtime_types;
                    pub type LastRuntimeUpgrade =
                        runtime_types::frame_system::LastRuntimeUpgradeInfo;
                }
                pub mod upgraded_to_u32_ref_count {
                    use super::runtime_types;
                    pub type UpgradedToU32RefCount = ::core::primitive::bool;
                }
                pub mod upgraded_to_triple_ref_count {
                    use super::runtime_types;
                    pub type UpgradedToTripleRefCount = ::core::primitive::bool;
                }
                pub mod execution_phase {
                    use super::runtime_types;
                    pub type ExecutionPhase = runtime_types::frame_system::Phase;
                }
                pub mod authorized_upgrade {
                    use super::runtime_types;
                    pub type AuthorizedUpgrade =
                        runtime_types::frame_system::CodeUpgradeAuthorization;
                }
            }
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " The full account information for a particular account ID."]
                pub fn account_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::account::Account,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "System",
                        "Account",
                        vec![],
                        [
                            14u8, 233u8, 115u8, 214u8, 0u8, 109u8, 222u8, 121u8, 162u8, 65u8, 60u8,
                            175u8, 209u8, 79u8, 222u8, 124u8, 22u8, 235u8, 138u8, 176u8, 133u8,
                            124u8, 90u8, 158u8, 85u8, 45u8, 37u8, 174u8, 47u8, 79u8, 47u8, 166u8,
                        ],
                    )
                }
                #[doc = " The full account information for a particular account ID."]
                pub fn account(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::account::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::account::Account,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "System",
                        "Account",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            14u8, 233u8, 115u8, 214u8, 0u8, 109u8, 222u8, 121u8, 162u8, 65u8, 60u8,
                            175u8, 209u8, 79u8, 222u8, 124u8, 22u8, 235u8, 138u8, 176u8, 133u8,
                            124u8, 90u8, 158u8, 85u8, 45u8, 37u8, 174u8, 47u8, 79u8, 47u8, 166u8,
                        ],
                    )
                }
                #[doc = " Total extrinsics count for the current block."]
                pub fn extrinsic_count(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::extrinsic_count::ExtrinsicCount,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "System",
                        "ExtrinsicCount",
                        vec![],
                        [
                            102u8, 76u8, 236u8, 42u8, 40u8, 231u8, 33u8, 222u8, 123u8, 147u8,
                            153u8, 148u8, 234u8, 203u8, 181u8, 119u8, 6u8, 187u8, 177u8, 199u8,
                            120u8, 47u8, 137u8, 254u8, 96u8, 100u8, 165u8, 182u8, 249u8, 230u8,
                            159u8, 79u8,
                        ],
                    )
                }
                #[doc = " The current weight for the block."]
                pub fn block_weight(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::block_weight::BlockWeight,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "System",
                        "BlockWeight",
                        vec![],
                        [
                            158u8, 46u8, 228u8, 89u8, 210u8, 214u8, 84u8, 154u8, 50u8, 68u8, 63u8,
                            62u8, 43u8, 42u8, 99u8, 27u8, 54u8, 42u8, 146u8, 44u8, 241u8, 216u8,
                            229u8, 30u8, 216u8, 255u8, 165u8, 238u8, 181u8, 130u8, 36u8, 102u8,
                        ],
                    )
                }
                #[doc = " Total length (in bytes) for all extrinsics put together, for the current block."]
                pub fn all_extrinsics_len(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::all_extrinsics_len::AllExtrinsicsLen,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "System",
                        "AllExtrinsicsLen",
                        vec![],
                        [
                            117u8, 86u8, 61u8, 243u8, 41u8, 51u8, 102u8, 214u8, 137u8, 100u8,
                            243u8, 185u8, 122u8, 174u8, 187u8, 117u8, 86u8, 189u8, 63u8, 135u8,
                            101u8, 218u8, 203u8, 201u8, 237u8, 254u8, 128u8, 183u8, 169u8, 221u8,
                            242u8, 65u8,
                        ],
                    )
                }
                #[doc = " Map of block numbers to block hashes."]
                pub fn block_hash_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::block_hash::BlockHash,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "System",
                        "BlockHash",
                        vec![],
                        [
                            217u8, 32u8, 215u8, 253u8, 24u8, 182u8, 207u8, 178u8, 157u8, 24u8,
                            103u8, 100u8, 195u8, 165u8, 69u8, 152u8, 112u8, 181u8, 56u8, 192u8,
                            164u8, 16u8, 20u8, 222u8, 28u8, 214u8, 144u8, 142u8, 146u8, 69u8,
                            202u8, 118u8,
                        ],
                    )
                }
                #[doc = " Map of block numbers to block hashes."]
                pub fn block_hash(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::block_hash::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::block_hash::BlockHash,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "System",
                        "BlockHash",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            217u8, 32u8, 215u8, 253u8, 24u8, 182u8, 207u8, 178u8, 157u8, 24u8,
                            103u8, 100u8, 195u8, 165u8, 69u8, 152u8, 112u8, 181u8, 56u8, 192u8,
                            164u8, 16u8, 20u8, 222u8, 28u8, 214u8, 144u8, 142u8, 146u8, 69u8,
                            202u8, 118u8,
                        ],
                    )
                }
                #[doc = " Extrinsics data for the current block (maps an extrinsic's index to its data)."]
                pub fn extrinsic_data_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::extrinsic_data::ExtrinsicData,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "System",
                        "ExtrinsicData",
                        vec![],
                        [
                            160u8, 180u8, 122u8, 18u8, 196u8, 26u8, 2u8, 37u8, 115u8, 232u8, 133u8,
                            220u8, 106u8, 245u8, 4u8, 129u8, 42u8, 84u8, 241u8, 45u8, 199u8, 179u8,
                            128u8, 61u8, 170u8, 137u8, 231u8, 156u8, 247u8, 57u8, 47u8, 38u8,
                        ],
                    )
                }
                #[doc = " Extrinsics data for the current block (maps an extrinsic's index to its data)."]
                pub fn extrinsic_data(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::extrinsic_data::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::extrinsic_data::ExtrinsicData,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "System",
                        "ExtrinsicData",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            160u8, 180u8, 122u8, 18u8, 196u8, 26u8, 2u8, 37u8, 115u8, 232u8, 133u8,
                            220u8, 106u8, 245u8, 4u8, 129u8, 42u8, 84u8, 241u8, 45u8, 199u8, 179u8,
                            128u8, 61u8, 170u8, 137u8, 231u8, 156u8, 247u8, 57u8, 47u8, 38u8,
                        ],
                    )
                }
                #[doc = " The current block number being processed. Set by `execute_block`."]
                pub fn number(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::number::Number,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "System",
                        "Number",
                        vec![],
                        [
                            30u8, 194u8, 177u8, 90u8, 194u8, 232u8, 46u8, 180u8, 85u8, 129u8, 14u8,
                            9u8, 8u8, 8u8, 23u8, 95u8, 230u8, 5u8, 13u8, 105u8, 125u8, 2u8, 22u8,
                            200u8, 78u8, 93u8, 115u8, 28u8, 150u8, 113u8, 48u8, 53u8,
                        ],
                    )
                }
                #[doc = " Hash of the previous block."]
                pub fn parent_hash(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::parent_hash::ParentHash,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "System",
                        "ParentHash",
                        vec![],
                        [
                            26u8, 130u8, 11u8, 216u8, 155u8, 71u8, 128u8, 170u8, 30u8, 153u8, 21u8,
                            192u8, 62u8, 93u8, 137u8, 80u8, 120u8, 81u8, 202u8, 94u8, 248u8, 125u8,
                            71u8, 82u8, 141u8, 229u8, 32u8, 56u8, 73u8, 50u8, 101u8, 78u8,
                        ],
                    )
                }
                #[doc = " Digest of the current block, also part of the block header."]
                pub fn digest(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::digest::Digest,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "System",
                        "Digest",
                        vec![],
                        [
                            61u8, 64u8, 237u8, 91u8, 145u8, 232u8, 17u8, 254u8, 181u8, 16u8, 234u8,
                            91u8, 51u8, 140u8, 254u8, 131u8, 98u8, 135u8, 21u8, 37u8, 251u8, 20u8,
                            58u8, 92u8, 123u8, 141u8, 14u8, 227u8, 146u8, 46u8, 222u8, 117u8,
                        ],
                    )
                }
                #[doc = " Events deposited for the current block."]
                #[doc = ""]
                #[doc = " NOTE: The item is unbound and should therefore never be read on chain."]
                #[doc = " It could otherwise inflate the PoV size of a block."]
                #[doc = ""]
                #[doc = " Events have a large in-memory size. Box the events to not go out-of-memory"]
                #[doc = " just in case someone still reads them from within the runtime."]
                pub fn events(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::events::Events,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "System",
                        "Events",
                        vec![],
                        [
                            145u8, 204u8, 44u8, 206u8, 42u8, 112u8, 233u8, 214u8, 179u8, 94u8,
                            12u8, 129u8, 186u8, 38u8, 219u8, 95u8, 157u8, 244u8, 48u8, 217u8,
                            152u8, 46u8, 80u8, 184u8, 143u8, 95u8, 56u8, 115u8, 183u8, 242u8, 95u8,
                            163u8,
                        ],
                    )
                }
                #[doc = " The number of events in the `Events<T>` list."]
                pub fn event_count(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::event_count::EventCount,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "System",
                        "EventCount",
                        vec![],
                        [
                            175u8, 24u8, 252u8, 184u8, 210u8, 167u8, 146u8, 143u8, 164u8, 80u8,
                            151u8, 205u8, 189u8, 189u8, 55u8, 220u8, 47u8, 101u8, 181u8, 33u8,
                            254u8, 131u8, 13u8, 143u8, 3u8, 244u8, 245u8, 45u8, 2u8, 210u8, 79u8,
                            133u8,
                        ],
                    )
                }
                #[doc = " Mapping between a topic (represented by T::Hash) and a vector of indexes"]
                #[doc = " of events in the `<Events<T>>` list."]
                #[doc = ""]
                #[doc = " All topic vectors have deterministic storage locations depending on the topic. This"]
                #[doc = " allows light-clients to leverage the changes trie storage tracking mechanism and"]
                #[doc = " in case of changes fetch the list of events of interest."]
                #[doc = ""]
                #[doc = " The value has the type `(BlockNumberFor<T>, EventIndex)` because if we used only just"]
                #[doc = " the `EventIndex` then in case if the topic has the same contents on the next block"]
                #[doc = " no notification will be triggered thus the event might be lost."]
                pub fn event_topics_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::event_topics::EventTopics,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "System",
                        "EventTopics",
                        vec![],
                        [
                            40u8, 225u8, 14u8, 75u8, 44u8, 176u8, 76u8, 34u8, 143u8, 107u8, 69u8,
                            133u8, 114u8, 13u8, 172u8, 250u8, 141u8, 73u8, 12u8, 65u8, 217u8, 63u8,
                            120u8, 241u8, 48u8, 106u8, 143u8, 161u8, 128u8, 100u8, 166u8, 59u8,
                        ],
                    )
                }
                #[doc = " Mapping between a topic (represented by T::Hash) and a vector of indexes"]
                #[doc = " of events in the `<Events<T>>` list."]
                #[doc = ""]
                #[doc = " All topic vectors have deterministic storage locations depending on the topic. This"]
                #[doc = " allows light-clients to leverage the changes trie storage tracking mechanism and"]
                #[doc = " in case of changes fetch the list of events of interest."]
                #[doc = ""]
                #[doc = " The value has the type `(BlockNumberFor<T>, EventIndex)` because if we used only just"]
                #[doc = " the `EventIndex` then in case if the topic has the same contents on the next block"]
                #[doc = " no notification will be triggered thus the event might be lost."]
                pub fn event_topics(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::event_topics::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::event_topics::EventTopics,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "System",
                        "EventTopics",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            40u8, 225u8, 14u8, 75u8, 44u8, 176u8, 76u8, 34u8, 143u8, 107u8, 69u8,
                            133u8, 114u8, 13u8, 172u8, 250u8, 141u8, 73u8, 12u8, 65u8, 217u8, 63u8,
                            120u8, 241u8, 48u8, 106u8, 143u8, 161u8, 128u8, 100u8, 166u8, 59u8,
                        ],
                    )
                }
                #[doc = " Stores the `spec_version` and `spec_name` of when the last runtime upgrade happened."]
                pub fn last_runtime_upgrade(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::last_runtime_upgrade::LastRuntimeUpgrade,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "System",
                        "LastRuntimeUpgrade",
                        vec![],
                        [
                            137u8, 29u8, 175u8, 75u8, 197u8, 208u8, 91u8, 207u8, 156u8, 87u8,
                            148u8, 68u8, 91u8, 140u8, 22u8, 233u8, 1u8, 229u8, 56u8, 34u8, 40u8,
                            194u8, 253u8, 30u8, 163u8, 39u8, 54u8, 209u8, 13u8, 27u8, 139u8, 184u8,
                        ],
                    )
                }
                #[doc = " True if we have upgraded so that `type RefCount` is `u32`. False (default) if not."]
                pub fn upgraded_to_u32_ref_count(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::upgraded_to_u32_ref_count::UpgradedToU32RefCount,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "System",
                        "UpgradedToU32RefCount",
                        vec![],
                        [
                            229u8, 73u8, 9u8, 132u8, 186u8, 116u8, 151u8, 171u8, 145u8, 29u8, 34u8,
                            130u8, 52u8, 146u8, 124u8, 175u8, 79u8, 189u8, 147u8, 230u8, 234u8,
                            107u8, 124u8, 31u8, 2u8, 22u8, 86u8, 190u8, 4u8, 147u8, 50u8, 245u8,
                        ],
                    )
                }
                #[doc = " True if we have upgraded so that AccountInfo contains three types of `RefCount`. False"]
                #[doc = " (default) if not."]
                pub fn upgraded_to_triple_ref_count(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::upgraded_to_triple_ref_count::UpgradedToTripleRefCount,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "System",
                        "UpgradedToTripleRefCount",
                        vec![],
                        [
                            97u8, 66u8, 124u8, 243u8, 27u8, 167u8, 147u8, 81u8, 254u8, 201u8,
                            101u8, 24u8, 40u8, 231u8, 14u8, 179u8, 154u8, 163u8, 71u8, 81u8, 185u8,
                            167u8, 82u8, 254u8, 189u8, 3u8, 101u8, 207u8, 206u8, 194u8, 155u8,
                            151u8,
                        ],
                    )
                }
                #[doc = " The execution phase of the block."]
                pub fn execution_phase(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::execution_phase::ExecutionPhase,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "System",
                        "ExecutionPhase",
                        vec![],
                        [
                            191u8, 129u8, 100u8, 134u8, 126u8, 116u8, 154u8, 203u8, 220u8, 200u8,
                            0u8, 26u8, 161u8, 250u8, 133u8, 205u8, 146u8, 24u8, 5u8, 156u8, 158u8,
                            35u8, 36u8, 253u8, 52u8, 235u8, 86u8, 167u8, 35u8, 100u8, 119u8, 27u8,
                        ],
                    )
                }
                #[doc = " `Some` if a code upgrade has been authorized."]
                pub fn authorized_upgrade(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::authorized_upgrade::AuthorizedUpgrade,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "System",
                        "AuthorizedUpgrade",
                        vec![],
                        [
                            165u8, 97u8, 27u8, 138u8, 2u8, 28u8, 55u8, 92u8, 96u8, 96u8, 168u8,
                            169u8, 55u8, 178u8, 44u8, 127u8, 58u8, 140u8, 206u8, 178u8, 1u8, 37u8,
                            214u8, 213u8, 251u8, 123u8, 5u8, 111u8, 90u8, 148u8, 217u8, 135u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                #[doc = " Block & extrinsics weights: base values and limits."]
                pub fn block_weights(
                    &self,
                ) -> ::subxt::constants::Address<runtime_types::frame_system::limits::BlockWeights>
                {
                    ::subxt::constants::Address::new_static(
                        "System",
                        "BlockWeights",
                        [
                            176u8, 124u8, 225u8, 136u8, 25u8, 73u8, 247u8, 33u8, 82u8, 206u8, 85u8,
                            190u8, 127u8, 102u8, 71u8, 11u8, 185u8, 8u8, 58u8, 0u8, 94u8, 55u8,
                            163u8, 177u8, 104u8, 59u8, 60u8, 136u8, 246u8, 116u8, 0u8, 239u8,
                        ],
                    )
                }
                #[doc = " The maximum length of a block (in bytes)."]
                pub fn block_length(
                    &self,
                ) -> ::subxt::constants::Address<runtime_types::frame_system::limits::BlockLength>
                {
                    ::subxt::constants::Address::new_static(
                        "System",
                        "BlockLength",
                        [
                            23u8, 242u8, 225u8, 39u8, 225u8, 67u8, 152u8, 41u8, 155u8, 104u8, 68u8,
                            229u8, 185u8, 133u8, 10u8, 143u8, 184u8, 152u8, 234u8, 44u8, 140u8,
                            96u8, 166u8, 235u8, 162u8, 160u8, 72u8, 7u8, 35u8, 194u8, 3u8, 37u8,
                        ],
                    )
                }
                #[doc = " Maximum number of block number to block hash mappings to keep (oldest pruned first)."]
                pub fn block_hash_count(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "System",
                        "BlockHashCount",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " The weight of runtime database operations the runtime can invoke."]
                pub fn db_weight(
                    &self,
                ) -> ::subxt::constants::Address<runtime_types::sp_weights::RuntimeDbWeight>
                {
                    ::subxt::constants::Address::new_static(
                        "System",
                        "DbWeight",
                        [
                            42u8, 43u8, 178u8, 142u8, 243u8, 203u8, 60u8, 173u8, 118u8, 111u8,
                            200u8, 170u8, 102u8, 70u8, 237u8, 187u8, 198u8, 120u8, 153u8, 232u8,
                            183u8, 76u8, 74u8, 10u8, 70u8, 243u8, 14u8, 218u8, 213u8, 126u8, 29u8,
                            177u8,
                        ],
                    )
                }
                #[doc = " Get the chain's current version."]
                pub fn version(
                    &self,
                ) -> ::subxt::constants::Address<runtime_types::sp_version::RuntimeVersion>
                {
                    ::subxt::constants::Address::new_static(
                        "System",
                        "Version",
                        [
                            219u8, 45u8, 162u8, 245u8, 177u8, 246u8, 48u8, 126u8, 191u8, 157u8,
                            228u8, 83u8, 111u8, 133u8, 183u8, 13u8, 148u8, 108u8, 92u8, 102u8,
                            72u8, 205u8, 74u8, 242u8, 233u8, 79u8, 20u8, 170u8, 72u8, 202u8, 158u8,
                            165u8,
                        ],
                    )
                }
                #[doc = " The designated SS58 prefix of this chain."]
                #[doc = ""]
                #[doc = " This replaces the \"ss58Format\" property declared in the chain spec. Reason is"]
                #[doc = " that the runtime should know about the prefix in order to make use of it as"]
                #[doc = " an identifier of the chain."]
                pub fn ss58_prefix(&self) -> ::subxt::constants::Address<::core::primitive::u16> {
                    ::subxt::constants::Address::new_static(
                        "System",
                        "SS58Prefix",
                        [
                            116u8, 33u8, 2u8, 170u8, 181u8, 147u8, 171u8, 169u8, 167u8, 227u8,
                            41u8, 144u8, 11u8, 236u8, 82u8, 100u8, 74u8, 60u8, 184u8, 72u8, 169u8,
                            90u8, 208u8, 135u8, 15u8, 117u8, 10u8, 123u8, 128u8, 193u8, 29u8, 70u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod parachain_system {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "The `Error` enum of this pallet."]
        pub type Error = runtime_types::cumulus_pallet_parachain_system::pallet::Error;
        #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
        pub type Call = runtime_types::cumulus_pallet_parachain_system::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "See [`Pallet::set_validation_data`]."]
                pub struct SetValidationData {
                    pub data: set_validation_data::Data,
                }
                pub mod set_validation_data {
                    use super::runtime_types;
                    pub type Data =
                        runtime_types::cumulus_primitives_parachain_inherent::ParachainInherentData;
                }
                impl ::subxt::blocks::StaticExtrinsic for SetValidationData {
                    const PALLET: &'static str = "ParachainSystem";
                    const CALL: &'static str = "set_validation_data";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "See [`Pallet::sudo_send_upward_message`]."]
                pub struct SudoSendUpwardMessage {
                    pub message: sudo_send_upward_message::Message,
                }
                pub mod sudo_send_upward_message {
                    use super::runtime_types;
                    pub type Message = ::std::vec::Vec<::core::primitive::u8>;
                }
                impl ::subxt::blocks::StaticExtrinsic for SudoSendUpwardMessage {
                    const PALLET: &'static str = "ParachainSystem";
                    const CALL: &'static str = "sudo_send_upward_message";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "See [`Pallet::authorize_upgrade`]."]
                pub struct AuthorizeUpgrade {
                    pub code_hash: authorize_upgrade::CodeHash,
                    pub check_version: authorize_upgrade::CheckVersion,
                }
                pub mod authorize_upgrade {
                    use super::runtime_types;
                    pub type CodeHash = ::subxt::utils::H256;
                    pub type CheckVersion = ::core::primitive::bool;
                }
                impl ::subxt::blocks::StaticExtrinsic for AuthorizeUpgrade {
                    const PALLET: &'static str = "ParachainSystem";
                    const CALL: &'static str = "authorize_upgrade";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "See [`Pallet::enact_authorized_upgrade`]."]
                pub struct EnactAuthorizedUpgrade {
                    pub code: enact_authorized_upgrade::Code,
                }
                pub mod enact_authorized_upgrade {
                    use super::runtime_types;
                    pub type Code = ::std::vec::Vec<::core::primitive::u8>;
                }
                impl ::subxt::blocks::StaticExtrinsic for EnactAuthorizedUpgrade {
                    const PALLET: &'static str = "ParachainSystem";
                    const CALL: &'static str = "enact_authorized_upgrade";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "See [`Pallet::set_validation_data`]."]
                pub fn set_validation_data(
                    &self,
                    data: types::set_validation_data::Data,
                ) -> ::subxt::tx::Payload<types::SetValidationData> {
                    ::subxt::tx::Payload::new_static(
                        "ParachainSystem",
                        "set_validation_data",
                        types::SetValidationData { data },
                        [
                            167u8, 126u8, 75u8, 137u8, 220u8, 60u8, 106u8, 214u8, 92u8, 170u8,
                            136u8, 176u8, 98u8, 0u8, 234u8, 217u8, 146u8, 113u8, 149u8, 88u8,
                            114u8, 141u8, 228u8, 105u8, 136u8, 71u8, 233u8, 18u8, 70u8, 36u8, 24u8,
                            249u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::sudo_send_upward_message`]."]
                pub fn sudo_send_upward_message(
                    &self,
                    message: types::sudo_send_upward_message::Message,
                ) -> ::subxt::tx::Payload<types::SudoSendUpwardMessage> {
                    ::subxt::tx::Payload::new_static(
                        "ParachainSystem",
                        "sudo_send_upward_message",
                        types::SudoSendUpwardMessage { message },
                        [
                            1u8, 231u8, 11u8, 78u8, 127u8, 117u8, 248u8, 67u8, 230u8, 199u8, 126u8,
                            47u8, 20u8, 62u8, 252u8, 138u8, 199u8, 48u8, 41u8, 21u8, 28u8, 157u8,
                            218u8, 143u8, 4u8, 253u8, 62u8, 192u8, 94u8, 252u8, 92u8, 180u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::authorize_upgrade`]."]
                pub fn authorize_upgrade(
                    &self,
                    code_hash: types::authorize_upgrade::CodeHash,
                    check_version: types::authorize_upgrade::CheckVersion,
                ) -> ::subxt::tx::Payload<types::AuthorizeUpgrade> {
                    ::subxt::tx::Payload::new_static(
                        "ParachainSystem",
                        "authorize_upgrade",
                        types::AuthorizeUpgrade {
                            code_hash,
                            check_version,
                        },
                        [
                            213u8, 114u8, 107u8, 169u8, 223u8, 147u8, 205u8, 204u8, 3u8, 81u8,
                            228u8, 0u8, 82u8, 57u8, 43u8, 95u8, 12u8, 59u8, 241u8, 176u8, 143u8,
                            131u8, 253u8, 166u8, 98u8, 187u8, 94u8, 235u8, 177u8, 110u8, 162u8,
                            218u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::enact_authorized_upgrade`]."]
                pub fn enact_authorized_upgrade(
                    &self,
                    code: types::enact_authorized_upgrade::Code,
                ) -> ::subxt::tx::Payload<types::EnactAuthorizedUpgrade> {
                    ::subxt::tx::Payload::new_static(
                        "ParachainSystem",
                        "enact_authorized_upgrade",
                        types::EnactAuthorizedUpgrade { code },
                        [
                            232u8, 135u8, 114u8, 87u8, 196u8, 146u8, 244u8, 19u8, 106u8, 73u8,
                            88u8, 193u8, 48u8, 14u8, 72u8, 133u8, 247u8, 147u8, 50u8, 95u8, 252u8,
                            213u8, 192u8, 47u8, 244u8, 102u8, 195u8, 120u8, 179u8, 87u8, 94u8, 8u8,
                        ],
                    )
                }
            }
        }
        #[doc = "The `Event` enum of this pallet"]
        pub type Event = runtime_types::cumulus_pallet_parachain_system::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "The validation function has been scheduled to apply."]
            pub struct ValidationFunctionStored;
            impl ::subxt::events::StaticEvent for ValidationFunctionStored {
                const PALLET: &'static str = "ParachainSystem";
                const EVENT: &'static str = "ValidationFunctionStored";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "The validation function was applied as of the contained relay chain block number."]
            pub struct ValidationFunctionApplied {
                pub relay_chain_block_num: validation_function_applied::RelayChainBlockNum,
            }
            pub mod validation_function_applied {
                use super::runtime_types;
                pub type RelayChainBlockNum = ::core::primitive::u32;
            }
            impl ::subxt::events::StaticEvent for ValidationFunctionApplied {
                const PALLET: &'static str = "ParachainSystem";
                const EVENT: &'static str = "ValidationFunctionApplied";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "The relay-chain aborted the upgrade process."]
            pub struct ValidationFunctionDiscarded;
            impl ::subxt::events::StaticEvent for ValidationFunctionDiscarded {
                const PALLET: &'static str = "ParachainSystem";
                const EVENT: &'static str = "ValidationFunctionDiscarded";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Some downward messages have been received and will be processed."]
            pub struct DownwardMessagesReceived {
                pub count: downward_messages_received::Count,
            }
            pub mod downward_messages_received {
                use super::runtime_types;
                pub type Count = ::core::primitive::u32;
            }
            impl ::subxt::events::StaticEvent for DownwardMessagesReceived {
                const PALLET: &'static str = "ParachainSystem";
                const EVENT: &'static str = "DownwardMessagesReceived";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Downward messages were processed using the given weight."]
            pub struct DownwardMessagesProcessed {
                pub weight_used: downward_messages_processed::WeightUsed,
                pub dmq_head: downward_messages_processed::DmqHead,
            }
            pub mod downward_messages_processed {
                use super::runtime_types;
                pub type WeightUsed = runtime_types::sp_weights::weight_v2::Weight;
                pub type DmqHead = ::subxt::utils::H256;
            }
            impl ::subxt::events::StaticEvent for DownwardMessagesProcessed {
                const PALLET: &'static str = "ParachainSystem";
                const EVENT: &'static str = "DownwardMessagesProcessed";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "An upward message was sent to the relay chain."]
            pub struct UpwardMessageSent {
                pub message_hash: upward_message_sent::MessageHash,
            }
            pub mod upward_message_sent {
                use super::runtime_types;
                pub type MessageHash = ::core::option::Option<[::core::primitive::u8; 32usize]>;
            }
            impl ::subxt::events::StaticEvent for UpwardMessageSent {
                const PALLET: &'static str = "ParachainSystem";
                const EVENT: &'static str = "UpwardMessageSent";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub mod types {
                use super::runtime_types;
                pub mod unincluded_segment {
                    use super::runtime_types;
                    pub type UnincludedSegment = :: std :: vec :: Vec < runtime_types :: cumulus_pallet_parachain_system :: unincluded_segment :: Ancestor < :: subxt :: utils :: H256 > > ;
                }
                pub mod aggregated_unincluded_segment {
                    use super::runtime_types;
                    pub type AggregatedUnincludedSegment = runtime_types :: cumulus_pallet_parachain_system :: unincluded_segment :: SegmentTracker < :: subxt :: utils :: H256 > ;
                }
                pub mod pending_validation_code {
                    use super::runtime_types;
                    pub type PendingValidationCode = ::std::vec::Vec<::core::primitive::u8>;
                }
                pub mod new_validation_code {
                    use super::runtime_types;
                    pub type NewValidationCode = ::std::vec::Vec<::core::primitive::u8>;
                }
                pub mod validation_data {
                    use super::runtime_types;
                    pub type ValidationData =
                        runtime_types::polkadot_primitives::v6::PersistedValidationData<
                            ::subxt::utils::H256,
                            ::core::primitive::u32,
                        >;
                }
                pub mod did_set_validation_code {
                    use super::runtime_types;
                    pub type DidSetValidationCode = ::core::primitive::bool;
                }
                pub mod last_relay_chain_block_number {
                    use super::runtime_types;
                    pub type LastRelayChainBlockNumber = ::core::primitive::u32;
                }
                pub mod upgrade_restriction_signal {
                    use super::runtime_types;
                    pub type UpgradeRestrictionSignal = ::core::option::Option<
                        runtime_types::polkadot_primitives::v6::UpgradeRestriction,
                    >;
                }
                pub mod upgrade_go_ahead {
                    use super::runtime_types;
                    pub type UpgradeGoAhead = ::core::option::Option<
                        runtime_types::polkadot_primitives::v6::UpgradeGoAhead,
                    >;
                }
                pub mod relay_state_proof {
                    use super::runtime_types;
                    pub type RelayStateProof = runtime_types::sp_trie::storage_proof::StorageProof;
                }
                pub mod relevant_messaging_state {
                    use super::runtime_types;
                    pub type RelevantMessagingState = runtime_types :: cumulus_pallet_parachain_system :: relay_state_snapshot :: MessagingStateSnapshot ;
                }
                pub mod host_configuration {
                    use super::runtime_types;
                    pub type HostConfiguration =
                        runtime_types::polkadot_primitives::v6::AbridgedHostConfiguration;
                }
                pub mod last_dmq_mqc_head {
                    use super::runtime_types;
                    pub type LastDmqMqcHead =
                        runtime_types::cumulus_primitives_parachain_inherent::MessageQueueChain;
                }
                pub mod last_hrmp_mqc_heads {
                    use super::runtime_types;
                    pub type LastHrmpMqcHeads = ::subxt::utils::KeyedVec<
                        runtime_types::polkadot_parachain_primitives::primitives::Id,
                        runtime_types::cumulus_primitives_parachain_inherent::MessageQueueChain,
                    >;
                }
                pub mod processed_downward_messages {
                    use super::runtime_types;
                    pub type ProcessedDownwardMessages = ::core::primitive::u32;
                }
                pub mod hrmp_watermark {
                    use super::runtime_types;
                    pub type HrmpWatermark = ::core::primitive::u32;
                }
                pub mod hrmp_outbound_messages {
                    use super::runtime_types;
                    pub type HrmpOutboundMessages = ::std::vec::Vec<
                        runtime_types::polkadot_core_primitives::OutboundHrmpMessage<
                            runtime_types::polkadot_parachain_primitives::primitives::Id,
                        >,
                    >;
                }
                pub mod upward_messages {
                    use super::runtime_types;
                    pub type UpwardMessages =
                        ::std::vec::Vec<::std::vec::Vec<::core::primitive::u8>>;
                }
                pub mod pending_upward_messages {
                    use super::runtime_types;
                    pub type PendingUpwardMessages =
                        ::std::vec::Vec<::std::vec::Vec<::core::primitive::u8>>;
                }
                pub mod upward_delivery_fee_factor {
                    use super::runtime_types;
                    pub type UpwardDeliveryFeeFactor =
                        runtime_types::sp_arithmetic::fixed_point::FixedU128;
                }
                pub mod announced_hrmp_messages_per_candidate {
                    use super::runtime_types;
                    pub type AnnouncedHrmpMessagesPerCandidate = ::core::primitive::u32;
                }
                pub mod reserved_xcmp_weight_override {
                    use super::runtime_types;
                    pub type ReservedXcmpWeightOverride =
                        runtime_types::sp_weights::weight_v2::Weight;
                }
                pub mod reserved_dmp_weight_override {
                    use super::runtime_types;
                    pub type ReservedDmpWeightOverride =
                        runtime_types::sp_weights::weight_v2::Weight;
                }
                pub mod custom_validation_head_data {
                    use super::runtime_types;
                    pub type CustomValidationHeadData = ::std::vec::Vec<::core::primitive::u8>;
                }
            }
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " Latest included block descendants the runtime accepted. In other words, these are"]
                #[doc = " ancestors of the currently executing block which have not been included in the observed"]
                #[doc = " relay-chain state."]
                #[doc = ""]
                #[doc = " The segment length is limited by the capacity returned from the [`ConsensusHook`] configured"]
                #[doc = " in the pallet."]
                pub fn unincluded_segment(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::unincluded_segment::UnincludedSegment,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ParachainSystem",
                        "UnincludedSegment",
                        vec![],
                        [
                            73u8, 83u8, 226u8, 16u8, 203u8, 233u8, 221u8, 109u8, 23u8, 114u8, 56u8,
                            154u8, 100u8, 116u8, 253u8, 10u8, 164u8, 22u8, 110u8, 73u8, 245u8,
                            226u8, 54u8, 146u8, 67u8, 109u8, 149u8, 142u8, 154u8, 218u8, 55u8,
                            178u8,
                        ],
                    )
                }
                #[doc = " Storage field that keeps track of bandwidth used by the unincluded segment along with the"]
                #[doc = " latest HRMP watermark. Used for limiting the acceptance of new blocks with"]
                #[doc = " respect to relay chain constraints."]
                pub fn aggregated_unincluded_segment(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::aggregated_unincluded_segment::AggregatedUnincludedSegment,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ParachainSystem",
                        "AggregatedUnincludedSegment",
                        vec![],
                        [
                            165u8, 51u8, 182u8, 156u8, 65u8, 114u8, 167u8, 133u8, 245u8, 52u8,
                            32u8, 119u8, 159u8, 65u8, 201u8, 108u8, 99u8, 43u8, 84u8, 63u8, 95u8,
                            182u8, 134u8, 163u8, 51u8, 202u8, 243u8, 82u8, 225u8, 192u8, 186u8,
                            2u8,
                        ],
                    )
                }
                #[doc = " In case of a scheduled upgrade, this storage field contains the validation code to be"]
                #[doc = " applied."]
                #[doc = ""]
                #[doc = " As soon as the relay chain gives us the go-ahead signal, we will overwrite the"]
                #[doc = " [`:code`][sp_core::storage::well_known_keys::CODE] which will result the next block process"]
                #[doc = " with the new validation code. This concludes the upgrade process."]
                pub fn pending_validation_code(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::pending_validation_code::PendingValidationCode,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ParachainSystem",
                        "PendingValidationCode",
                        vec![],
                        [
                            78u8, 159u8, 219u8, 211u8, 177u8, 80u8, 102u8, 93u8, 83u8, 146u8, 90u8,
                            233u8, 232u8, 11u8, 104u8, 172u8, 93u8, 68u8, 44u8, 228u8, 99u8, 197u8,
                            254u8, 28u8, 181u8, 215u8, 247u8, 238u8, 49u8, 49u8, 195u8, 249u8,
                        ],
                    )
                }
                #[doc = " Validation code that is set by the parachain and is to be communicated to collator and"]
                #[doc = " consequently the relay-chain."]
                #[doc = ""]
                #[doc = " This will be cleared in `on_initialize` of each new block if no other pallet already set"]
                #[doc = " the value."]
                pub fn new_validation_code(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::new_validation_code::NewValidationCode,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ParachainSystem",
                        "NewValidationCode",
                        vec![],
                        [
                            185u8, 123u8, 152u8, 122u8, 230u8, 136u8, 79u8, 73u8, 206u8, 19u8,
                            59u8, 57u8, 75u8, 250u8, 83u8, 185u8, 29u8, 76u8, 89u8, 137u8, 77u8,
                            163u8, 25u8, 125u8, 182u8, 67u8, 2u8, 180u8, 48u8, 237u8, 49u8, 171u8,
                        ],
                    )
                }
                #[doc = " The [`PersistedValidationData`] set for this block."]
                #[doc = " This value is expected to be set only once per block and it's never stored"]
                #[doc = " in the trie."]
                pub fn validation_data(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::validation_data::ValidationData,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ParachainSystem",
                        "ValidationData",
                        vec![],
                        [
                            193u8, 240u8, 25u8, 56u8, 103u8, 173u8, 56u8, 56u8, 229u8, 243u8, 91u8,
                            25u8, 249u8, 95u8, 122u8, 93u8, 37u8, 181u8, 54u8, 244u8, 217u8, 200u8,
                            62u8, 136u8, 80u8, 148u8, 16u8, 177u8, 124u8, 211u8, 95u8, 24u8,
                        ],
                    )
                }
                #[doc = " Were the validation data set to notify the relay chain?"]
                pub fn did_set_validation_code(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::did_set_validation_code::DidSetValidationCode,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ParachainSystem",
                        "DidSetValidationCode",
                        vec![],
                        [
                            233u8, 228u8, 48u8, 111u8, 200u8, 35u8, 30u8, 139u8, 251u8, 77u8,
                            196u8, 252u8, 35u8, 222u8, 129u8, 235u8, 7u8, 19u8, 156u8, 82u8, 126u8,
                            173u8, 29u8, 62u8, 20u8, 67u8, 166u8, 116u8, 108u8, 182u8, 57u8, 246u8,
                        ],
                    )
                }
                #[doc = " The relay chain block number associated with the last parachain block."]
                #[doc = ""]
                #[doc = " This is updated in `on_finalize`."]
                pub fn last_relay_chain_block_number(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::last_relay_chain_block_number::LastRelayChainBlockNumber,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ParachainSystem",
                        "LastRelayChainBlockNumber",
                        vec![],
                        [
                            17u8, 65u8, 131u8, 169u8, 195u8, 243u8, 195u8, 93u8, 220u8, 174u8,
                            75u8, 216u8, 214u8, 227u8, 96u8, 40u8, 8u8, 153u8, 116u8, 160u8, 79u8,
                            255u8, 35u8, 232u8, 242u8, 42u8, 100u8, 150u8, 208u8, 210u8, 142u8,
                            186u8,
                        ],
                    )
                }
                #[doc = " An option which indicates if the relay-chain restricts signalling a validation code upgrade."]
                #[doc = " In other words, if this is `Some` and [`NewValidationCode`] is `Some` then the produced"]
                #[doc = " candidate will be invalid."]
                #[doc = ""]
                #[doc = " This storage item is a mirror of the corresponding value for the current parachain from the"]
                #[doc = " relay-chain. This value is ephemeral which means it doesn't hit the storage. This value is"]
                #[doc = " set after the inherent."]
                pub fn upgrade_restriction_signal(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::upgrade_restriction_signal::UpgradeRestrictionSignal,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ParachainSystem",
                        "UpgradeRestrictionSignal",
                        vec![],
                        [
                            235u8, 240u8, 37u8, 44u8, 181u8, 52u8, 7u8, 216u8, 20u8, 139u8, 69u8,
                            124u8, 21u8, 173u8, 237u8, 64u8, 105u8, 88u8, 49u8, 69u8, 123u8, 55u8,
                            181u8, 167u8, 112u8, 183u8, 190u8, 231u8, 231u8, 127u8, 77u8, 148u8,
                        ],
                    )
                }
                #[doc = " Optional upgrade go-ahead signal from the relay-chain."]
                #[doc = ""]
                #[doc = " This storage item is a mirror of the corresponding value for the current parachain from the"]
                #[doc = " relay-chain. This value is ephemeral which means it doesn't hit the storage. This value is"]
                #[doc = " set after the inherent."]
                pub fn upgrade_go_ahead(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::upgrade_go_ahead::UpgradeGoAhead,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ParachainSystem",
                        "UpgradeGoAhead",
                        vec![],
                        [
                            149u8, 144u8, 186u8, 88u8, 180u8, 34u8, 82u8, 226u8, 100u8, 148u8,
                            246u8, 55u8, 233u8, 97u8, 43u8, 0u8, 48u8, 31u8, 69u8, 154u8, 29u8,
                            147u8, 241u8, 91u8, 81u8, 126u8, 206u8, 117u8, 14u8, 149u8, 87u8, 88u8,
                        ],
                    )
                }
                #[doc = " The state proof for the last relay parent block."]
                #[doc = ""]
                #[doc = " This field is meant to be updated each block with the validation data inherent. Therefore,"]
                #[doc = " before processing of the inherent, e.g. in `on_initialize` this data may be stale."]
                #[doc = ""]
                #[doc = " This data is also absent from the genesis."]
                pub fn relay_state_proof(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::relay_state_proof::RelayStateProof,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ParachainSystem",
                        "RelayStateProof",
                        vec![],
                        [
                            46u8, 115u8, 163u8, 190u8, 246u8, 47u8, 200u8, 159u8, 206u8, 204u8,
                            94u8, 250u8, 127u8, 112u8, 109u8, 111u8, 210u8, 195u8, 244u8, 41u8,
                            36u8, 187u8, 71u8, 150u8, 149u8, 253u8, 143u8, 33u8, 83u8, 189u8,
                            182u8, 238u8,
                        ],
                    )
                }
                #[doc = " The snapshot of some state related to messaging relevant to the current parachain as per"]
                #[doc = " the relay parent."]
                #[doc = ""]
                #[doc = " This field is meant to be updated each block with the validation data inherent. Therefore,"]
                #[doc = " before processing of the inherent, e.g. in `on_initialize` this data may be stale."]
                #[doc = ""]
                #[doc = " This data is also absent from the genesis."]
                pub fn relevant_messaging_state(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::relevant_messaging_state::RelevantMessagingState,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ParachainSystem",
                        "RelevantMessagingState",
                        vec![],
                        [
                            117u8, 166u8, 186u8, 126u8, 21u8, 174u8, 86u8, 253u8, 163u8, 90u8,
                            54u8, 226u8, 186u8, 253u8, 126u8, 168u8, 145u8, 45u8, 155u8, 32u8,
                            97u8, 110u8, 208u8, 125u8, 47u8, 113u8, 165u8, 199u8, 210u8, 118u8,
                            217u8, 73u8,
                        ],
                    )
                }
                #[doc = " The parachain host configuration that was obtained from the relay parent."]
                #[doc = ""]
                #[doc = " This field is meant to be updated each block with the validation data inherent. Therefore,"]
                #[doc = " before processing of the inherent, e.g. in `on_initialize` this data may be stale."]
                #[doc = ""]
                #[doc = " This data is also absent from the genesis."]
                pub fn host_configuration(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::host_configuration::HostConfiguration,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ParachainSystem",
                        "HostConfiguration",
                        vec![],
                        [
                            252u8, 23u8, 111u8, 189u8, 120u8, 204u8, 129u8, 223u8, 248u8, 179u8,
                            239u8, 173u8, 133u8, 61u8, 140u8, 2u8, 75u8, 32u8, 204u8, 178u8, 69u8,
                            21u8, 44u8, 227u8, 178u8, 179u8, 33u8, 26u8, 131u8, 156u8, 78u8, 85u8,
                        ],
                    )
                }
                #[doc = " The last downward message queue chain head we have observed."]
                #[doc = ""]
                #[doc = " This value is loaded before and saved after processing inbound downward messages carried"]
                #[doc = " by the system inherent."]
                pub fn last_dmq_mqc_head(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::last_dmq_mqc_head::LastDmqMqcHead,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ParachainSystem",
                        "LastDmqMqcHead",
                        vec![],
                        [
                            1u8, 70u8, 140u8, 40u8, 51u8, 127u8, 75u8, 80u8, 5u8, 49u8, 196u8,
                            31u8, 30u8, 61u8, 54u8, 252u8, 0u8, 0u8, 100u8, 115u8, 177u8, 250u8,
                            138u8, 48u8, 107u8, 41u8, 93u8, 87u8, 195u8, 107u8, 206u8, 227u8,
                        ],
                    )
                }
                #[doc = " The message queue chain heads we have observed per each channel incoming channel."]
                #[doc = ""]
                #[doc = " This value is loaded before and saved after processing inbound downward messages carried"]
                #[doc = " by the system inherent."]
                pub fn last_hrmp_mqc_heads(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::last_hrmp_mqc_heads::LastHrmpMqcHeads,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ParachainSystem",
                        "LastHrmpMqcHeads",
                        vec![],
                        [
                            131u8, 170u8, 142u8, 30u8, 101u8, 113u8, 131u8, 81u8, 38u8, 168u8,
                            98u8, 3u8, 9u8, 109u8, 96u8, 179u8, 115u8, 177u8, 128u8, 11u8, 238u8,
                            54u8, 81u8, 60u8, 97u8, 112u8, 224u8, 175u8, 86u8, 133u8, 182u8, 76u8,
                        ],
                    )
                }
                #[doc = " Number of downward messages processed in a block."]
                #[doc = ""]
                #[doc = " This will be cleared in `on_initialize` of each new block."]
                pub fn processed_downward_messages(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::processed_downward_messages::ProcessedDownwardMessages,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ParachainSystem",
                        "ProcessedDownwardMessages",
                        vec![],
                        [
                            151u8, 234u8, 196u8, 87u8, 130u8, 79u8, 4u8, 102u8, 47u8, 10u8, 33u8,
                            132u8, 149u8, 118u8, 61u8, 141u8, 5u8, 1u8, 30u8, 120u8, 220u8, 156u8,
                            16u8, 11u8, 14u8, 52u8, 126u8, 151u8, 244u8, 149u8, 197u8, 51u8,
                        ],
                    )
                }
                #[doc = " HRMP watermark that was set in a block."]
                #[doc = ""]
                #[doc = " This will be cleared in `on_initialize` of each new block."]
                pub fn hrmp_watermark(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::hrmp_watermark::HrmpWatermark,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ParachainSystem",
                        "HrmpWatermark",
                        vec![],
                        [
                            77u8, 62u8, 59u8, 220u8, 7u8, 125u8, 98u8, 249u8, 108u8, 212u8, 223u8,
                            99u8, 152u8, 13u8, 29u8, 80u8, 166u8, 65u8, 232u8, 113u8, 145u8, 128u8,
                            123u8, 35u8, 238u8, 31u8, 113u8, 156u8, 220u8, 104u8, 217u8, 165u8,
                        ],
                    )
                }
                #[doc = " HRMP messages that were sent in a block."]
                #[doc = ""]
                #[doc = " This will be cleared in `on_initialize` of each new block."]
                pub fn hrmp_outbound_messages(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::hrmp_outbound_messages::HrmpOutboundMessages,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ParachainSystem",
                        "HrmpOutboundMessages",
                        vec![],
                        [
                            42u8, 9u8, 96u8, 217u8, 25u8, 101u8, 129u8, 147u8, 150u8, 20u8, 164u8,
                            186u8, 217u8, 178u8, 15u8, 201u8, 233u8, 104u8, 92u8, 120u8, 29u8,
                            245u8, 196u8, 13u8, 141u8, 210u8, 102u8, 62u8, 216u8, 80u8, 246u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " Upward messages that were sent in a block."]
                #[doc = ""]
                #[doc = " This will be cleared in `on_initialize` of each new block."]
                pub fn upward_messages(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::upward_messages::UpwardMessages,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ParachainSystem",
                        "UpwardMessages",
                        vec![],
                        [
                            179u8, 127u8, 8u8, 94u8, 194u8, 246u8, 53u8, 79u8, 80u8, 22u8, 18u8,
                            75u8, 116u8, 163u8, 90u8, 161u8, 30u8, 140u8, 57u8, 126u8, 60u8, 91u8,
                            23u8, 30u8, 120u8, 245u8, 125u8, 96u8, 152u8, 25u8, 248u8, 85u8,
                        ],
                    )
                }
                #[doc = " Upward messages that are still pending and not yet send to the relay chain."]
                pub fn pending_upward_messages(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::pending_upward_messages::PendingUpwardMessages,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ParachainSystem",
                        "PendingUpwardMessages",
                        vec![],
                        [
                            239u8, 45u8, 18u8, 173u8, 148u8, 150u8, 55u8, 176u8, 173u8, 156u8,
                            246u8, 226u8, 198u8, 214u8, 104u8, 187u8, 186u8, 13u8, 83u8, 194u8,
                            153u8, 29u8, 228u8, 109u8, 26u8, 18u8, 212u8, 151u8, 246u8, 24u8,
                            133u8, 216u8,
                        ],
                    )
                }
                #[doc = " The factor to multiply the base delivery fee by for UMP."]
                pub fn upward_delivery_fee_factor(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::upward_delivery_fee_factor::UpwardDeliveryFeeFactor,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ParachainSystem",
                        "UpwardDeliveryFeeFactor",
                        vec![],
                        [
                            40u8, 217u8, 164u8, 111u8, 151u8, 132u8, 69u8, 226u8, 163u8, 175u8,
                            43u8, 239u8, 179u8, 217u8, 136u8, 161u8, 13u8, 251u8, 163u8, 102u8,
                            24u8, 27u8, 168u8, 89u8, 221u8, 83u8, 93u8, 64u8, 96u8, 117u8, 146u8,
                            71u8,
                        ],
                    )
                }
                #[doc = " The number of HRMP messages we observed in `on_initialize` and thus used that number for"]
                #[doc = " announcing the weight of `on_initialize` and `on_finalize`."]
                pub fn announced_hrmp_messages_per_candidate(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::announced_hrmp_messages_per_candidate::AnnouncedHrmpMessagesPerCandidate,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ParachainSystem",
                        "AnnouncedHrmpMessagesPerCandidate",
                        vec![],
                        [
                            93u8, 11u8, 229u8, 172u8, 73u8, 87u8, 13u8, 149u8, 15u8, 94u8, 163u8,
                            107u8, 156u8, 22u8, 131u8, 177u8, 96u8, 247u8, 213u8, 224u8, 41u8,
                            126u8, 157u8, 33u8, 154u8, 194u8, 95u8, 234u8, 65u8, 19u8, 58u8, 161u8,
                        ],
                    )
                }
                #[doc = " The weight we reserve at the beginning of the block for processing XCMP messages. This"]
                #[doc = " overrides the amount set in the Config trait."]
                pub fn reserved_xcmp_weight_override(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::reserved_xcmp_weight_override::ReservedXcmpWeightOverride,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ParachainSystem",
                        "ReservedXcmpWeightOverride",
                        vec![],
                        [
                            176u8, 93u8, 203u8, 74u8, 18u8, 170u8, 246u8, 203u8, 109u8, 89u8, 86u8,
                            77u8, 96u8, 66u8, 189u8, 79u8, 184u8, 253u8, 11u8, 230u8, 87u8, 120u8,
                            1u8, 254u8, 215u8, 41u8, 210u8, 86u8, 239u8, 206u8, 60u8, 2u8,
                        ],
                    )
                }
                #[doc = " The weight we reserve at the beginning of the block for processing DMP messages. This"]
                #[doc = " overrides the amount set in the Config trait."]
                pub fn reserved_dmp_weight_override(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::reserved_dmp_weight_override::ReservedDmpWeightOverride,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ParachainSystem",
                        "ReservedDmpWeightOverride",
                        vec![],
                        [
                            205u8, 124u8, 9u8, 156u8, 255u8, 207u8, 208u8, 23u8, 179u8, 132u8,
                            254u8, 157u8, 237u8, 240u8, 167u8, 203u8, 253u8, 111u8, 136u8, 32u8,
                            100u8, 152u8, 16u8, 19u8, 175u8, 14u8, 108u8, 61u8, 59u8, 231u8, 70u8,
                            112u8,
                        ],
                    )
                }
                #[doc = " A custom head data that should be returned as result of `validate_block`."]
                #[doc = ""]
                #[doc = " See `Pallet::set_custom_validation_head_data` for more information."]
                pub fn custom_validation_head_data(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::custom_validation_head_data::CustomValidationHeadData,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ParachainSystem",
                        "CustomValidationHeadData",
                        vec![],
                        [
                            52u8, 186u8, 187u8, 57u8, 245u8, 171u8, 202u8, 23u8, 92u8, 80u8, 118u8,
                            66u8, 251u8, 156u8, 175u8, 254u8, 141u8, 185u8, 115u8, 209u8, 170u8,
                            165u8, 1u8, 242u8, 120u8, 234u8, 162u8, 24u8, 135u8, 105u8, 8u8, 177u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod timestamp {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
        pub type Call = runtime_types::pallet_timestamp::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "See [`Pallet::set`]."]
                pub struct Set {
                    #[codec(compact)]
                    pub now: set::Now,
                }
                pub mod set {
                    use super::runtime_types;
                    pub type Now = ::core::primitive::u64;
                }
                impl ::subxt::blocks::StaticExtrinsic for Set {
                    const PALLET: &'static str = "Timestamp";
                    const CALL: &'static str = "set";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "See [`Pallet::set`]."]
                pub fn set(&self, now: types::set::Now) -> ::subxt::tx::Payload<types::Set> {
                    ::subxt::tx::Payload::new_static(
                        "Timestamp",
                        "set",
                        types::Set { now },
                        [
                            37u8, 95u8, 49u8, 218u8, 24u8, 22u8, 0u8, 95u8, 72u8, 35u8, 155u8,
                            199u8, 213u8, 54u8, 207u8, 22u8, 185u8, 193u8, 221u8, 70u8, 18u8,
                            200u8, 4u8, 231u8, 195u8, 173u8, 6u8, 122u8, 11u8, 203u8, 231u8, 227u8,
                        ],
                    )
                }
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub mod types {
                use super::runtime_types;
                pub mod now {
                    use super::runtime_types;
                    pub type Now = ::core::primitive::u64;
                }
                pub mod did_update {
                    use super::runtime_types;
                    pub type DidUpdate = ::core::primitive::bool;
                }
            }
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " The current time for the current block."]
                pub fn now(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::now::Now,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Timestamp",
                        "Now",
                        vec![],
                        [
                            44u8, 50u8, 80u8, 30u8, 195u8, 146u8, 123u8, 238u8, 8u8, 163u8, 187u8,
                            92u8, 61u8, 39u8, 51u8, 29u8, 173u8, 169u8, 217u8, 158u8, 85u8, 187u8,
                            141u8, 26u8, 12u8, 115u8, 51u8, 11u8, 200u8, 244u8, 138u8, 152u8,
                        ],
                    )
                }
                #[doc = " Whether the timestamp has been updated in this block."]
                #[doc = ""]
                #[doc = " This value is updated to `true` upon successful submission of a timestamp by a node."]
                #[doc = " It is then checked at the end of each block execution in the `on_finalize` hook."]
                pub fn did_update(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::did_update::DidUpdate,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Timestamp",
                        "DidUpdate",
                        vec![],
                        [
                            229u8, 175u8, 246u8, 102u8, 237u8, 158u8, 212u8, 229u8, 238u8, 214u8,
                            205u8, 160u8, 164u8, 252u8, 195u8, 75u8, 139u8, 110u8, 22u8, 34u8,
                            248u8, 204u8, 107u8, 46u8, 20u8, 200u8, 238u8, 167u8, 71u8, 41u8,
                            214u8, 140u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                #[doc = " The minimum period between blocks."]
                #[doc = ""]
                #[doc = " Be aware that this is different to the *expected* period that the block production"]
                #[doc = " apparatus provides. Your chosen consensus system will generally work with this to"]
                #[doc = " determine a sensible block time. For example, in the Aura pallet it will be double this"]
                #[doc = " period on default settings."]
                pub fn minimum_period(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u64> {
                    ::subxt::constants::Address::new_static(
                        "Timestamp",
                        "MinimumPeriod",
                        [
                            128u8, 214u8, 205u8, 242u8, 181u8, 142u8, 124u8, 231u8, 190u8, 146u8,
                            59u8, 226u8, 157u8, 101u8, 103u8, 117u8, 249u8, 65u8, 18u8, 191u8,
                            103u8, 119u8, 53u8, 85u8, 81u8, 96u8, 220u8, 42u8, 184u8, 239u8, 42u8,
                            246u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod parachain_info {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
        pub type Call = runtime_types::staging_parachain_info::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
            }
            pub struct TransactionApi;
            impl TransactionApi {}
        }
        pub mod storage {
            use super::runtime_types;
            pub mod types {
                use super::runtime_types;
                pub mod parachain_id {
                    use super::runtime_types;
                    pub type ParachainId =
                        runtime_types::polkadot_parachain_primitives::primitives::Id;
                }
            }
            pub struct StorageApi;
            impl StorageApi {
                pub fn parachain_id(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::parachain_id::ParachainId,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ParachainInfo",
                        "ParachainId",
                        vec![],
                        [
                            160u8, 130u8, 74u8, 181u8, 231u8, 180u8, 246u8, 152u8, 204u8, 44u8,
                            245u8, 91u8, 113u8, 246u8, 218u8, 50u8, 254u8, 248u8, 35u8, 219u8,
                            83u8, 144u8, 228u8, 245u8, 122u8, 53u8, 194u8, 172u8, 222u8, 118u8,
                            202u8, 91u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod balances {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "The `Error` enum of this pallet."]
        pub type Error = runtime_types::pallet_balances::pallet::Error;
        #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
        pub type Call = runtime_types::pallet_balances::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "See [`Pallet::transfer_allow_death`]."]
                pub struct TransferAllowDeath {
                    pub dest: transfer_allow_death::Dest,
                    #[codec(compact)]
                    pub value: transfer_allow_death::Value,
                }
                pub mod transfer_allow_death {
                    use super::runtime_types;
                    pub type Dest = ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>;
                    pub type Value = ::core::primitive::u128;
                }
                impl ::subxt::blocks::StaticExtrinsic for TransferAllowDeath {
                    const PALLET: &'static str = "Balances";
                    const CALL: &'static str = "transfer_allow_death";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "See [`Pallet::force_transfer`]."]
                pub struct ForceTransfer {
                    pub source: force_transfer::Source,
                    pub dest: force_transfer::Dest,
                    #[codec(compact)]
                    pub value: force_transfer::Value,
                }
                pub mod force_transfer {
                    use super::runtime_types;
                    pub type Source = ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>;
                    pub type Dest = ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>;
                    pub type Value = ::core::primitive::u128;
                }
                impl ::subxt::blocks::StaticExtrinsic for ForceTransfer {
                    const PALLET: &'static str = "Balances";
                    const CALL: &'static str = "force_transfer";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "See [`Pallet::transfer_keep_alive`]."]
                pub struct TransferKeepAlive {
                    pub dest: transfer_keep_alive::Dest,
                    #[codec(compact)]
                    pub value: transfer_keep_alive::Value,
                }
                pub mod transfer_keep_alive {
                    use super::runtime_types;
                    pub type Dest = ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>;
                    pub type Value = ::core::primitive::u128;
                }
                impl ::subxt::blocks::StaticExtrinsic for TransferKeepAlive {
                    const PALLET: &'static str = "Balances";
                    const CALL: &'static str = "transfer_keep_alive";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "See [`Pallet::transfer_all`]."]
                pub struct TransferAll {
                    pub dest: transfer_all::Dest,
                    pub keep_alive: transfer_all::KeepAlive,
                }
                pub mod transfer_all {
                    use super::runtime_types;
                    pub type Dest = ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>;
                    pub type KeepAlive = ::core::primitive::bool;
                }
                impl ::subxt::blocks::StaticExtrinsic for TransferAll {
                    const PALLET: &'static str = "Balances";
                    const CALL: &'static str = "transfer_all";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "See [`Pallet::force_unreserve`]."]
                pub struct ForceUnreserve {
                    pub who: force_unreserve::Who,
                    pub amount: force_unreserve::Amount,
                }
                pub mod force_unreserve {
                    use super::runtime_types;
                    pub type Who = ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>;
                    pub type Amount = ::core::primitive::u128;
                }
                impl ::subxt::blocks::StaticExtrinsic for ForceUnreserve {
                    const PALLET: &'static str = "Balances";
                    const CALL: &'static str = "force_unreserve";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "See [`Pallet::upgrade_accounts`]."]
                pub struct UpgradeAccounts {
                    pub who: upgrade_accounts::Who,
                }
                pub mod upgrade_accounts {
                    use super::runtime_types;
                    pub type Who = ::std::vec::Vec<::subxt::utils::AccountId32>;
                }
                impl ::subxt::blocks::StaticExtrinsic for UpgradeAccounts {
                    const PALLET: &'static str = "Balances";
                    const CALL: &'static str = "upgrade_accounts";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "See [`Pallet::force_set_balance`]."]
                pub struct ForceSetBalance {
                    pub who: force_set_balance::Who,
                    #[codec(compact)]
                    pub new_free: force_set_balance::NewFree,
                }
                pub mod force_set_balance {
                    use super::runtime_types;
                    pub type Who = ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>;
                    pub type NewFree = ::core::primitive::u128;
                }
                impl ::subxt::blocks::StaticExtrinsic for ForceSetBalance {
                    const PALLET: &'static str = "Balances";
                    const CALL: &'static str = "force_set_balance";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "See [`Pallet::force_adjust_total_issuance`]."]
                pub struct ForceAdjustTotalIssuance {
                    pub direction: force_adjust_total_issuance::Direction,
                    #[codec(compact)]
                    pub delta: force_adjust_total_issuance::Delta,
                }
                pub mod force_adjust_total_issuance {
                    use super::runtime_types;
                    pub type Direction = runtime_types::pallet_balances::types::AdjustmentDirection;
                    pub type Delta = ::core::primitive::u128;
                }
                impl ::subxt::blocks::StaticExtrinsic for ForceAdjustTotalIssuance {
                    const PALLET: &'static str = "Balances";
                    const CALL: &'static str = "force_adjust_total_issuance";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "See [`Pallet::transfer_allow_death`]."]
                pub fn transfer_allow_death(
                    &self,
                    dest: types::transfer_allow_death::Dest,
                    value: types::transfer_allow_death::Value,
                ) -> ::subxt::tx::Payload<types::TransferAllowDeath> {
                    ::subxt::tx::Payload::new_static(
                        "Balances",
                        "transfer_allow_death",
                        types::TransferAllowDeath { dest, value },
                        [
                            51u8, 166u8, 195u8, 10u8, 139u8, 218u8, 55u8, 130u8, 6u8, 194u8, 35u8,
                            140u8, 27u8, 205u8, 214u8, 222u8, 102u8, 43u8, 143u8, 145u8, 86u8,
                            219u8, 210u8, 147u8, 13u8, 39u8, 51u8, 21u8, 237u8, 179u8, 132u8,
                            130u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::force_transfer`]."]
                pub fn force_transfer(
                    &self,
                    source: types::force_transfer::Source,
                    dest: types::force_transfer::Dest,
                    value: types::force_transfer::Value,
                ) -> ::subxt::tx::Payload<types::ForceTransfer> {
                    ::subxt::tx::Payload::new_static(
                        "Balances",
                        "force_transfer",
                        types::ForceTransfer {
                            source,
                            dest,
                            value,
                        },
                        [
                            154u8, 93u8, 222u8, 27u8, 12u8, 248u8, 63u8, 213u8, 224u8, 86u8, 250u8,
                            153u8, 249u8, 102u8, 83u8, 160u8, 79u8, 125u8, 105u8, 222u8, 77u8,
                            180u8, 90u8, 105u8, 81u8, 217u8, 60u8, 25u8, 213u8, 51u8, 185u8, 96u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::transfer_keep_alive`]."]
                pub fn transfer_keep_alive(
                    &self,
                    dest: types::transfer_keep_alive::Dest,
                    value: types::transfer_keep_alive::Value,
                ) -> ::subxt::tx::Payload<types::TransferKeepAlive> {
                    ::subxt::tx::Payload::new_static(
                        "Balances",
                        "transfer_keep_alive",
                        types::TransferKeepAlive { dest, value },
                        [
                            245u8, 14u8, 190u8, 193u8, 32u8, 210u8, 74u8, 92u8, 25u8, 182u8, 76u8,
                            55u8, 247u8, 83u8, 114u8, 75u8, 143u8, 236u8, 117u8, 25u8, 54u8, 157u8,
                            208u8, 207u8, 233u8, 89u8, 70u8, 161u8, 235u8, 242u8, 222u8, 59u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::transfer_all`]."]
                pub fn transfer_all(
                    &self,
                    dest: types::transfer_all::Dest,
                    keep_alive: types::transfer_all::KeepAlive,
                ) -> ::subxt::tx::Payload<types::TransferAll> {
                    ::subxt::tx::Payload::new_static(
                        "Balances",
                        "transfer_all",
                        types::TransferAll { dest, keep_alive },
                        [
                            105u8, 132u8, 49u8, 144u8, 195u8, 250u8, 34u8, 46u8, 213u8, 248u8,
                            112u8, 188u8, 81u8, 228u8, 136u8, 18u8, 67u8, 172u8, 37u8, 38u8, 238u8,
                            9u8, 34u8, 15u8, 67u8, 34u8, 148u8, 195u8, 223u8, 29u8, 154u8, 6u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::force_unreserve`]."]
                pub fn force_unreserve(
                    &self,
                    who: types::force_unreserve::Who,
                    amount: types::force_unreserve::Amount,
                ) -> ::subxt::tx::Payload<types::ForceUnreserve> {
                    ::subxt::tx::Payload::new_static(
                        "Balances",
                        "force_unreserve",
                        types::ForceUnreserve { who, amount },
                        [
                            142u8, 151u8, 64u8, 205u8, 46u8, 64u8, 62u8, 122u8, 108u8, 49u8, 223u8,
                            140u8, 120u8, 153u8, 35u8, 165u8, 187u8, 38u8, 157u8, 200u8, 123u8,
                            199u8, 198u8, 168u8, 208u8, 159u8, 39u8, 134u8, 92u8, 103u8, 84u8,
                            171u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::upgrade_accounts`]."]
                pub fn upgrade_accounts(
                    &self,
                    who: types::upgrade_accounts::Who,
                ) -> ::subxt::tx::Payload<types::UpgradeAccounts> {
                    ::subxt::tx::Payload::new_static(
                        "Balances",
                        "upgrade_accounts",
                        types::UpgradeAccounts { who },
                        [
                            66u8, 200u8, 179u8, 104u8, 65u8, 2u8, 101u8, 56u8, 130u8, 161u8, 224u8,
                            233u8, 255u8, 124u8, 70u8, 122u8, 8u8, 49u8, 103u8, 178u8, 68u8, 47u8,
                            214u8, 166u8, 217u8, 116u8, 178u8, 50u8, 212u8, 164u8, 98u8, 226u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::force_set_balance`]."]
                pub fn force_set_balance(
                    &self,
                    who: types::force_set_balance::Who,
                    new_free: types::force_set_balance::NewFree,
                ) -> ::subxt::tx::Payload<types::ForceSetBalance> {
                    ::subxt::tx::Payload::new_static(
                        "Balances",
                        "force_set_balance",
                        types::ForceSetBalance { who, new_free },
                        [
                            114u8, 229u8, 59u8, 204u8, 180u8, 83u8, 17u8, 4u8, 59u8, 4u8, 55u8,
                            39u8, 151u8, 196u8, 124u8, 60u8, 209u8, 65u8, 193u8, 11u8, 44u8, 164u8,
                            116u8, 93u8, 169u8, 30u8, 199u8, 165u8, 55u8, 231u8, 223u8, 43u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::force_adjust_total_issuance`]."]
                pub fn force_adjust_total_issuance(
                    &self,
                    direction: types::force_adjust_total_issuance::Direction,
                    delta: types::force_adjust_total_issuance::Delta,
                ) -> ::subxt::tx::Payload<types::ForceAdjustTotalIssuance> {
                    ::subxt::tx::Payload::new_static(
                        "Balances",
                        "force_adjust_total_issuance",
                        types::ForceAdjustTotalIssuance { direction, delta },
                        [
                            208u8, 134u8, 56u8, 133u8, 232u8, 164u8, 10u8, 213u8, 53u8, 193u8,
                            190u8, 63u8, 236u8, 186u8, 96u8, 122u8, 104u8, 87u8, 173u8, 38u8, 58u8,
                            176u8, 21u8, 78u8, 42u8, 106u8, 46u8, 248u8, 251u8, 190u8, 150u8,
                            202u8,
                        ],
                    )
                }
            }
        }
        #[doc = "The `Event` enum of this pallet"]
        pub type Event = runtime_types::pallet_balances::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "An account was created with some free balance."]
            pub struct Endowed {
                pub account: endowed::Account,
                pub free_balance: endowed::FreeBalance,
            }
            pub mod endowed {
                use super::runtime_types;
                pub type Account = ::subxt::utils::AccountId32;
                pub type FreeBalance = ::core::primitive::u128;
            }
            impl ::subxt::events::StaticEvent for Endowed {
                const PALLET: &'static str = "Balances";
                const EVENT: &'static str = "Endowed";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "An account was removed whose balance was non-zero but below ExistentialDeposit,"]
            #[doc = "resulting in an outright loss."]
            pub struct DustLost {
                pub account: dust_lost::Account,
                pub amount: dust_lost::Amount,
            }
            pub mod dust_lost {
                use super::runtime_types;
                pub type Account = ::subxt::utils::AccountId32;
                pub type Amount = ::core::primitive::u128;
            }
            impl ::subxt::events::StaticEvent for DustLost {
                const PALLET: &'static str = "Balances";
                const EVENT: &'static str = "DustLost";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Transfer succeeded."]
            pub struct Transfer {
                pub from: transfer::From,
                pub to: transfer::To,
                pub amount: transfer::Amount,
            }
            pub mod transfer {
                use super::runtime_types;
                pub type From = ::subxt::utils::AccountId32;
                pub type To = ::subxt::utils::AccountId32;
                pub type Amount = ::core::primitive::u128;
            }
            impl ::subxt::events::StaticEvent for Transfer {
                const PALLET: &'static str = "Balances";
                const EVENT: &'static str = "Transfer";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A balance was set by root."]
            pub struct BalanceSet {
                pub who: balance_set::Who,
                pub free: balance_set::Free,
            }
            pub mod balance_set {
                use super::runtime_types;
                pub type Who = ::subxt::utils::AccountId32;
                pub type Free = ::core::primitive::u128;
            }
            impl ::subxt::events::StaticEvent for BalanceSet {
                const PALLET: &'static str = "Balances";
                const EVENT: &'static str = "BalanceSet";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Some balance was reserved (moved from free to reserved)."]
            pub struct Reserved {
                pub who: reserved::Who,
                pub amount: reserved::Amount,
            }
            pub mod reserved {
                use super::runtime_types;
                pub type Who = ::subxt::utils::AccountId32;
                pub type Amount = ::core::primitive::u128;
            }
            impl ::subxt::events::StaticEvent for Reserved {
                const PALLET: &'static str = "Balances";
                const EVENT: &'static str = "Reserved";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Some balance was unreserved (moved from reserved to free)."]
            pub struct Unreserved {
                pub who: unreserved::Who,
                pub amount: unreserved::Amount,
            }
            pub mod unreserved {
                use super::runtime_types;
                pub type Who = ::subxt::utils::AccountId32;
                pub type Amount = ::core::primitive::u128;
            }
            impl ::subxt::events::StaticEvent for Unreserved {
                const PALLET: &'static str = "Balances";
                const EVENT: &'static str = "Unreserved";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Some balance was moved from the reserve of the first account to the second account."]
            #[doc = "Final argument indicates the destination balance type."]
            pub struct ReserveRepatriated {
                pub from: reserve_repatriated::From,
                pub to: reserve_repatriated::To,
                pub amount: reserve_repatriated::Amount,
                pub destination_status: reserve_repatriated::DestinationStatus,
            }
            pub mod reserve_repatriated {
                use super::runtime_types;
                pub type From = ::subxt::utils::AccountId32;
                pub type To = ::subxt::utils::AccountId32;
                pub type Amount = ::core::primitive::u128;
                pub type DestinationStatus =
                    runtime_types::frame_support::traits::tokens::misc::BalanceStatus;
            }
            impl ::subxt::events::StaticEvent for ReserveRepatriated {
                const PALLET: &'static str = "Balances";
                const EVENT: &'static str = "ReserveRepatriated";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Some amount was deposited (e.g. for transaction fees)."]
            pub struct Deposit {
                pub who: deposit::Who,
                pub amount: deposit::Amount,
            }
            pub mod deposit {
                use super::runtime_types;
                pub type Who = ::subxt::utils::AccountId32;
                pub type Amount = ::core::primitive::u128;
            }
            impl ::subxt::events::StaticEvent for Deposit {
                const PALLET: &'static str = "Balances";
                const EVENT: &'static str = "Deposit";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Some amount was withdrawn from the account (e.g. for transaction fees)."]
            pub struct Withdraw {
                pub who: withdraw::Who,
                pub amount: withdraw::Amount,
            }
            pub mod withdraw {
                use super::runtime_types;
                pub type Who = ::subxt::utils::AccountId32;
                pub type Amount = ::core::primitive::u128;
            }
            impl ::subxt::events::StaticEvent for Withdraw {
                const PALLET: &'static str = "Balances";
                const EVENT: &'static str = "Withdraw";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Some amount was removed from the account (e.g. for misbehavior)."]
            pub struct Slashed {
                pub who: slashed::Who,
                pub amount: slashed::Amount,
            }
            pub mod slashed {
                use super::runtime_types;
                pub type Who = ::subxt::utils::AccountId32;
                pub type Amount = ::core::primitive::u128;
            }
            impl ::subxt::events::StaticEvent for Slashed {
                const PALLET: &'static str = "Balances";
                const EVENT: &'static str = "Slashed";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Some amount was minted into an account."]
            pub struct Minted {
                pub who: minted::Who,
                pub amount: minted::Amount,
            }
            pub mod minted {
                use super::runtime_types;
                pub type Who = ::subxt::utils::AccountId32;
                pub type Amount = ::core::primitive::u128;
            }
            impl ::subxt::events::StaticEvent for Minted {
                const PALLET: &'static str = "Balances";
                const EVENT: &'static str = "Minted";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Some amount was burned from an account."]
            pub struct Burned {
                pub who: burned::Who,
                pub amount: burned::Amount,
            }
            pub mod burned {
                use super::runtime_types;
                pub type Who = ::subxt::utils::AccountId32;
                pub type Amount = ::core::primitive::u128;
            }
            impl ::subxt::events::StaticEvent for Burned {
                const PALLET: &'static str = "Balances";
                const EVENT: &'static str = "Burned";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Some amount was suspended from an account (it can be restored later)."]
            pub struct Suspended {
                pub who: suspended::Who,
                pub amount: suspended::Amount,
            }
            pub mod suspended {
                use super::runtime_types;
                pub type Who = ::subxt::utils::AccountId32;
                pub type Amount = ::core::primitive::u128;
            }
            impl ::subxt::events::StaticEvent for Suspended {
                const PALLET: &'static str = "Balances";
                const EVENT: &'static str = "Suspended";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Some amount was restored into an account."]
            pub struct Restored {
                pub who: restored::Who,
                pub amount: restored::Amount,
            }
            pub mod restored {
                use super::runtime_types;
                pub type Who = ::subxt::utils::AccountId32;
                pub type Amount = ::core::primitive::u128;
            }
            impl ::subxt::events::StaticEvent for Restored {
                const PALLET: &'static str = "Balances";
                const EVENT: &'static str = "Restored";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "An account was upgraded."]
            pub struct Upgraded {
                pub who: upgraded::Who,
            }
            pub mod upgraded {
                use super::runtime_types;
                pub type Who = ::subxt::utils::AccountId32;
            }
            impl ::subxt::events::StaticEvent for Upgraded {
                const PALLET: &'static str = "Balances";
                const EVENT: &'static str = "Upgraded";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Total issuance was increased by `amount`, creating a credit to be balanced."]
            pub struct Issued {
                pub amount: issued::Amount,
            }
            pub mod issued {
                use super::runtime_types;
                pub type Amount = ::core::primitive::u128;
            }
            impl ::subxt::events::StaticEvent for Issued {
                const PALLET: &'static str = "Balances";
                const EVENT: &'static str = "Issued";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Total issuance was decreased by `amount`, creating a debt to be balanced."]
            pub struct Rescinded {
                pub amount: rescinded::Amount,
            }
            pub mod rescinded {
                use super::runtime_types;
                pub type Amount = ::core::primitive::u128;
            }
            impl ::subxt::events::StaticEvent for Rescinded {
                const PALLET: &'static str = "Balances";
                const EVENT: &'static str = "Rescinded";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Some balance was locked."]
            pub struct Locked {
                pub who: locked::Who,
                pub amount: locked::Amount,
            }
            pub mod locked {
                use super::runtime_types;
                pub type Who = ::subxt::utils::AccountId32;
                pub type Amount = ::core::primitive::u128;
            }
            impl ::subxt::events::StaticEvent for Locked {
                const PALLET: &'static str = "Balances";
                const EVENT: &'static str = "Locked";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Some balance was unlocked."]
            pub struct Unlocked {
                pub who: unlocked::Who,
                pub amount: unlocked::Amount,
            }
            pub mod unlocked {
                use super::runtime_types;
                pub type Who = ::subxt::utils::AccountId32;
                pub type Amount = ::core::primitive::u128;
            }
            impl ::subxt::events::StaticEvent for Unlocked {
                const PALLET: &'static str = "Balances";
                const EVENT: &'static str = "Unlocked";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Some balance was frozen."]
            pub struct Frozen {
                pub who: frozen::Who,
                pub amount: frozen::Amount,
            }
            pub mod frozen {
                use super::runtime_types;
                pub type Who = ::subxt::utils::AccountId32;
                pub type Amount = ::core::primitive::u128;
            }
            impl ::subxt::events::StaticEvent for Frozen {
                const PALLET: &'static str = "Balances";
                const EVENT: &'static str = "Frozen";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Some balance was thawed."]
            pub struct Thawed {
                pub who: thawed::Who,
                pub amount: thawed::Amount,
            }
            pub mod thawed {
                use super::runtime_types;
                pub type Who = ::subxt::utils::AccountId32;
                pub type Amount = ::core::primitive::u128;
            }
            impl ::subxt::events::StaticEvent for Thawed {
                const PALLET: &'static str = "Balances";
                const EVENT: &'static str = "Thawed";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "The `TotalIssuance` was forcefully changed."]
            pub struct TotalIssuanceForced {
                pub old: total_issuance_forced::Old,
                pub new: total_issuance_forced::New,
            }
            pub mod total_issuance_forced {
                use super::runtime_types;
                pub type Old = ::core::primitive::u128;
                pub type New = ::core::primitive::u128;
            }
            impl ::subxt::events::StaticEvent for TotalIssuanceForced {
                const PALLET: &'static str = "Balances";
                const EVENT: &'static str = "TotalIssuanceForced";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub mod types {
                use super::runtime_types;
                pub mod total_issuance {
                    use super::runtime_types;
                    pub type TotalIssuance = ::core::primitive::u128;
                }
                pub mod inactive_issuance {
                    use super::runtime_types;
                    pub type InactiveIssuance = ::core::primitive::u128;
                }
                pub mod account {
                    use super::runtime_types;
                    pub type Account =
                        runtime_types::pallet_balances::types::AccountData<::core::primitive::u128>;
                    pub type Param0 = ::subxt::utils::AccountId32;
                }
                pub mod locks {
                    use super::runtime_types;
                    pub type Locks =
                        runtime_types::bounded_collections::weak_bounded_vec::WeakBoundedVec<
                            runtime_types::pallet_balances::types::BalanceLock<
                                ::core::primitive::u128,
                            >,
                        >;
                    pub type Param0 = ::subxt::utils::AccountId32;
                }
                pub mod reserves {
                    use super::runtime_types;
                    pub type Reserves = runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        runtime_types::pallet_balances::types::ReserveData<
                            [::core::primitive::u8; 8usize],
                            ::core::primitive::u128,
                        >,
                    >;
                    pub type Param0 = ::subxt::utils::AccountId32;
                }
                pub mod holds {
                    use super::runtime_types;
                    pub type Holds = runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        runtime_types::pallet_balances::types::IdAmount<
                            runtime_types::bridge_hub_rococo_runtime::RuntimeHoldReason,
                            ::core::primitive::u128,
                        >,
                    >;
                    pub type Param0 = ::subxt::utils::AccountId32;
                }
                pub mod freezes {
                    use super::runtime_types;
                    pub type Freezes = runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        runtime_types::pallet_balances::types::IdAmount<
                            (),
                            ::core::primitive::u128,
                        >,
                    >;
                    pub type Param0 = ::subxt::utils::AccountId32;
                }
            }
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " The total units issued in the system."]
                pub fn total_issuance(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::total_issuance::TotalIssuance,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Balances",
                        "TotalIssuance",
                        vec![],
                        [
                            116u8, 70u8, 119u8, 194u8, 69u8, 37u8, 116u8, 206u8, 171u8, 70u8,
                            171u8, 210u8, 226u8, 111u8, 184u8, 204u8, 206u8, 11u8, 68u8, 72u8,
                            255u8, 19u8, 194u8, 11u8, 27u8, 194u8, 81u8, 204u8, 59u8, 224u8, 202u8,
                            185u8,
                        ],
                    )
                }
                #[doc = " The total units of outstanding deactivated balance in the system."]
                pub fn inactive_issuance(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::inactive_issuance::InactiveIssuance,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Balances",
                        "InactiveIssuance",
                        vec![],
                        [
                            212u8, 185u8, 19u8, 50u8, 250u8, 72u8, 173u8, 50u8, 4u8, 104u8, 161u8,
                            249u8, 77u8, 247u8, 204u8, 248u8, 11u8, 18u8, 57u8, 4u8, 82u8, 110u8,
                            30u8, 216u8, 16u8, 37u8, 87u8, 67u8, 189u8, 235u8, 214u8, 155u8,
                        ],
                    )
                }
                #[doc = " The Balances pallet example of storing the balance of an account."]
                #[doc = ""]
                #[doc = " # Example"]
                #[doc = ""]
                #[doc = " ```nocompile"]
                #[doc = "  impl pallet_balances::Config for Runtime {"]
                #[doc = "    type AccountStore = StorageMapShim<Self::Account<Runtime>, frame_system::Provider<Runtime>, AccountId, Self::AccountData<Balance>>"]
                #[doc = "  }"]
                #[doc = " ```"]
                #[doc = ""]
                #[doc = " You can also store the balance of an account in the `System` pallet."]
                #[doc = ""]
                #[doc = " # Example"]
                #[doc = ""]
                #[doc = " ```nocompile"]
                #[doc = "  impl pallet_balances::Config for Runtime {"]
                #[doc = "   type AccountStore = System"]
                #[doc = "  }"]
                #[doc = " ```"]
                #[doc = ""]
                #[doc = " But this comes with tradeoffs, storing account balances in the system pallet stores"]
                #[doc = " `frame_system` data alongside the account data contrary to storing account balances in the"]
                #[doc = " `Balances` pallet, which uses a `StorageMap` to store balances data only."]
                #[doc = " NOTE: This is only used in the case that this pallet is used to store balances."]
                pub fn account_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::account::Account,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Balances",
                        "Account",
                        vec![],
                        [
                            213u8, 38u8, 200u8, 69u8, 218u8, 0u8, 112u8, 181u8, 160u8, 23u8, 96u8,
                            90u8, 3u8, 88u8, 126u8, 22u8, 103u8, 74u8, 64u8, 69u8, 29u8, 247u8,
                            18u8, 17u8, 234u8, 143u8, 189u8, 22u8, 247u8, 194u8, 154u8, 249u8,
                        ],
                    )
                }
                #[doc = " The Balances pallet example of storing the balance of an account."]
                #[doc = ""]
                #[doc = " # Example"]
                #[doc = ""]
                #[doc = " ```nocompile"]
                #[doc = "  impl pallet_balances::Config for Runtime {"]
                #[doc = "    type AccountStore = StorageMapShim<Self::Account<Runtime>, frame_system::Provider<Runtime>, AccountId, Self::AccountData<Balance>>"]
                #[doc = "  }"]
                #[doc = " ```"]
                #[doc = ""]
                #[doc = " You can also store the balance of an account in the `System` pallet."]
                #[doc = ""]
                #[doc = " # Example"]
                #[doc = ""]
                #[doc = " ```nocompile"]
                #[doc = "  impl pallet_balances::Config for Runtime {"]
                #[doc = "   type AccountStore = System"]
                #[doc = "  }"]
                #[doc = " ```"]
                #[doc = ""]
                #[doc = " But this comes with tradeoffs, storing account balances in the system pallet stores"]
                #[doc = " `frame_system` data alongside the account data contrary to storing account balances in the"]
                #[doc = " `Balances` pallet, which uses a `StorageMap` to store balances data only."]
                #[doc = " NOTE: This is only used in the case that this pallet is used to store balances."]
                pub fn account(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::account::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::account::Account,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Balances",
                        "Account",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            213u8, 38u8, 200u8, 69u8, 218u8, 0u8, 112u8, 181u8, 160u8, 23u8, 96u8,
                            90u8, 3u8, 88u8, 126u8, 22u8, 103u8, 74u8, 64u8, 69u8, 29u8, 247u8,
                            18u8, 17u8, 234u8, 143u8, 189u8, 22u8, 247u8, 194u8, 154u8, 249u8,
                        ],
                    )
                }
                #[doc = " Any liquidity locks on some account balances."]
                #[doc = " NOTE: Should only be accessed when setting, changing and freeing a lock."]
                pub fn locks_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::locks::Locks,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Balances",
                        "Locks",
                        vec![],
                        [
                            10u8, 223u8, 55u8, 0u8, 249u8, 69u8, 168u8, 41u8, 75u8, 35u8, 120u8,
                            167u8, 18u8, 132u8, 9u8, 20u8, 91u8, 51u8, 27u8, 69u8, 136u8, 187u8,
                            13u8, 220u8, 163u8, 122u8, 26u8, 141u8, 174u8, 249u8, 85u8, 37u8,
                        ],
                    )
                }
                #[doc = " Any liquidity locks on some account balances."]
                #[doc = " NOTE: Should only be accessed when setting, changing and freeing a lock."]
                pub fn locks(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::locks::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::locks::Locks,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Balances",
                        "Locks",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            10u8, 223u8, 55u8, 0u8, 249u8, 69u8, 168u8, 41u8, 75u8, 35u8, 120u8,
                            167u8, 18u8, 132u8, 9u8, 20u8, 91u8, 51u8, 27u8, 69u8, 136u8, 187u8,
                            13u8, 220u8, 163u8, 122u8, 26u8, 141u8, 174u8, 249u8, 85u8, 37u8,
                        ],
                    )
                }
                #[doc = " Named reserves on some account balances."]
                pub fn reserves_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::reserves::Reserves,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Balances",
                        "Reserves",
                        vec![],
                        [
                            112u8, 10u8, 241u8, 77u8, 64u8, 187u8, 106u8, 159u8, 13u8, 153u8,
                            140u8, 178u8, 182u8, 50u8, 1u8, 55u8, 149u8, 92u8, 196u8, 229u8, 170u8,
                            106u8, 193u8, 88u8, 255u8, 244u8, 2u8, 193u8, 62u8, 235u8, 204u8, 91u8,
                        ],
                    )
                }
                #[doc = " Named reserves on some account balances."]
                pub fn reserves(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::reserves::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::reserves::Reserves,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Balances",
                        "Reserves",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            112u8, 10u8, 241u8, 77u8, 64u8, 187u8, 106u8, 159u8, 13u8, 153u8,
                            140u8, 178u8, 182u8, 50u8, 1u8, 55u8, 149u8, 92u8, 196u8, 229u8, 170u8,
                            106u8, 193u8, 88u8, 255u8, 244u8, 2u8, 193u8, 62u8, 235u8, 204u8, 91u8,
                        ],
                    )
                }
                #[doc = " Holds on account balances."]
                pub fn holds_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::holds::Holds,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Balances",
                        "Holds",
                        vec![],
                        [
                            37u8, 176u8, 2u8, 18u8, 109u8, 26u8, 66u8, 81u8, 28u8, 104u8, 149u8,
                            117u8, 119u8, 114u8, 196u8, 35u8, 172u8, 155u8, 66u8, 195u8, 98u8,
                            37u8, 134u8, 22u8, 106u8, 221u8, 215u8, 97u8, 25u8, 28u8, 21u8, 206u8,
                        ],
                    )
                }
                #[doc = " Holds on account balances."]
                pub fn holds(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::holds::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::holds::Holds,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Balances",
                        "Holds",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            37u8, 176u8, 2u8, 18u8, 109u8, 26u8, 66u8, 81u8, 28u8, 104u8, 149u8,
                            117u8, 119u8, 114u8, 196u8, 35u8, 172u8, 155u8, 66u8, 195u8, 98u8,
                            37u8, 134u8, 22u8, 106u8, 221u8, 215u8, 97u8, 25u8, 28u8, 21u8, 206u8,
                        ],
                    )
                }
                #[doc = " Freeze locks on account balances."]
                pub fn freezes_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::freezes::Freezes,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Balances",
                        "Freezes",
                        vec![],
                        [
                            69u8, 49u8, 165u8, 76u8, 135u8, 142u8, 179u8, 118u8, 50u8, 109u8, 53u8,
                            112u8, 110u8, 94u8, 30u8, 93u8, 173u8, 38u8, 27u8, 142u8, 19u8, 5u8,
                            163u8, 4u8, 68u8, 218u8, 179u8, 224u8, 118u8, 218u8, 115u8, 64u8,
                        ],
                    )
                }
                #[doc = " Freeze locks on account balances."]
                pub fn freezes(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::freezes::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::freezes::Freezes,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Balances",
                        "Freezes",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            69u8, 49u8, 165u8, 76u8, 135u8, 142u8, 179u8, 118u8, 50u8, 109u8, 53u8,
                            112u8, 110u8, 94u8, 30u8, 93u8, 173u8, 38u8, 27u8, 142u8, 19u8, 5u8,
                            163u8, 4u8, 68u8, 218u8, 179u8, 224u8, 118u8, 218u8, 115u8, 64u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                #[doc = " The minimum amount required to keep an account open. MUST BE GREATER THAN ZERO!"]
                #[doc = ""]
                #[doc = " If you *really* need it to be zero, you can enable the feature `insecure_zero_ed` for"]
                #[doc = " this pallet. However, you do so at your own risk: this will open up a major DoS vector."]
                #[doc = " In case you have multiple sources of provider references, you may also get unexpected"]
                #[doc = " behaviour if you set this to zero."]
                #[doc = ""]
                #[doc = " Bottom line: Do yourself a favour and make it at least one!"]
                pub fn existential_deposit(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u128> {
                    ::subxt::constants::Address::new_static(
                        "Balances",
                        "ExistentialDeposit",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
                #[doc = " The maximum number of locks that should exist on an account."]
                #[doc = " Not strictly enforced, but used for weight estimation."]
                pub fn max_locks(&self) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "Balances",
                        "MaxLocks",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " The maximum number of named reserves that can exist on an account."]
                pub fn max_reserves(&self) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "Balances",
                        "MaxReserves",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " The maximum number of individual freeze locks that can exist on an account at any time."]
                pub fn max_freezes(&self) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "Balances",
                        "MaxFreezes",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod transaction_payment {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "The `Event` enum of this pallet"]
        pub type Event = runtime_types::pallet_transaction_payment::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A transaction fee `actual_fee`, of which `tip` was added to the minimum inclusion fee,"]
            #[doc = "has been paid by `who`."]
            pub struct TransactionFeePaid {
                pub who: transaction_fee_paid::Who,
                pub actual_fee: transaction_fee_paid::ActualFee,
                pub tip: transaction_fee_paid::Tip,
            }
            pub mod transaction_fee_paid {
                use super::runtime_types;
                pub type Who = ::subxt::utils::AccountId32;
                pub type ActualFee = ::core::primitive::u128;
                pub type Tip = ::core::primitive::u128;
            }
            impl ::subxt::events::StaticEvent for TransactionFeePaid {
                const PALLET: &'static str = "TransactionPayment";
                const EVENT: &'static str = "TransactionFeePaid";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub mod types {
                use super::runtime_types;
                pub mod next_fee_multiplier {
                    use super::runtime_types;
                    pub type NextFeeMultiplier =
                        runtime_types::sp_arithmetic::fixed_point::FixedU128;
                }
                pub mod storage_version {
                    use super::runtime_types;
                    pub type StorageVersion = runtime_types::pallet_transaction_payment::Releases;
                }
            }
            pub struct StorageApi;
            impl StorageApi {
                pub fn next_fee_multiplier(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::next_fee_multiplier::NextFeeMultiplier,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "TransactionPayment",
                        "NextFeeMultiplier",
                        vec![],
                        [
                            247u8, 39u8, 81u8, 170u8, 225u8, 226u8, 82u8, 147u8, 34u8, 113u8,
                            147u8, 213u8, 59u8, 80u8, 139u8, 35u8, 36u8, 196u8, 152u8, 19u8, 9u8,
                            159u8, 176u8, 79u8, 249u8, 201u8, 170u8, 1u8, 129u8, 79u8, 146u8,
                            197u8,
                        ],
                    )
                }
                pub fn storage_version(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::storage_version::StorageVersion,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "TransactionPayment",
                        "StorageVersion",
                        vec![],
                        [
                            105u8, 243u8, 158u8, 241u8, 159u8, 231u8, 253u8, 6u8, 4u8, 32u8, 85u8,
                            178u8, 126u8, 31u8, 203u8, 134u8, 154u8, 38u8, 122u8, 155u8, 150u8,
                            251u8, 174u8, 15u8, 74u8, 134u8, 216u8, 244u8, 168u8, 175u8, 158u8,
                            144u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                #[doc = " A fee multiplier for `Operational` extrinsics to compute \"virtual tip\" to boost their"]
                #[doc = " `priority`"]
                #[doc = ""]
                #[doc = " This value is multiplied by the `final_fee` to obtain a \"virtual tip\" that is later"]
                #[doc = " added to a tip component in regular `priority` calculations."]
                #[doc = " It means that a `Normal` transaction can front-run a similarly-sized `Operational`"]
                #[doc = " extrinsic (with no tip), by including a tip value greater than the virtual tip."]
                #[doc = ""]
                #[doc = " ```rust,ignore"]
                #[doc = " // For `Normal`"]
                #[doc = " let priority = priority_calc(tip);"]
                #[doc = ""]
                #[doc = " // For `Operational`"]
                #[doc = " let virtual_tip = (inclusion_fee + tip) * OperationalFeeMultiplier;"]
                #[doc = " let priority = priority_calc(tip + virtual_tip);"]
                #[doc = " ```"]
                #[doc = ""]
                #[doc = " Note that since we use `final_fee` the multiplier applies also to the regular `tip`"]
                #[doc = " sent with the transaction. So, not only does the transaction get a priority bump based"]
                #[doc = " on the `inclusion_fee`, but we also amplify the impact of tips applied to `Operational`"]
                #[doc = " transactions."]
                pub fn operational_fee_multiplier(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u8> {
                    ::subxt::constants::Address::new_static(
                        "TransactionPayment",
                        "OperationalFeeMultiplier",
                        [
                            141u8, 130u8, 11u8, 35u8, 226u8, 114u8, 92u8, 179u8, 168u8, 110u8,
                            28u8, 91u8, 221u8, 64u8, 4u8, 148u8, 201u8, 193u8, 185u8, 66u8, 226u8,
                            114u8, 97u8, 79u8, 62u8, 212u8, 202u8, 114u8, 237u8, 228u8, 183u8,
                            165u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod authorship {
        use super::root_mod;
        use super::runtime_types;
        pub mod storage {
            use super::runtime_types;
            pub mod types {
                use super::runtime_types;
                pub mod author {
                    use super::runtime_types;
                    pub type Author = ::subxt::utils::AccountId32;
                }
            }
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " Author of current block."]
                pub fn author(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::author::Author,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Authorship",
                        "Author",
                        vec![],
                        [
                            247u8, 192u8, 118u8, 227u8, 47u8, 20u8, 203u8, 199u8, 216u8, 87u8,
                            220u8, 50u8, 166u8, 61u8, 168u8, 213u8, 253u8, 62u8, 202u8, 199u8,
                            61u8, 192u8, 237u8, 53u8, 22u8, 148u8, 164u8, 245u8, 99u8, 24u8, 146u8,
                            18u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod collator_selection {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "The `Error` enum of this pallet."]
        pub type Error = runtime_types::pallet_collator_selection::pallet::Error;
        #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
        pub type Call = runtime_types::pallet_collator_selection::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "See [`Pallet::set_invulnerables`]."]
                pub struct SetInvulnerables {
                    pub new: set_invulnerables::New,
                }
                pub mod set_invulnerables {
                    use super::runtime_types;
                    pub type New = ::std::vec::Vec<::subxt::utils::AccountId32>;
                }
                impl ::subxt::blocks::StaticExtrinsic for SetInvulnerables {
                    const PALLET: &'static str = "CollatorSelection";
                    const CALL: &'static str = "set_invulnerables";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "See [`Pallet::set_desired_candidates`]."]
                pub struct SetDesiredCandidates {
                    pub max: set_desired_candidates::Max,
                }
                pub mod set_desired_candidates {
                    use super::runtime_types;
                    pub type Max = ::core::primitive::u32;
                }
                impl ::subxt::blocks::StaticExtrinsic for SetDesiredCandidates {
                    const PALLET: &'static str = "CollatorSelection";
                    const CALL: &'static str = "set_desired_candidates";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "See [`Pallet::set_candidacy_bond`]."]
                pub struct SetCandidacyBond {
                    pub bond: set_candidacy_bond::Bond,
                }
                pub mod set_candidacy_bond {
                    use super::runtime_types;
                    pub type Bond = ::core::primitive::u128;
                }
                impl ::subxt::blocks::StaticExtrinsic for SetCandidacyBond {
                    const PALLET: &'static str = "CollatorSelection";
                    const CALL: &'static str = "set_candidacy_bond";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "See [`Pallet::register_as_candidate`]."]
                pub struct RegisterAsCandidate;
                impl ::subxt::blocks::StaticExtrinsic for RegisterAsCandidate {
                    const PALLET: &'static str = "CollatorSelection";
                    const CALL: &'static str = "register_as_candidate";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "See [`Pallet::leave_intent`]."]
                pub struct LeaveIntent;
                impl ::subxt::blocks::StaticExtrinsic for LeaveIntent {
                    const PALLET: &'static str = "CollatorSelection";
                    const CALL: &'static str = "leave_intent";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "See [`Pallet::add_invulnerable`]."]
                pub struct AddInvulnerable {
                    pub who: add_invulnerable::Who,
                }
                pub mod add_invulnerable {
                    use super::runtime_types;
                    pub type Who = ::subxt::utils::AccountId32;
                }
                impl ::subxt::blocks::StaticExtrinsic for AddInvulnerable {
                    const PALLET: &'static str = "CollatorSelection";
                    const CALL: &'static str = "add_invulnerable";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "See [`Pallet::remove_invulnerable`]."]
                pub struct RemoveInvulnerable {
                    pub who: remove_invulnerable::Who,
                }
                pub mod remove_invulnerable {
                    use super::runtime_types;
                    pub type Who = ::subxt::utils::AccountId32;
                }
                impl ::subxt::blocks::StaticExtrinsic for RemoveInvulnerable {
                    const PALLET: &'static str = "CollatorSelection";
                    const CALL: &'static str = "remove_invulnerable";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "See [`Pallet::update_bond`]."]
                pub struct UpdateBond {
                    pub new_deposit: update_bond::NewDeposit,
                }
                pub mod update_bond {
                    use super::runtime_types;
                    pub type NewDeposit = ::core::primitive::u128;
                }
                impl ::subxt::blocks::StaticExtrinsic for UpdateBond {
                    const PALLET: &'static str = "CollatorSelection";
                    const CALL: &'static str = "update_bond";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "See [`Pallet::take_candidate_slot`]."]
                pub struct TakeCandidateSlot {
                    pub deposit: take_candidate_slot::Deposit,
                    pub target: take_candidate_slot::Target,
                }
                pub mod take_candidate_slot {
                    use super::runtime_types;
                    pub type Deposit = ::core::primitive::u128;
                    pub type Target = ::subxt::utils::AccountId32;
                }
                impl ::subxt::blocks::StaticExtrinsic for TakeCandidateSlot {
                    const PALLET: &'static str = "CollatorSelection";
                    const CALL: &'static str = "take_candidate_slot";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "See [`Pallet::set_invulnerables`]."]
                pub fn set_invulnerables(
                    &self,
                    new: types::set_invulnerables::New,
                ) -> ::subxt::tx::Payload<types::SetInvulnerables> {
                    ::subxt::tx::Payload::new_static(
                        "CollatorSelection",
                        "set_invulnerables",
                        types::SetInvulnerables { new },
                        [
                            113u8, 217u8, 14u8, 48u8, 6u8, 198u8, 8u8, 170u8, 8u8, 237u8, 230u8,
                            184u8, 17u8, 181u8, 15u8, 126u8, 117u8, 3u8, 208u8, 215u8, 40u8, 16u8,
                            150u8, 162u8, 37u8, 196u8, 235u8, 36u8, 247u8, 24u8, 187u8, 17u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::set_desired_candidates`]."]
                pub fn set_desired_candidates(
                    &self,
                    max: types::set_desired_candidates::Max,
                ) -> ::subxt::tx::Payload<types::SetDesiredCandidates> {
                    ::subxt::tx::Payload::new_static(
                        "CollatorSelection",
                        "set_desired_candidates",
                        types::SetDesiredCandidates { max },
                        [
                            174u8, 44u8, 232u8, 155u8, 228u8, 219u8, 239u8, 75u8, 86u8, 150u8,
                            135u8, 214u8, 58u8, 9u8, 25u8, 133u8, 245u8, 101u8, 85u8, 246u8, 15u8,
                            248u8, 165u8, 87u8, 88u8, 28u8, 10u8, 196u8, 86u8, 89u8, 28u8, 165u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::set_candidacy_bond`]."]
                pub fn set_candidacy_bond(
                    &self,
                    bond: types::set_candidacy_bond::Bond,
                ) -> ::subxt::tx::Payload<types::SetCandidacyBond> {
                    ::subxt::tx::Payload::new_static(
                        "CollatorSelection",
                        "set_candidacy_bond",
                        types::SetCandidacyBond { bond },
                        [
                            250u8, 4u8, 185u8, 228u8, 101u8, 223u8, 49u8, 44u8, 172u8, 148u8,
                            216u8, 242u8, 192u8, 88u8, 228u8, 59u8, 225u8, 222u8, 171u8, 40u8,
                            23u8, 1u8, 46u8, 183u8, 189u8, 191u8, 156u8, 12u8, 218u8, 116u8, 76u8,
                            59u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::register_as_candidate`]."]
                pub fn register_as_candidate(
                    &self,
                ) -> ::subxt::tx::Payload<types::RegisterAsCandidate> {
                    ::subxt::tx::Payload::new_static(
                        "CollatorSelection",
                        "register_as_candidate",
                        types::RegisterAsCandidate {},
                        [
                            69u8, 222u8, 214u8, 106u8, 105u8, 168u8, 82u8, 239u8, 158u8, 117u8,
                            224u8, 89u8, 228u8, 51u8, 221u8, 244u8, 88u8, 63u8, 72u8, 119u8, 224u8,
                            111u8, 93u8, 39u8, 18u8, 66u8, 72u8, 105u8, 70u8, 66u8, 178u8, 173u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::leave_intent`]."]
                pub fn leave_intent(&self) -> ::subxt::tx::Payload<types::LeaveIntent> {
                    ::subxt::tx::Payload::new_static(
                        "CollatorSelection",
                        "leave_intent",
                        types::LeaveIntent {},
                        [
                            126u8, 57u8, 10u8, 67u8, 120u8, 229u8, 70u8, 23u8, 154u8, 215u8, 226u8,
                            178u8, 203u8, 152u8, 195u8, 177u8, 157u8, 158u8, 40u8, 17u8, 93u8,
                            225u8, 253u8, 217u8, 48u8, 165u8, 55u8, 79u8, 43u8, 123u8, 193u8,
                            147u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::add_invulnerable`]."]
                pub fn add_invulnerable(
                    &self,
                    who: types::add_invulnerable::Who,
                ) -> ::subxt::tx::Payload<types::AddInvulnerable> {
                    ::subxt::tx::Payload::new_static(
                        "CollatorSelection",
                        "add_invulnerable",
                        types::AddInvulnerable { who },
                        [
                            115u8, 109u8, 38u8, 19u8, 81u8, 194u8, 124u8, 140u8, 239u8, 23u8, 85u8,
                            62u8, 241u8, 83u8, 11u8, 241u8, 14u8, 34u8, 206u8, 63u8, 104u8, 78u8,
                            96u8, 182u8, 173u8, 198u8, 230u8, 107u8, 102u8, 6u8, 164u8, 75u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::remove_invulnerable`]."]
                pub fn remove_invulnerable(
                    &self,
                    who: types::remove_invulnerable::Who,
                ) -> ::subxt::tx::Payload<types::RemoveInvulnerable> {
                    ::subxt::tx::Payload::new_static(
                        "CollatorSelection",
                        "remove_invulnerable",
                        types::RemoveInvulnerable { who },
                        [
                            103u8, 146u8, 23u8, 136u8, 61u8, 65u8, 172u8, 157u8, 216u8, 200u8,
                            119u8, 28u8, 189u8, 215u8, 13u8, 100u8, 102u8, 13u8, 94u8, 12u8, 78u8,
                            156u8, 149u8, 74u8, 126u8, 118u8, 127u8, 49u8, 129u8, 2u8, 12u8, 118u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::update_bond`]."]
                pub fn update_bond(
                    &self,
                    new_deposit: types::update_bond::NewDeposit,
                ) -> ::subxt::tx::Payload<types::UpdateBond> {
                    ::subxt::tx::Payload::new_static(
                        "CollatorSelection",
                        "update_bond",
                        types::UpdateBond { new_deposit },
                        [
                            47u8, 184u8, 193u8, 220u8, 160u8, 1u8, 253u8, 203u8, 8u8, 142u8, 43u8,
                            151u8, 190u8, 138u8, 201u8, 174u8, 233u8, 112u8, 200u8, 247u8, 251u8,
                            94u8, 23u8, 224u8, 150u8, 179u8, 190u8, 140u8, 199u8, 50u8, 2u8, 249u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::take_candidate_slot`]."]
                pub fn take_candidate_slot(
                    &self,
                    deposit: types::take_candidate_slot::Deposit,
                    target: types::take_candidate_slot::Target,
                ) -> ::subxt::tx::Payload<types::TakeCandidateSlot> {
                    ::subxt::tx::Payload::new_static(
                        "CollatorSelection",
                        "take_candidate_slot",
                        types::TakeCandidateSlot { deposit, target },
                        [
                            48u8, 150u8, 189u8, 206u8, 199u8, 196u8, 173u8, 3u8, 206u8, 10u8, 50u8,
                            160u8, 15u8, 53u8, 189u8, 126u8, 154u8, 36u8, 90u8, 66u8, 235u8, 12u8,
                            107u8, 44u8, 117u8, 33u8, 207u8, 194u8, 251u8, 194u8, 224u8, 80u8,
                        ],
                    )
                }
            }
        }
        #[doc = "The `Event` enum of this pallet"]
        pub type Event = runtime_types::pallet_collator_selection::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "New Invulnerables were set."]
            pub struct NewInvulnerables {
                pub invulnerables: new_invulnerables::Invulnerables,
            }
            pub mod new_invulnerables {
                use super::runtime_types;
                pub type Invulnerables = ::std::vec::Vec<::subxt::utils::AccountId32>;
            }
            impl ::subxt::events::StaticEvent for NewInvulnerables {
                const PALLET: &'static str = "CollatorSelection";
                const EVENT: &'static str = "NewInvulnerables";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A new Invulnerable was added."]
            pub struct InvulnerableAdded {
                pub account_id: invulnerable_added::AccountId,
            }
            pub mod invulnerable_added {
                use super::runtime_types;
                pub type AccountId = ::subxt::utils::AccountId32;
            }
            impl ::subxt::events::StaticEvent for InvulnerableAdded {
                const PALLET: &'static str = "CollatorSelection";
                const EVENT: &'static str = "InvulnerableAdded";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "An Invulnerable was removed."]
            pub struct InvulnerableRemoved {
                pub account_id: invulnerable_removed::AccountId,
            }
            pub mod invulnerable_removed {
                use super::runtime_types;
                pub type AccountId = ::subxt::utils::AccountId32;
            }
            impl ::subxt::events::StaticEvent for InvulnerableRemoved {
                const PALLET: &'static str = "CollatorSelection";
                const EVENT: &'static str = "InvulnerableRemoved";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "The number of desired candidates was set."]
            pub struct NewDesiredCandidates {
                pub desired_candidates: new_desired_candidates::DesiredCandidates,
            }
            pub mod new_desired_candidates {
                use super::runtime_types;
                pub type DesiredCandidates = ::core::primitive::u32;
            }
            impl ::subxt::events::StaticEvent for NewDesiredCandidates {
                const PALLET: &'static str = "CollatorSelection";
                const EVENT: &'static str = "NewDesiredCandidates";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "The candidacy bond was set."]
            pub struct NewCandidacyBond {
                pub bond_amount: new_candidacy_bond::BondAmount,
            }
            pub mod new_candidacy_bond {
                use super::runtime_types;
                pub type BondAmount = ::core::primitive::u128;
            }
            impl ::subxt::events::StaticEvent for NewCandidacyBond {
                const PALLET: &'static str = "CollatorSelection";
                const EVENT: &'static str = "NewCandidacyBond";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A new candidate joined."]
            pub struct CandidateAdded {
                pub account_id: candidate_added::AccountId,
                pub deposit: candidate_added::Deposit,
            }
            pub mod candidate_added {
                use super::runtime_types;
                pub type AccountId = ::subxt::utils::AccountId32;
                pub type Deposit = ::core::primitive::u128;
            }
            impl ::subxt::events::StaticEvent for CandidateAdded {
                const PALLET: &'static str = "CollatorSelection";
                const EVENT: &'static str = "CandidateAdded";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Bond of a candidate updated."]
            pub struct CandidateBondUpdated {
                pub account_id: candidate_bond_updated::AccountId,
                pub deposit: candidate_bond_updated::Deposit,
            }
            pub mod candidate_bond_updated {
                use super::runtime_types;
                pub type AccountId = ::subxt::utils::AccountId32;
                pub type Deposit = ::core::primitive::u128;
            }
            impl ::subxt::events::StaticEvent for CandidateBondUpdated {
                const PALLET: &'static str = "CollatorSelection";
                const EVENT: &'static str = "CandidateBondUpdated";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A candidate was removed."]
            pub struct CandidateRemoved {
                pub account_id: candidate_removed::AccountId,
            }
            pub mod candidate_removed {
                use super::runtime_types;
                pub type AccountId = ::subxt::utils::AccountId32;
            }
            impl ::subxt::events::StaticEvent for CandidateRemoved {
                const PALLET: &'static str = "CollatorSelection";
                const EVENT: &'static str = "CandidateRemoved";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "An account was replaced in the candidate list by another one."]
            pub struct CandidateReplaced {
                pub old: candidate_replaced::Old,
                pub new: candidate_replaced::New,
                pub deposit: candidate_replaced::Deposit,
            }
            pub mod candidate_replaced {
                use super::runtime_types;
                pub type Old = ::subxt::utils::AccountId32;
                pub type New = ::subxt::utils::AccountId32;
                pub type Deposit = ::core::primitive::u128;
            }
            impl ::subxt::events::StaticEvent for CandidateReplaced {
                const PALLET: &'static str = "CollatorSelection";
                const EVENT: &'static str = "CandidateReplaced";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "An account was unable to be added to the Invulnerables because they did not have keys"]
            #[doc = "registered. Other Invulnerables may have been set."]
            pub struct InvalidInvulnerableSkipped {
                pub account_id: invalid_invulnerable_skipped::AccountId,
            }
            pub mod invalid_invulnerable_skipped {
                use super::runtime_types;
                pub type AccountId = ::subxt::utils::AccountId32;
            }
            impl ::subxt::events::StaticEvent for InvalidInvulnerableSkipped {
                const PALLET: &'static str = "CollatorSelection";
                const EVENT: &'static str = "InvalidInvulnerableSkipped";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub mod types {
                use super::runtime_types;
                pub mod invulnerables {
                    use super::runtime_types;
                    pub type Invulnerables =
                        runtime_types::bounded_collections::bounded_vec::BoundedVec<
                            ::subxt::utils::AccountId32,
                        >;
                }
                pub mod candidate_list {
                    use super::runtime_types;
                    pub type CandidateList =
                        runtime_types::bounded_collections::bounded_vec::BoundedVec<
                            runtime_types::pallet_collator_selection::pallet::CandidateInfo<
                                ::subxt::utils::AccountId32,
                                ::core::primitive::u128,
                            >,
                        >;
                }
                pub mod last_authored_block {
                    use super::runtime_types;
                    pub type LastAuthoredBlock = ::core::primitive::u32;
                    pub type Param0 = ::subxt::utils::AccountId32;
                }
                pub mod desired_candidates {
                    use super::runtime_types;
                    pub type DesiredCandidates = ::core::primitive::u32;
                }
                pub mod candidacy_bond {
                    use super::runtime_types;
                    pub type CandidacyBond = ::core::primitive::u128;
                }
            }
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " The invulnerable, permissioned collators. This list must be sorted."]
                pub fn invulnerables(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::invulnerables::Invulnerables,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "CollatorSelection",
                        "Invulnerables",
                        vec![],
                        [
                            109u8, 180u8, 25u8, 41u8, 152u8, 158u8, 186u8, 214u8, 89u8, 222u8,
                            103u8, 14u8, 91u8, 3u8, 65u8, 6u8, 255u8, 62u8, 47u8, 255u8, 132u8,
                            164u8, 217u8, 200u8, 130u8, 29u8, 168u8, 23u8, 81u8, 217u8, 35u8,
                            123u8,
                        ],
                    )
                }
                #[doc = " The (community, limited) collation candidates. `Candidates` and `Invulnerables` should be"]
                #[doc = " mutually exclusive."]
                #[doc = ""]
                #[doc = " This list is sorted in ascending order by deposit and when the deposits are equal, the least"]
                #[doc = " recently updated is considered greater."]
                pub fn candidate_list(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::candidate_list::CandidateList,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "CollatorSelection",
                        "CandidateList",
                        vec![],
                        [
                            77u8, 195u8, 89u8, 139u8, 79u8, 111u8, 151u8, 215u8, 19u8, 152u8, 67u8,
                            49u8, 74u8, 76u8, 3u8, 60u8, 51u8, 140u8, 6u8, 134u8, 159u8, 55u8,
                            196u8, 57u8, 189u8, 31u8, 219u8, 218u8, 164u8, 189u8, 196u8, 60u8,
                        ],
                    )
                }
                #[doc = " Last block authored by collator."]
                pub fn last_authored_block_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::last_authored_block::LastAuthoredBlock,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "CollatorSelection",
                        "LastAuthoredBlock",
                        vec![],
                        [
                            176u8, 170u8, 165u8, 244u8, 101u8, 126u8, 24u8, 132u8, 228u8, 138u8,
                            72u8, 241u8, 144u8, 100u8, 79u8, 112u8, 9u8, 46u8, 210u8, 80u8, 12u8,
                            126u8, 32u8, 214u8, 26u8, 171u8, 155u8, 3u8, 233u8, 22u8, 164u8, 25u8,
                        ],
                    )
                }
                #[doc = " Last block authored by collator."]
                pub fn last_authored_block(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::last_authored_block::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::last_authored_block::LastAuthoredBlock,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "CollatorSelection",
                        "LastAuthoredBlock",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            176u8, 170u8, 165u8, 244u8, 101u8, 126u8, 24u8, 132u8, 228u8, 138u8,
                            72u8, 241u8, 144u8, 100u8, 79u8, 112u8, 9u8, 46u8, 210u8, 80u8, 12u8,
                            126u8, 32u8, 214u8, 26u8, 171u8, 155u8, 3u8, 233u8, 22u8, 164u8, 25u8,
                        ],
                    )
                }
                #[doc = " Desired number of candidates."]
                #[doc = ""]
                #[doc = " This should ideally always be less than [`Config::MaxCandidates`] for weights to be correct."]
                pub fn desired_candidates(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::desired_candidates::DesiredCandidates,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "CollatorSelection",
                        "DesiredCandidates",
                        vec![],
                        [
                            69u8, 199u8, 130u8, 132u8, 10u8, 127u8, 204u8, 220u8, 59u8, 107u8,
                            96u8, 180u8, 42u8, 235u8, 14u8, 126u8, 231u8, 242u8, 162u8, 126u8,
                            63u8, 223u8, 15u8, 250u8, 22u8, 210u8, 54u8, 34u8, 235u8, 191u8, 250u8,
                            21u8,
                        ],
                    )
                }
                #[doc = " Fixed amount to deposit to become a collator."]
                #[doc = ""]
                #[doc = " When a collator calls `leave_intent` they immediately receive the deposit back."]
                pub fn candidacy_bond(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::candidacy_bond::CandidacyBond,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "CollatorSelection",
                        "CandidacyBond",
                        vec![],
                        [
                            71u8, 134u8, 156u8, 102u8, 201u8, 83u8, 240u8, 251u8, 189u8, 213u8,
                            211u8, 182u8, 126u8, 122u8, 41u8, 174u8, 105u8, 29u8, 216u8, 23u8,
                            255u8, 55u8, 245u8, 187u8, 234u8, 234u8, 178u8, 155u8, 145u8, 49u8,
                            196u8, 214u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod session {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "Error for the session pallet."]
        pub type Error = runtime_types::pallet_session::pallet::Error;
        #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
        pub type Call = runtime_types::pallet_session::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "See [`Pallet::set_keys`]."]
                pub struct SetKeys {
                    pub keys: set_keys::Keys,
                    pub proof: set_keys::Proof,
                }
                pub mod set_keys {
                    use super::runtime_types;
                    pub type Keys = runtime_types::bridge_hub_rococo_runtime::SessionKeys;
                    pub type Proof = ::std::vec::Vec<::core::primitive::u8>;
                }
                impl ::subxt::blocks::StaticExtrinsic for SetKeys {
                    const PALLET: &'static str = "Session";
                    const CALL: &'static str = "set_keys";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "See [`Pallet::purge_keys`]."]
                pub struct PurgeKeys;
                impl ::subxt::blocks::StaticExtrinsic for PurgeKeys {
                    const PALLET: &'static str = "Session";
                    const CALL: &'static str = "purge_keys";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "See [`Pallet::set_keys`]."]
                pub fn set_keys(
                    &self,
                    keys: types::set_keys::Keys,
                    proof: types::set_keys::Proof,
                ) -> ::subxt::tx::Payload<types::SetKeys> {
                    ::subxt::tx::Payload::new_static(
                        "Session",
                        "set_keys",
                        types::SetKeys { keys, proof },
                        [
                            10u8, 183u8, 202u8, 82u8, 236u8, 202u8, 212u8, 220u8, 51u8, 217u8,
                            229u8, 169u8, 238u8, 141u8, 129u8, 231u8, 203u8, 176u8, 97u8, 148u8,
                            240u8, 87u8, 177u8, 245u8, 33u8, 109u8, 243u8, 52u8, 46u8, 118u8,
                            164u8, 35u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::purge_keys`]."]
                pub fn purge_keys(&self) -> ::subxt::tx::Payload<types::PurgeKeys> {
                    ::subxt::tx::Payload::new_static(
                        "Session",
                        "purge_keys",
                        types::PurgeKeys {},
                        [
                            215u8, 204u8, 146u8, 236u8, 32u8, 78u8, 198u8, 79u8, 85u8, 214u8, 15u8,
                            151u8, 158u8, 31u8, 146u8, 119u8, 119u8, 204u8, 151u8, 169u8, 226u8,
                            67u8, 217u8, 39u8, 241u8, 245u8, 203u8, 240u8, 203u8, 172u8, 16u8,
                            209u8,
                        ],
                    )
                }
            }
        }
        #[doc = "The `Event` enum of this pallet"]
        pub type Event = runtime_types::pallet_session::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "New session has happened. Note that the argument is the session index, not the"]
            #[doc = "block number as the type might suggest."]
            pub struct NewSession {
                pub session_index: new_session::SessionIndex,
            }
            pub mod new_session {
                use super::runtime_types;
                pub type SessionIndex = ::core::primitive::u32;
            }
            impl ::subxt::events::StaticEvent for NewSession {
                const PALLET: &'static str = "Session";
                const EVENT: &'static str = "NewSession";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub mod types {
                use super::runtime_types;
                pub mod validators {
                    use super::runtime_types;
                    pub type Validators = ::std::vec::Vec<::subxt::utils::AccountId32>;
                }
                pub mod current_index {
                    use super::runtime_types;
                    pub type CurrentIndex = ::core::primitive::u32;
                }
                pub mod queued_changed {
                    use super::runtime_types;
                    pub type QueuedChanged = ::core::primitive::bool;
                }
                pub mod queued_keys {
                    use super::runtime_types;
                    pub type QueuedKeys = ::std::vec::Vec<(
                        ::subxt::utils::AccountId32,
                        runtime_types::bridge_hub_rococo_runtime::SessionKeys,
                    )>;
                }
                pub mod disabled_validators {
                    use super::runtime_types;
                    pub type DisabledValidators = ::std::vec::Vec<::core::primitive::u32>;
                }
                pub mod next_keys {
                    use super::runtime_types;
                    pub type NextKeys = runtime_types::bridge_hub_rococo_runtime::SessionKeys;
                    pub type Param0 = ::subxt::utils::AccountId32;
                }
                pub mod key_owner {
                    use super::runtime_types;
                    pub type KeyOwner = ::subxt::utils::AccountId32;
                    pub type Param0 = runtime_types::sp_core::crypto::KeyTypeId;
                    pub type Param1 = [::core::primitive::u8];
                }
            }
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " The current set of validators."]
                pub fn validators(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::validators::Validators,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Session",
                        "Validators",
                        vec![],
                        [
                            50u8, 86u8, 154u8, 222u8, 249u8, 209u8, 156u8, 22u8, 155u8, 25u8,
                            133u8, 194u8, 210u8, 50u8, 38u8, 28u8, 139u8, 201u8, 90u8, 139u8,
                            115u8, 12u8, 12u8, 141u8, 4u8, 178u8, 201u8, 241u8, 223u8, 234u8, 6u8,
                            86u8,
                        ],
                    )
                }
                #[doc = " Current index of the session."]
                pub fn current_index(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::current_index::CurrentIndex,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Session",
                        "CurrentIndex",
                        vec![],
                        [
                            167u8, 151u8, 125u8, 150u8, 159u8, 21u8, 78u8, 217u8, 237u8, 183u8,
                            135u8, 65u8, 187u8, 114u8, 188u8, 206u8, 16u8, 32u8, 69u8, 208u8,
                            134u8, 159u8, 232u8, 224u8, 243u8, 27u8, 31u8, 166u8, 145u8, 44u8,
                            221u8, 230u8,
                        ],
                    )
                }
                #[doc = " True if the underlying economic identities or weighting behind the validators"]
                #[doc = " has changed in the queued validator set."]
                pub fn queued_changed(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::queued_changed::QueuedChanged,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Session",
                        "QueuedChanged",
                        vec![],
                        [
                            184u8, 137u8, 224u8, 137u8, 31u8, 236u8, 95u8, 164u8, 102u8, 225u8,
                            198u8, 227u8, 140u8, 37u8, 113u8, 57u8, 59u8, 4u8, 202u8, 102u8, 117u8,
                            36u8, 226u8, 64u8, 113u8, 141u8, 199u8, 111u8, 99u8, 144u8, 198u8,
                            153u8,
                        ],
                    )
                }
                #[doc = " The queued keys for the next session. When the next session begins, these keys"]
                #[doc = " will be used to determine the validator's session keys."]
                pub fn queued_keys(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::queued_keys::QueuedKeys,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Session",
                        "QueuedKeys",
                        vec![],
                        [
                            3u8, 214u8, 191u8, 168u8, 90u8, 94u8, 107u8, 111u8, 170u8, 31u8, 78u8,
                            61u8, 240u8, 184u8, 170u8, 104u8, 178u8, 229u8, 159u8, 89u8, 207u8,
                            37u8, 49u8, 209u8, 131u8, 165u8, 14u8, 169u8, 13u8, 68u8, 151u8, 144u8,
                        ],
                    )
                }
                #[doc = " Indices of disabled validators."]
                #[doc = ""]
                #[doc = " The vec is always kept sorted so that we can find whether a given validator is"]
                #[doc = " disabled using binary search. It gets cleared when `on_session_ending` returns"]
                #[doc = " a new set of identities."]
                pub fn disabled_validators(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::disabled_validators::DisabledValidators,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Session",
                        "DisabledValidators",
                        vec![],
                        [
                            213u8, 19u8, 168u8, 234u8, 187u8, 200u8, 180u8, 97u8, 234u8, 189u8,
                            36u8, 233u8, 158u8, 184u8, 45u8, 35u8, 129u8, 213u8, 133u8, 8u8, 104u8,
                            183u8, 46u8, 68u8, 154u8, 240u8, 132u8, 22u8, 247u8, 11u8, 54u8, 221u8,
                        ],
                    )
                }
                #[doc = " The next session keys for a validator."]
                pub fn next_keys_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::next_keys::NextKeys,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Session",
                        "NextKeys",
                        vec![],
                        [
                            193u8, 216u8, 53u8, 103u8, 143u8, 241u8, 201u8, 54u8, 108u8, 149u8,
                            241u8, 42u8, 3u8, 151u8, 223u8, 246u8, 30u8, 6u8, 239u8, 206u8, 27u8,
                            172u8, 43u8, 226u8, 177u8, 111u8, 203u8, 78u8, 49u8, 34u8, 200u8, 6u8,
                        ],
                    )
                }
                #[doc = " The next session keys for a validator."]
                pub fn next_keys(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::next_keys::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::next_keys::NextKeys,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Session",
                        "NextKeys",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            193u8, 216u8, 53u8, 103u8, 143u8, 241u8, 201u8, 54u8, 108u8, 149u8,
                            241u8, 42u8, 3u8, 151u8, 223u8, 246u8, 30u8, 6u8, 239u8, 206u8, 27u8,
                            172u8, 43u8, 226u8, 177u8, 111u8, 203u8, 78u8, 49u8, 34u8, 200u8, 6u8,
                        ],
                    )
                }
                #[doc = " The owner of a key. The key is the `KeyTypeId` + the encoded key."]
                pub fn key_owner_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::key_owner::KeyOwner,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Session",
                        "KeyOwner",
                        vec![],
                        [
                            217u8, 204u8, 21u8, 114u8, 247u8, 129u8, 32u8, 242u8, 93u8, 91u8,
                            253u8, 253u8, 248u8, 90u8, 12u8, 202u8, 195u8, 25u8, 18u8, 100u8,
                            253u8, 109u8, 88u8, 77u8, 217u8, 140u8, 51u8, 40u8, 118u8, 35u8, 107u8,
                            206u8,
                        ],
                    )
                }
                #[doc = " The owner of a key. The key is the `KeyTypeId` + the encoded key."]
                pub fn key_owner_iter1(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::key_owner::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::key_owner::KeyOwner,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Session",
                        "KeyOwner",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            217u8, 204u8, 21u8, 114u8, 247u8, 129u8, 32u8, 242u8, 93u8, 91u8,
                            253u8, 253u8, 248u8, 90u8, 12u8, 202u8, 195u8, 25u8, 18u8, 100u8,
                            253u8, 109u8, 88u8, 77u8, 217u8, 140u8, 51u8, 40u8, 118u8, 35u8, 107u8,
                            206u8,
                        ],
                    )
                }
                #[doc = " The owner of a key. The key is the `KeyTypeId` + the encoded key."]
                pub fn key_owner(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::key_owner::Param0>,
                    _1: impl ::std::borrow::Borrow<types::key_owner::Param1>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::key_owner::KeyOwner,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Session",
                        "KeyOwner",
                        vec![
                            ::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
                            ::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
                        ],
                        [
                            217u8, 204u8, 21u8, 114u8, 247u8, 129u8, 32u8, 242u8, 93u8, 91u8,
                            253u8, 253u8, 248u8, 90u8, 12u8, 202u8, 195u8, 25u8, 18u8, 100u8,
                            253u8, 109u8, 88u8, 77u8, 217u8, 140u8, 51u8, 40u8, 118u8, 35u8, 107u8,
                            206u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod aura {
        use super::root_mod;
        use super::runtime_types;
        pub mod storage {
            use super::runtime_types;
            pub mod types {
                use super::runtime_types;
                pub mod authorities {
                    use super::runtime_types;
                    pub type Authorities =
                        runtime_types::bounded_collections::bounded_vec::BoundedVec<
                            runtime_types::sp_consensus_aura::sr25519::app_sr25519::Public,
                        >;
                }
                pub mod current_slot {
                    use super::runtime_types;
                    pub type CurrentSlot = runtime_types::sp_consensus_slots::Slot;
                }
            }
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " The current authority set."]
                pub fn authorities(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::authorities::Authorities,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Aura",
                        "Authorities",
                        vec![],
                        [
                            232u8, 129u8, 167u8, 104u8, 47u8, 188u8, 238u8, 164u8, 6u8, 29u8,
                            129u8, 45u8, 64u8, 182u8, 194u8, 47u8, 0u8, 73u8, 63u8, 102u8, 204u8,
                            94u8, 111u8, 96u8, 137u8, 7u8, 141u8, 110u8, 180u8, 80u8, 228u8, 16u8,
                        ],
                    )
                }
                #[doc = " The current slot of this block."]
                #[doc = ""]
                #[doc = " This will be set in `on_initialize`."]
                pub fn current_slot(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::current_slot::CurrentSlot,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Aura",
                        "CurrentSlot",
                        vec![],
                        [
                            112u8, 199u8, 115u8, 248u8, 217u8, 242u8, 45u8, 231u8, 178u8, 53u8,
                            236u8, 167u8, 219u8, 238u8, 81u8, 243u8, 39u8, 140u8, 68u8, 19u8,
                            201u8, 169u8, 211u8, 133u8, 135u8, 213u8, 150u8, 105u8, 60u8, 252u8,
                            43u8, 57u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod aura_ext {
        use super::root_mod;
        use super::runtime_types;
        pub mod storage {
            use super::runtime_types;
            pub mod types {
                use super::runtime_types;
                pub mod authorities {
                    use super::runtime_types;
                    pub type Authorities =
                        runtime_types::bounded_collections::bounded_vec::BoundedVec<
                            runtime_types::sp_consensus_aura::sr25519::app_sr25519::Public,
                        >;
                }
                pub mod slot_info {
                    use super::runtime_types;
                    pub type SlotInfo = (
                        runtime_types::sp_consensus_slots::Slot,
                        ::core::primitive::u32,
                    );
                }
            }
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " Serves as cache for the authorities."]
                #[doc = ""]
                #[doc = " The authorities in AuRa are overwritten in `on_initialize` when we switch to a new session,"]
                #[doc = " but we require the old authorities to verify the seal when validating a PoV. This will"]
                #[doc = " always be updated to the latest AuRa authorities in `on_finalize`."]
                pub fn authorities(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::authorities::Authorities,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "AuraExt",
                        "Authorities",
                        vec![],
                        [
                            232u8, 129u8, 167u8, 104u8, 47u8, 188u8, 238u8, 164u8, 6u8, 29u8,
                            129u8, 45u8, 64u8, 182u8, 194u8, 47u8, 0u8, 73u8, 63u8, 102u8, 204u8,
                            94u8, 111u8, 96u8, 137u8, 7u8, 141u8, 110u8, 180u8, 80u8, 228u8, 16u8,
                        ],
                    )
                }
                #[doc = " Current slot paired with a number of authored blocks."]
                #[doc = ""]
                #[doc = " Updated on each block initialization."]
                pub fn slot_info(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::slot_info::SlotInfo,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "AuraExt",
                        "SlotInfo",
                        vec![],
                        [
                            135u8, 135u8, 71u8, 123u8, 102u8, 223u8, 215u8, 76u8, 183u8, 169u8,
                            108u8, 60u8, 122u8, 5u8, 24u8, 201u8, 96u8, 59u8, 132u8, 95u8, 253u8,
                            100u8, 148u8, 184u8, 133u8, 146u8, 101u8, 201u8, 91u8, 30u8, 76u8,
                            169u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod xcmp_queue {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "The `Error` enum of this pallet."]
        pub type Error = runtime_types::cumulus_pallet_xcmp_queue::pallet::Error;
        #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
        pub type Call = runtime_types::cumulus_pallet_xcmp_queue::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "See [`Pallet::suspend_xcm_execution`]."]
                pub struct SuspendXcmExecution;
                impl ::subxt::blocks::StaticExtrinsic for SuspendXcmExecution {
                    const PALLET: &'static str = "XcmpQueue";
                    const CALL: &'static str = "suspend_xcm_execution";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "See [`Pallet::resume_xcm_execution`]."]
                pub struct ResumeXcmExecution;
                impl ::subxt::blocks::StaticExtrinsic for ResumeXcmExecution {
                    const PALLET: &'static str = "XcmpQueue";
                    const CALL: &'static str = "resume_xcm_execution";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "See [`Pallet::update_suspend_threshold`]."]
                pub struct UpdateSuspendThreshold {
                    pub new: update_suspend_threshold::New,
                }
                pub mod update_suspend_threshold {
                    use super::runtime_types;
                    pub type New = ::core::primitive::u32;
                }
                impl ::subxt::blocks::StaticExtrinsic for UpdateSuspendThreshold {
                    const PALLET: &'static str = "XcmpQueue";
                    const CALL: &'static str = "update_suspend_threshold";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "See [`Pallet::update_drop_threshold`]."]
                pub struct UpdateDropThreshold {
                    pub new: update_drop_threshold::New,
                }
                pub mod update_drop_threshold {
                    use super::runtime_types;
                    pub type New = ::core::primitive::u32;
                }
                impl ::subxt::blocks::StaticExtrinsic for UpdateDropThreshold {
                    const PALLET: &'static str = "XcmpQueue";
                    const CALL: &'static str = "update_drop_threshold";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "See [`Pallet::update_resume_threshold`]."]
                pub struct UpdateResumeThreshold {
                    pub new: update_resume_threshold::New,
                }
                pub mod update_resume_threshold {
                    use super::runtime_types;
                    pub type New = ::core::primitive::u32;
                }
                impl ::subxt::blocks::StaticExtrinsic for UpdateResumeThreshold {
                    const PALLET: &'static str = "XcmpQueue";
                    const CALL: &'static str = "update_resume_threshold";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "See [`Pallet::suspend_xcm_execution`]."]
                pub fn suspend_xcm_execution(
                    &self,
                ) -> ::subxt::tx::Payload<types::SuspendXcmExecution> {
                    ::subxt::tx::Payload::new_static(
                        "XcmpQueue",
                        "suspend_xcm_execution",
                        types::SuspendXcmExecution {},
                        [
                            54u8, 120u8, 33u8, 251u8, 74u8, 56u8, 29u8, 76u8, 104u8, 218u8, 115u8,
                            198u8, 148u8, 237u8, 9u8, 191u8, 241u8, 48u8, 33u8, 24u8, 60u8, 144u8,
                            22u8, 78u8, 58u8, 50u8, 26u8, 188u8, 231u8, 42u8, 201u8, 76u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::resume_xcm_execution`]."]
                pub fn resume_xcm_execution(
                    &self,
                ) -> ::subxt::tx::Payload<types::ResumeXcmExecution> {
                    ::subxt::tx::Payload::new_static(
                        "XcmpQueue",
                        "resume_xcm_execution",
                        types::ResumeXcmExecution {},
                        [
                            173u8, 231u8, 78u8, 253u8, 108u8, 234u8, 199u8, 124u8, 184u8, 154u8,
                            95u8, 194u8, 13u8, 77u8, 175u8, 7u8, 7u8, 112u8, 161u8, 72u8, 133u8,
                            71u8, 63u8, 218u8, 97u8, 226u8, 133u8, 6u8, 93u8, 177u8, 247u8, 109u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::update_suspend_threshold`]."]
                pub fn update_suspend_threshold(
                    &self,
                    new: types::update_suspend_threshold::New,
                ) -> ::subxt::tx::Payload<types::UpdateSuspendThreshold> {
                    ::subxt::tx::Payload::new_static(
                        "XcmpQueue",
                        "update_suspend_threshold",
                        types::UpdateSuspendThreshold { new },
                        [
                            64u8, 91u8, 172u8, 51u8, 220u8, 174u8, 54u8, 47u8, 57u8, 89u8, 75u8,
                            39u8, 126u8, 198u8, 143u8, 35u8, 70u8, 125u8, 167u8, 14u8, 17u8, 18u8,
                            146u8, 222u8, 100u8, 92u8, 81u8, 239u8, 173u8, 43u8, 42u8, 174u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::update_drop_threshold`]."]
                pub fn update_drop_threshold(
                    &self,
                    new: types::update_drop_threshold::New,
                ) -> ::subxt::tx::Payload<types::UpdateDropThreshold> {
                    ::subxt::tx::Payload::new_static(
                        "XcmpQueue",
                        "update_drop_threshold",
                        types::UpdateDropThreshold { new },
                        [
                            123u8, 54u8, 12u8, 180u8, 165u8, 198u8, 141u8, 200u8, 149u8, 168u8,
                            186u8, 237u8, 162u8, 91u8, 89u8, 242u8, 229u8, 16u8, 32u8, 254u8, 59u8,
                            168u8, 31u8, 134u8, 217u8, 251u8, 0u8, 102u8, 113u8, 194u8, 175u8, 9u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::update_resume_threshold`]."]
                pub fn update_resume_threshold(
                    &self,
                    new: types::update_resume_threshold::New,
                ) -> ::subxt::tx::Payload<types::UpdateResumeThreshold> {
                    ::subxt::tx::Payload::new_static(
                        "XcmpQueue",
                        "update_resume_threshold",
                        types::UpdateResumeThreshold { new },
                        [
                            172u8, 136u8, 11u8, 106u8, 42u8, 157u8, 167u8, 183u8, 87u8, 62u8,
                            182u8, 17u8, 184u8, 59u8, 215u8, 230u8, 18u8, 243u8, 212u8, 34u8, 54u8,
                            188u8, 95u8, 119u8, 173u8, 20u8, 91u8, 206u8, 212u8, 57u8, 136u8, 77u8,
                        ],
                    )
                }
            }
        }
        #[doc = "The `Event` enum of this pallet"]
        pub type Event = runtime_types::cumulus_pallet_xcmp_queue::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "An HRMP message was sent to a sibling parachain."]
            pub struct XcmpMessageSent {
                pub message_hash: xcmp_message_sent::MessageHash,
            }
            pub mod xcmp_message_sent {
                use super::runtime_types;
                pub type MessageHash = [::core::primitive::u8; 32usize];
            }
            impl ::subxt::events::StaticEvent for XcmpMessageSent {
                const PALLET: &'static str = "XcmpQueue";
                const EVENT: &'static str = "XcmpMessageSent";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub mod types {
                use super::runtime_types;
                pub mod inbound_xcmp_suspended {
                    use super::runtime_types;
                    pub type InboundXcmpSuspended =
                        runtime_types::bounded_collections::bounded_btree_set::BoundedBTreeSet<
                            runtime_types::polkadot_parachain_primitives::primitives::Id,
                        >;
                }
                pub mod outbound_xcmp_status {
                    use super::runtime_types;
                    pub type OutboundXcmpStatus = ::std::vec::Vec<
                        runtime_types::cumulus_pallet_xcmp_queue::OutboundChannelDetails,
                    >;
                }
                pub mod outbound_xcmp_messages {
                    use super::runtime_types;
                    pub type OutboundXcmpMessages = ::std::vec::Vec<::core::primitive::u8>;
                    pub type Param0 = runtime_types::polkadot_parachain_primitives::primitives::Id;
                    pub type Param1 = ::core::primitive::u16;
                }
                pub mod signal_messages {
                    use super::runtime_types;
                    pub type SignalMessages = ::std::vec::Vec<::core::primitive::u8>;
                    pub type Param0 = runtime_types::polkadot_parachain_primitives::primitives::Id;
                }
                pub mod queue_config {
                    use super::runtime_types;
                    pub type QueueConfig =
                        runtime_types::cumulus_pallet_xcmp_queue::QueueConfigData;
                }
                pub mod queue_suspended {
                    use super::runtime_types;
                    pub type QueueSuspended = ::core::primitive::bool;
                }
                pub mod delivery_fee_factor {
                    use super::runtime_types;
                    pub type DeliveryFeeFactor =
                        runtime_types::sp_arithmetic::fixed_point::FixedU128;
                    pub type Param0 = runtime_types::polkadot_parachain_primitives::primitives::Id;
                }
            }
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " The suspended inbound XCMP channels. All others are not suspended."]
                #[doc = ""]
                #[doc = " This is a `StorageValue` instead of a `StorageMap` since we expect multiple reads per block"]
                #[doc = " to different keys with a one byte payload. The access to `BoundedBTreeSet` will be cached"]
                #[doc = " within the block and therefore only included once in the proof size."]
                #[doc = ""]
                #[doc = " NOTE: The PoV benchmarking cannot know this and will over-estimate, but the actual proof"]
                #[doc = " will be smaller."]
                pub fn inbound_xcmp_suspended(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::inbound_xcmp_suspended::InboundXcmpSuspended,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "XcmpQueue",
                        "InboundXcmpSuspended",
                        vec![],
                        [
                            110u8, 23u8, 239u8, 104u8, 136u8, 224u8, 179u8, 180u8, 40u8, 159u8,
                            54u8, 15u8, 55u8, 111u8, 75u8, 147u8, 131u8, 127u8, 9u8, 57u8, 133u8,
                            70u8, 175u8, 181u8, 232u8, 49u8, 13u8, 19u8, 59u8, 151u8, 179u8, 215u8,
                        ],
                    )
                }
                #[doc = " The non-empty XCMP channels in order of becoming non-empty, and the index of the first"]
                #[doc = " and last outbound message. If the two indices are equal, then it indicates an empty"]
                #[doc = " queue and there must be a non-`Ok` `OutboundStatus`. We assume queues grow no greater"]
                #[doc = " than 65535 items. Queue indices for normal messages begin at one; zero is reserved in"]
                #[doc = " case of the need to send a high-priority signal message this block."]
                #[doc = " The bool is true if there is a signal message waiting to be sent."]
                pub fn outbound_xcmp_status(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::outbound_xcmp_status::OutboundXcmpStatus,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "XcmpQueue",
                        "OutboundXcmpStatus",
                        vec![],
                        [
                            181u8, 5u8, 216u8, 176u8, 154u8, 233u8, 116u8, 14u8, 151u8, 1u8, 114u8,
                            16u8, 42u8, 20u8, 63u8, 233u8, 79u8, 122u8, 87u8, 255u8, 75u8, 149u8,
                            176u8, 106u8, 23u8, 101u8, 228u8, 120u8, 217u8, 167u8, 127u8, 117u8,
                        ],
                    )
                }
                #[doc = " The messages outbound in a given XCMP channel."]
                pub fn outbound_xcmp_messages_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::outbound_xcmp_messages::OutboundXcmpMessages,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "XcmpQueue",
                        "OutboundXcmpMessages",
                        vec![],
                        [
                            156u8, 3u8, 202u8, 175u8, 175u8, 129u8, 38u8, 144u8, 35u8, 59u8, 228u8,
                            159u8, 142u8, 25u8, 19u8, 73u8, 73u8, 6u8, 115u8, 19u8, 236u8, 235u8,
                            144u8, 172u8, 31u8, 168u8, 24u8, 65u8, 115u8, 95u8, 77u8, 63u8,
                        ],
                    )
                }
                #[doc = " The messages outbound in a given XCMP channel."]
                pub fn outbound_xcmp_messages_iter1(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::outbound_xcmp_messages::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::outbound_xcmp_messages::OutboundXcmpMessages,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "XcmpQueue",
                        "OutboundXcmpMessages",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            156u8, 3u8, 202u8, 175u8, 175u8, 129u8, 38u8, 144u8, 35u8, 59u8, 228u8,
                            159u8, 142u8, 25u8, 19u8, 73u8, 73u8, 6u8, 115u8, 19u8, 236u8, 235u8,
                            144u8, 172u8, 31u8, 168u8, 24u8, 65u8, 115u8, 95u8, 77u8, 63u8,
                        ],
                    )
                }
                #[doc = " The messages outbound in a given XCMP channel."]
                pub fn outbound_xcmp_messages(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::outbound_xcmp_messages::Param0>,
                    _1: impl ::std::borrow::Borrow<types::outbound_xcmp_messages::Param1>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::outbound_xcmp_messages::OutboundXcmpMessages,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "XcmpQueue",
                        "OutboundXcmpMessages",
                        vec![
                            ::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
                            ::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
                        ],
                        [
                            156u8, 3u8, 202u8, 175u8, 175u8, 129u8, 38u8, 144u8, 35u8, 59u8, 228u8,
                            159u8, 142u8, 25u8, 19u8, 73u8, 73u8, 6u8, 115u8, 19u8, 236u8, 235u8,
                            144u8, 172u8, 31u8, 168u8, 24u8, 65u8, 115u8, 95u8, 77u8, 63u8,
                        ],
                    )
                }
                #[doc = " Any signal messages waiting to be sent."]
                pub fn signal_messages_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::signal_messages::SignalMessages,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "XcmpQueue",
                        "SignalMessages",
                        vec![],
                        [
                            182u8, 143u8, 233u8, 233u8, 111u8, 137u8, 174u8, 165u8, 166u8, 7u8,
                            229u8, 183u8, 99u8, 108u8, 30u8, 162u8, 71u8, 55u8, 122u8, 124u8,
                            249u8, 203u8, 142u8, 124u8, 158u8, 213u8, 182u8, 159u8, 206u8, 249u8,
                            180u8, 24u8,
                        ],
                    )
                }
                #[doc = " Any signal messages waiting to be sent."]
                pub fn signal_messages(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::signal_messages::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::signal_messages::SignalMessages,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "XcmpQueue",
                        "SignalMessages",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            182u8, 143u8, 233u8, 233u8, 111u8, 137u8, 174u8, 165u8, 166u8, 7u8,
                            229u8, 183u8, 99u8, 108u8, 30u8, 162u8, 71u8, 55u8, 122u8, 124u8,
                            249u8, 203u8, 142u8, 124u8, 158u8, 213u8, 182u8, 159u8, 206u8, 249u8,
                            180u8, 24u8,
                        ],
                    )
                }
                #[doc = " The configuration which controls the dynamics of the outbound queue."]
                pub fn queue_config(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::queue_config::QueueConfig,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "XcmpQueue",
                        "QueueConfig",
                        vec![],
                        [
                            185u8, 67u8, 247u8, 243u8, 211u8, 232u8, 57u8, 240u8, 237u8, 181u8,
                            23u8, 114u8, 215u8, 128u8, 193u8, 1u8, 176u8, 53u8, 110u8, 195u8,
                            148u8, 80u8, 187u8, 143u8, 62u8, 30u8, 143u8, 34u8, 248u8, 109u8, 3u8,
                            141u8,
                        ],
                    )
                }
                #[doc = " Whether or not the XCMP queue is suspended from executing incoming XCMs or not."]
                pub fn queue_suspended(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::queue_suspended::QueueSuspended,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "XcmpQueue",
                        "QueueSuspended",
                        vec![],
                        [
                            165u8, 66u8, 105u8, 244u8, 113u8, 43u8, 177u8, 252u8, 212u8, 243u8,
                            143u8, 184u8, 87u8, 51u8, 163u8, 104u8, 29u8, 84u8, 119u8, 74u8, 233u8,
                            129u8, 203u8, 105u8, 2u8, 101u8, 19u8, 170u8, 69u8, 253u8, 80u8, 132u8,
                        ],
                    )
                }
                #[doc = " The factor to multiply the base delivery fee by."]
                pub fn delivery_fee_factor_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::delivery_fee_factor::DeliveryFeeFactor,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "XcmpQueue",
                        "DeliveryFeeFactor",
                        vec![],
                        [
                            43u8, 5u8, 63u8, 235u8, 115u8, 155u8, 130u8, 27u8, 75u8, 216u8, 177u8,
                            135u8, 203u8, 147u8, 167u8, 95u8, 208u8, 188u8, 25u8, 14u8, 84u8, 63u8,
                            116u8, 41u8, 148u8, 110u8, 115u8, 215u8, 196u8, 36u8, 75u8, 102u8,
                        ],
                    )
                }
                #[doc = " The factor to multiply the base delivery fee by."]
                pub fn delivery_fee_factor(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::delivery_fee_factor::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::delivery_fee_factor::DeliveryFeeFactor,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "XcmpQueue",
                        "DeliveryFeeFactor",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            43u8, 5u8, 63u8, 235u8, 115u8, 155u8, 130u8, 27u8, 75u8, 216u8, 177u8,
                            135u8, 203u8, 147u8, 167u8, 95u8, 208u8, 188u8, 25u8, 14u8, 84u8, 63u8,
                            116u8, 41u8, 148u8, 110u8, 115u8, 215u8, 196u8, 36u8, 75u8, 102u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                #[doc = " The maximum number of inbound XCMP channels that can be suspended simultaneously."]
                #[doc = ""]
                #[doc = " Any further channel suspensions will fail and messages may get dropped without further"]
                #[doc = " notice. Choosing a high value (1000) is okay; the trade-off that is described in"]
                #[doc = " [`InboundXcmpSuspended`] still applies at that scale."]
                pub fn max_inbound_suspended(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "XcmpQueue",
                        "MaxInboundSuspended",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod polkadot_xcm {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "The `Error` enum of this pallet."]
        pub type Error = runtime_types::pallet_xcm::pallet::Error;
        #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
        pub type Call = runtime_types::pallet_xcm::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "See [`Pallet::send`]."]
                pub struct Send {
                    pub dest: ::std::boxed::Box<send::Dest>,
                    pub message: ::std::boxed::Box<send::Message>,
                }
                pub mod send {
                    use super::runtime_types;
                    pub type Dest = runtime_types::xcm::VersionedLocation;
                    pub type Message = runtime_types::xcm::VersionedXcm;
                }
                impl ::subxt::blocks::StaticExtrinsic for Send {
                    const PALLET: &'static str = "PolkadotXcm";
                    const CALL: &'static str = "send";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "See [`Pallet::teleport_assets`]."]
                pub struct TeleportAssets {
                    pub dest: ::std::boxed::Box<teleport_assets::Dest>,
                    pub beneficiary: ::std::boxed::Box<teleport_assets::Beneficiary>,
                    pub assets: ::std::boxed::Box<teleport_assets::Assets>,
                    pub fee_asset_item: teleport_assets::FeeAssetItem,
                }
                pub mod teleport_assets {
                    use super::runtime_types;
                    pub type Dest = runtime_types::xcm::VersionedLocation;
                    pub type Beneficiary = runtime_types::xcm::VersionedLocation;
                    pub type Assets = runtime_types::xcm::VersionedAssets;
                    pub type FeeAssetItem = ::core::primitive::u32;
                }
                impl ::subxt::blocks::StaticExtrinsic for TeleportAssets {
                    const PALLET: &'static str = "PolkadotXcm";
                    const CALL: &'static str = "teleport_assets";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "See [`Pallet::reserve_transfer_assets`]."]
                pub struct ReserveTransferAssets {
                    pub dest: ::std::boxed::Box<reserve_transfer_assets::Dest>,
                    pub beneficiary: ::std::boxed::Box<reserve_transfer_assets::Beneficiary>,
                    pub assets: ::std::boxed::Box<reserve_transfer_assets::Assets>,
                    pub fee_asset_item: reserve_transfer_assets::FeeAssetItem,
                }
                pub mod reserve_transfer_assets {
                    use super::runtime_types;
                    pub type Dest = runtime_types::xcm::VersionedLocation;
                    pub type Beneficiary = runtime_types::xcm::VersionedLocation;
                    pub type Assets = runtime_types::xcm::VersionedAssets;
                    pub type FeeAssetItem = ::core::primitive::u32;
                }
                impl ::subxt::blocks::StaticExtrinsic for ReserveTransferAssets {
                    const PALLET: &'static str = "PolkadotXcm";
                    const CALL: &'static str = "reserve_transfer_assets";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "See [`Pallet::execute`]."]
                pub struct Execute {
                    pub message: ::std::boxed::Box<execute::Message>,
                    pub max_weight: execute::MaxWeight,
                }
                pub mod execute {
                    use super::runtime_types;
                    pub type Message = runtime_types::xcm::VersionedXcm2;
                    pub type MaxWeight = runtime_types::sp_weights::weight_v2::Weight;
                }
                impl ::subxt::blocks::StaticExtrinsic for Execute {
                    const PALLET: &'static str = "PolkadotXcm";
                    const CALL: &'static str = "execute";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "See [`Pallet::force_xcm_version`]."]
                pub struct ForceXcmVersion {
                    pub location: ::std::boxed::Box<force_xcm_version::Location>,
                    pub version: force_xcm_version::Version,
                }
                pub mod force_xcm_version {
                    use super::runtime_types;
                    pub type Location = runtime_types::staging_xcm::v4::location::Location;
                    pub type Version = ::core::primitive::u32;
                }
                impl ::subxt::blocks::StaticExtrinsic for ForceXcmVersion {
                    const PALLET: &'static str = "PolkadotXcm";
                    const CALL: &'static str = "force_xcm_version";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "See [`Pallet::force_default_xcm_version`]."]
                pub struct ForceDefaultXcmVersion {
                    pub maybe_xcm_version: force_default_xcm_version::MaybeXcmVersion,
                }
                pub mod force_default_xcm_version {
                    use super::runtime_types;
                    pub type MaybeXcmVersion = ::core::option::Option<::core::primitive::u32>;
                }
                impl ::subxt::blocks::StaticExtrinsic for ForceDefaultXcmVersion {
                    const PALLET: &'static str = "PolkadotXcm";
                    const CALL: &'static str = "force_default_xcm_version";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "See [`Pallet::force_subscribe_version_notify`]."]
                pub struct ForceSubscribeVersionNotify {
                    pub location: ::std::boxed::Box<force_subscribe_version_notify::Location>,
                }
                pub mod force_subscribe_version_notify {
                    use super::runtime_types;
                    pub type Location = runtime_types::xcm::VersionedLocation;
                }
                impl ::subxt::blocks::StaticExtrinsic for ForceSubscribeVersionNotify {
                    const PALLET: &'static str = "PolkadotXcm";
                    const CALL: &'static str = "force_subscribe_version_notify";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "See [`Pallet::force_unsubscribe_version_notify`]."]
                pub struct ForceUnsubscribeVersionNotify {
                    pub location: ::std::boxed::Box<force_unsubscribe_version_notify::Location>,
                }
                pub mod force_unsubscribe_version_notify {
                    use super::runtime_types;
                    pub type Location = runtime_types::xcm::VersionedLocation;
                }
                impl ::subxt::blocks::StaticExtrinsic for ForceUnsubscribeVersionNotify {
                    const PALLET: &'static str = "PolkadotXcm";
                    const CALL: &'static str = "force_unsubscribe_version_notify";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "See [`Pallet::limited_reserve_transfer_assets`]."]
                pub struct LimitedReserveTransferAssets {
                    pub dest: ::std::boxed::Box<limited_reserve_transfer_assets::Dest>,
                    pub beneficiary:
                        ::std::boxed::Box<limited_reserve_transfer_assets::Beneficiary>,
                    pub assets: ::std::boxed::Box<limited_reserve_transfer_assets::Assets>,
                    pub fee_asset_item: limited_reserve_transfer_assets::FeeAssetItem,
                    pub weight_limit: limited_reserve_transfer_assets::WeightLimit,
                }
                pub mod limited_reserve_transfer_assets {
                    use super::runtime_types;
                    pub type Dest = runtime_types::xcm::VersionedLocation;
                    pub type Beneficiary = runtime_types::xcm::VersionedLocation;
                    pub type Assets = runtime_types::xcm::VersionedAssets;
                    pub type FeeAssetItem = ::core::primitive::u32;
                    pub type WeightLimit = runtime_types::xcm::v3::WeightLimit;
                }
                impl ::subxt::blocks::StaticExtrinsic for LimitedReserveTransferAssets {
                    const PALLET: &'static str = "PolkadotXcm";
                    const CALL: &'static str = "limited_reserve_transfer_assets";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "See [`Pallet::limited_teleport_assets`]."]
                pub struct LimitedTeleportAssets {
                    pub dest: ::std::boxed::Box<limited_teleport_assets::Dest>,
                    pub beneficiary: ::std::boxed::Box<limited_teleport_assets::Beneficiary>,
                    pub assets: ::std::boxed::Box<limited_teleport_assets::Assets>,
                    pub fee_asset_item: limited_teleport_assets::FeeAssetItem,
                    pub weight_limit: limited_teleport_assets::WeightLimit,
                }
                pub mod limited_teleport_assets {
                    use super::runtime_types;
                    pub type Dest = runtime_types::xcm::VersionedLocation;
                    pub type Beneficiary = runtime_types::xcm::VersionedLocation;
                    pub type Assets = runtime_types::xcm::VersionedAssets;
                    pub type FeeAssetItem = ::core::primitive::u32;
                    pub type WeightLimit = runtime_types::xcm::v3::WeightLimit;
                }
                impl ::subxt::blocks::StaticExtrinsic for LimitedTeleportAssets {
                    const PALLET: &'static str = "PolkadotXcm";
                    const CALL: &'static str = "limited_teleport_assets";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "See [`Pallet::force_suspension`]."]
                pub struct ForceSuspension {
                    pub suspended: force_suspension::Suspended,
                }
                pub mod force_suspension {
                    use super::runtime_types;
                    pub type Suspended = ::core::primitive::bool;
                }
                impl ::subxt::blocks::StaticExtrinsic for ForceSuspension {
                    const PALLET: &'static str = "PolkadotXcm";
                    const CALL: &'static str = "force_suspension";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "See [`Pallet::transfer_assets`]."]
                pub struct TransferAssets {
                    pub dest: ::std::boxed::Box<transfer_assets::Dest>,
                    pub beneficiary: ::std::boxed::Box<transfer_assets::Beneficiary>,
                    pub assets: ::std::boxed::Box<transfer_assets::Assets>,
                    pub fee_asset_item: transfer_assets::FeeAssetItem,
                    pub weight_limit: transfer_assets::WeightLimit,
                }
                pub mod transfer_assets {
                    use super::runtime_types;
                    pub type Dest = runtime_types::xcm::VersionedLocation;
                    pub type Beneficiary = runtime_types::xcm::VersionedLocation;
                    pub type Assets = runtime_types::xcm::VersionedAssets;
                    pub type FeeAssetItem = ::core::primitive::u32;
                    pub type WeightLimit = runtime_types::xcm::v3::WeightLimit;
                }
                impl ::subxt::blocks::StaticExtrinsic for TransferAssets {
                    const PALLET: &'static str = "PolkadotXcm";
                    const CALL: &'static str = "transfer_assets";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "See [`Pallet::send`]."]
                pub fn send(
                    &self,
                    dest: types::send::Dest,
                    message: types::send::Message,
                ) -> ::subxt::tx::Payload<types::Send> {
                    ::subxt::tx::Payload::new_static(
                        "PolkadotXcm",
                        "send",
                        types::Send {
                            dest: ::std::boxed::Box::new(dest),
                            message: ::std::boxed::Box::new(message),
                        },
                        [
                            47u8, 63u8, 128u8, 176u8, 10u8, 137u8, 124u8, 238u8, 155u8, 37u8,
                            193u8, 160u8, 83u8, 240u8, 21u8, 179u8, 169u8, 131u8, 27u8, 104u8,
                            195u8, 208u8, 123u8, 14u8, 221u8, 12u8, 45u8, 81u8, 148u8, 76u8, 17u8,
                            100u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::teleport_assets`]."]
                pub fn teleport_assets(
                    &self,
                    dest: types::teleport_assets::Dest,
                    beneficiary: types::teleport_assets::Beneficiary,
                    assets: types::teleport_assets::Assets,
                    fee_asset_item: types::teleport_assets::FeeAssetItem,
                ) -> ::subxt::tx::Payload<types::TeleportAssets> {
                    ::subxt::tx::Payload::new_static(
                        "PolkadotXcm",
                        "teleport_assets",
                        types::TeleportAssets {
                            dest: ::std::boxed::Box::new(dest),
                            beneficiary: ::std::boxed::Box::new(beneficiary),
                            assets: ::std::boxed::Box::new(assets),
                            fee_asset_item,
                        },
                        [
                            124u8, 191u8, 118u8, 61u8, 45u8, 225u8, 97u8, 83u8, 198u8, 20u8, 139u8,
                            117u8, 241u8, 1u8, 19u8, 54u8, 79u8, 181u8, 131u8, 112u8, 11u8, 118u8,
                            147u8, 12u8, 89u8, 156u8, 123u8, 123u8, 195u8, 45u8, 50u8, 107u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::reserve_transfer_assets`]."]
                pub fn reserve_transfer_assets(
                    &self,
                    dest: types::reserve_transfer_assets::Dest,
                    beneficiary: types::reserve_transfer_assets::Beneficiary,
                    assets: types::reserve_transfer_assets::Assets,
                    fee_asset_item: types::reserve_transfer_assets::FeeAssetItem,
                ) -> ::subxt::tx::Payload<types::ReserveTransferAssets> {
                    ::subxt::tx::Payload::new_static(
                        "PolkadotXcm",
                        "reserve_transfer_assets",
                        types::ReserveTransferAssets {
                            dest: ::std::boxed::Box::new(dest),
                            beneficiary: ::std::boxed::Box::new(beneficiary),
                            assets: ::std::boxed::Box::new(assets),
                            fee_asset_item,
                        },
                        [
                            97u8, 102u8, 230u8, 44u8, 135u8, 197u8, 43u8, 53u8, 182u8, 125u8,
                            140u8, 141u8, 229u8, 73u8, 29u8, 55u8, 159u8, 104u8, 197u8, 20u8,
                            124u8, 234u8, 250u8, 94u8, 133u8, 253u8, 189u8, 6u8, 216u8, 162u8,
                            218u8, 89u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::execute`]."]
                pub fn execute(
                    &self,
                    message: types::execute::Message,
                    max_weight: types::execute::MaxWeight,
                ) -> ::subxt::tx::Payload<types::Execute> {
                    ::subxt::tx::Payload::new_static(
                        "PolkadotXcm",
                        "execute",
                        types::Execute {
                            message: ::std::boxed::Box::new(message),
                            max_weight,
                        },
                        [
                            71u8, 109u8, 92u8, 110u8, 198u8, 150u8, 140u8, 125u8, 248u8, 236u8,
                            177u8, 156u8, 198u8, 223u8, 51u8, 15u8, 52u8, 240u8, 20u8, 200u8, 68u8,
                            145u8, 36u8, 156u8, 159u8, 153u8, 125u8, 48u8, 181u8, 61u8, 53u8,
                            208u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::force_xcm_version`]."]
                pub fn force_xcm_version(
                    &self,
                    location: types::force_xcm_version::Location,
                    version: types::force_xcm_version::Version,
                ) -> ::subxt::tx::Payload<types::ForceXcmVersion> {
                    ::subxt::tx::Payload::new_static(
                        "PolkadotXcm",
                        "force_xcm_version",
                        types::ForceXcmVersion {
                            location: ::std::boxed::Box::new(location),
                            version,
                        },
                        [
                            69u8, 151u8, 198u8, 154u8, 69u8, 181u8, 41u8, 111u8, 145u8, 230u8,
                            103u8, 42u8, 237u8, 91u8, 235u8, 6u8, 156u8, 65u8, 187u8, 48u8, 171u8,
                            200u8, 49u8, 4u8, 9u8, 210u8, 229u8, 152u8, 187u8, 88u8, 80u8, 246u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::force_default_xcm_version`]."]
                pub fn force_default_xcm_version(
                    &self,
                    maybe_xcm_version: types::force_default_xcm_version::MaybeXcmVersion,
                ) -> ::subxt::tx::Payload<types::ForceDefaultXcmVersion> {
                    ::subxt::tx::Payload::new_static(
                        "PolkadotXcm",
                        "force_default_xcm_version",
                        types::ForceDefaultXcmVersion { maybe_xcm_version },
                        [
                            43u8, 114u8, 102u8, 104u8, 209u8, 234u8, 108u8, 173u8, 109u8, 188u8,
                            94u8, 214u8, 136u8, 43u8, 153u8, 75u8, 161u8, 192u8, 76u8, 12u8, 221u8,
                            237u8, 158u8, 247u8, 41u8, 193u8, 35u8, 174u8, 183u8, 207u8, 79u8,
                            213u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::force_subscribe_version_notify`]."]
                pub fn force_subscribe_version_notify(
                    &self,
                    location: types::force_subscribe_version_notify::Location,
                ) -> ::subxt::tx::Payload<types::ForceSubscribeVersionNotify> {
                    ::subxt::tx::Payload::new_static(
                        "PolkadotXcm",
                        "force_subscribe_version_notify",
                        types::ForceSubscribeVersionNotify {
                            location: ::std::boxed::Box::new(location),
                        },
                        [
                            203u8, 171u8, 70u8, 130u8, 46u8, 63u8, 76u8, 50u8, 105u8, 23u8, 249u8,
                            190u8, 115u8, 74u8, 70u8, 125u8, 132u8, 112u8, 138u8, 60u8, 33u8, 35u8,
                            45u8, 29u8, 95u8, 103u8, 187u8, 182u8, 188u8, 196u8, 248u8, 152u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::force_unsubscribe_version_notify`]."]
                pub fn force_unsubscribe_version_notify(
                    &self,
                    location: types::force_unsubscribe_version_notify::Location,
                ) -> ::subxt::tx::Payload<types::ForceUnsubscribeVersionNotify> {
                    ::subxt::tx::Payload::new_static(
                        "PolkadotXcm",
                        "force_unsubscribe_version_notify",
                        types::ForceUnsubscribeVersionNotify {
                            location: ::std::boxed::Box::new(location),
                        },
                        [
                            6u8, 113u8, 168u8, 215u8, 233u8, 202u8, 249u8, 134u8, 131u8, 8u8,
                            142u8, 203u8, 142u8, 95u8, 216u8, 70u8, 38u8, 99u8, 166u8, 97u8, 218u8,
                            132u8, 247u8, 14u8, 42u8, 99u8, 4u8, 115u8, 200u8, 180u8, 213u8, 50u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::limited_reserve_transfer_assets`]."]
                pub fn limited_reserve_transfer_assets(
                    &self,
                    dest: types::limited_reserve_transfer_assets::Dest,
                    beneficiary: types::limited_reserve_transfer_assets::Beneficiary,
                    assets: types::limited_reserve_transfer_assets::Assets,
                    fee_asset_item: types::limited_reserve_transfer_assets::FeeAssetItem,
                    weight_limit: types::limited_reserve_transfer_assets::WeightLimit,
                ) -> ::subxt::tx::Payload<types::LimitedReserveTransferAssets> {
                    ::subxt::tx::Payload::new_static(
                        "PolkadotXcm",
                        "limited_reserve_transfer_assets",
                        types::LimitedReserveTransferAssets {
                            dest: ::std::boxed::Box::new(dest),
                            beneficiary: ::std::boxed::Box::new(beneficiary),
                            assets: ::std::boxed::Box::new(assets),
                            fee_asset_item,
                            weight_limit,
                        },
                        [
                            198u8, 66u8, 204u8, 162u8, 222u8, 246u8, 141u8, 165u8, 241u8, 62u8,
                            43u8, 236u8, 56u8, 200u8, 54u8, 47u8, 174u8, 83u8, 167u8, 220u8, 174u8,
                            111u8, 123u8, 202u8, 248u8, 232u8, 166u8, 80u8, 152u8, 223u8, 86u8,
                            141u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::limited_teleport_assets`]."]
                pub fn limited_teleport_assets(
                    &self,
                    dest: types::limited_teleport_assets::Dest,
                    beneficiary: types::limited_teleport_assets::Beneficiary,
                    assets: types::limited_teleport_assets::Assets,
                    fee_asset_item: types::limited_teleport_assets::FeeAssetItem,
                    weight_limit: types::limited_teleport_assets::WeightLimit,
                ) -> ::subxt::tx::Payload<types::LimitedTeleportAssets> {
                    ::subxt::tx::Payload::new_static(
                        "PolkadotXcm",
                        "limited_teleport_assets",
                        types::LimitedTeleportAssets {
                            dest: ::std::boxed::Box::new(dest),
                            beneficiary: ::std::boxed::Box::new(beneficiary),
                            assets: ::std::boxed::Box::new(assets),
                            fee_asset_item,
                            weight_limit,
                        },
                        [
                            70u8, 61u8, 32u8, 43u8, 101u8, 104u8, 251u8, 60u8, 212u8, 124u8, 113u8,
                            243u8, 241u8, 183u8, 5u8, 231u8, 209u8, 231u8, 136u8, 3u8, 145u8,
                            242u8, 179u8, 171u8, 185u8, 185u8, 7u8, 34u8, 5u8, 203u8, 21u8, 210u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::force_suspension`]."]
                pub fn force_suspension(
                    &self,
                    suspended: types::force_suspension::Suspended,
                ) -> ::subxt::tx::Payload<types::ForceSuspension> {
                    ::subxt::tx::Payload::new_static(
                        "PolkadotXcm",
                        "force_suspension",
                        types::ForceSuspension { suspended },
                        [
                            78u8, 125u8, 93u8, 55u8, 129u8, 44u8, 36u8, 227u8, 75u8, 46u8, 68u8,
                            202u8, 81u8, 127u8, 111u8, 92u8, 149u8, 38u8, 225u8, 185u8, 183u8,
                            154u8, 89u8, 159u8, 79u8, 10u8, 229u8, 1u8, 226u8, 243u8, 65u8, 238u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::transfer_assets`]."]
                pub fn transfer_assets(
                    &self,
                    dest: types::transfer_assets::Dest,
                    beneficiary: types::transfer_assets::Beneficiary,
                    assets: types::transfer_assets::Assets,
                    fee_asset_item: types::transfer_assets::FeeAssetItem,
                    weight_limit: types::transfer_assets::WeightLimit,
                ) -> ::subxt::tx::Payload<types::TransferAssets> {
                    ::subxt::tx::Payload::new_static(
                        "PolkadotXcm",
                        "transfer_assets",
                        types::TransferAssets {
                            dest: ::std::boxed::Box::new(dest),
                            beneficiary: ::std::boxed::Box::new(beneficiary),
                            assets: ::std::boxed::Box::new(assets),
                            fee_asset_item,
                            weight_limit,
                        },
                        [
                            44u8, 155u8, 182u8, 37u8, 123u8, 148u8, 150u8, 191u8, 117u8, 32u8,
                            16u8, 238u8, 121u8, 188u8, 217u8, 110u8, 10u8, 236u8, 174u8, 91u8,
                            100u8, 201u8, 109u8, 109u8, 60u8, 177u8, 233u8, 66u8, 181u8, 191u8,
                            105u8, 37u8,
                        ],
                    )
                }
            }
        }
        #[doc = "The `Event` enum of this pallet"]
        pub type Event = runtime_types::pallet_xcm::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Execution of an XCM message was attempted."]
            pub struct Attempted {
                pub outcome: attempted::Outcome,
            }
            pub mod attempted {
                use super::runtime_types;
                pub type Outcome = runtime_types::staging_xcm::v4::traits::Outcome;
            }
            impl ::subxt::events::StaticEvent for Attempted {
                const PALLET: &'static str = "PolkadotXcm";
                const EVENT: &'static str = "Attempted";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A XCM message was sent."]
            pub struct Sent {
                pub origin: sent::Origin,
                pub destination: sent::Destination,
                pub message: sent::Message,
                pub message_id: sent::MessageId,
            }
            pub mod sent {
                use super::runtime_types;
                pub type Origin = runtime_types::staging_xcm::v4::location::Location;
                pub type Destination = runtime_types::staging_xcm::v4::location::Location;
                pub type Message = runtime_types::staging_xcm::v4::Xcm;
                pub type MessageId = [::core::primitive::u8; 32usize];
            }
            impl ::subxt::events::StaticEvent for Sent {
                const PALLET: &'static str = "PolkadotXcm";
                const EVENT: &'static str = "Sent";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Query response received which does not match a registered query. This may be because a"]
            #[doc = "matching query was never registered, it may be because it is a duplicate response, or"]
            #[doc = "because the query timed out."]
            pub struct UnexpectedResponse {
                pub origin: unexpected_response::Origin,
                pub query_id: unexpected_response::QueryId,
            }
            pub mod unexpected_response {
                use super::runtime_types;
                pub type Origin = runtime_types::staging_xcm::v4::location::Location;
                pub type QueryId = ::core::primitive::u64;
            }
            impl ::subxt::events::StaticEvent for UnexpectedResponse {
                const PALLET: &'static str = "PolkadotXcm";
                const EVENT: &'static str = "UnexpectedResponse";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Query response has been received and is ready for taking with `take_response`. There is"]
            #[doc = "no registered notification call."]
            pub struct ResponseReady {
                pub query_id: response_ready::QueryId,
                pub response: response_ready::Response,
            }
            pub mod response_ready {
                use super::runtime_types;
                pub type QueryId = ::core::primitive::u64;
                pub type Response = runtime_types::staging_xcm::v4::Response;
            }
            impl ::subxt::events::StaticEvent for ResponseReady {
                const PALLET: &'static str = "PolkadotXcm";
                const EVENT: &'static str = "ResponseReady";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Query response has been received and query is removed. The registered notification has"]
            #[doc = "been dispatched and executed successfully."]
            pub struct Notified {
                pub query_id: notified::QueryId,
                pub pallet_index: notified::PalletIndex,
                pub call_index: notified::CallIndex,
            }
            pub mod notified {
                use super::runtime_types;
                pub type QueryId = ::core::primitive::u64;
                pub type PalletIndex = ::core::primitive::u8;
                pub type CallIndex = ::core::primitive::u8;
            }
            impl ::subxt::events::StaticEvent for Notified {
                const PALLET: &'static str = "PolkadotXcm";
                const EVENT: &'static str = "Notified";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Query response has been received and query is removed. The registered notification"]
            #[doc = "could not be dispatched because the dispatch weight is greater than the maximum weight"]
            #[doc = "originally budgeted by this runtime for the query result."]
            pub struct NotifyOverweight {
                pub query_id: notify_overweight::QueryId,
                pub pallet_index: notify_overweight::PalletIndex,
                pub call_index: notify_overweight::CallIndex,
                pub actual_weight: notify_overweight::ActualWeight,
                pub max_budgeted_weight: notify_overweight::MaxBudgetedWeight,
            }
            pub mod notify_overweight {
                use super::runtime_types;
                pub type QueryId = ::core::primitive::u64;
                pub type PalletIndex = ::core::primitive::u8;
                pub type CallIndex = ::core::primitive::u8;
                pub type ActualWeight = runtime_types::sp_weights::weight_v2::Weight;
                pub type MaxBudgetedWeight = runtime_types::sp_weights::weight_v2::Weight;
            }
            impl ::subxt::events::StaticEvent for NotifyOverweight {
                const PALLET: &'static str = "PolkadotXcm";
                const EVENT: &'static str = "NotifyOverweight";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Query response has been received and query is removed. There was a general error with"]
            #[doc = "dispatching the notification call."]
            pub struct NotifyDispatchError {
                pub query_id: notify_dispatch_error::QueryId,
                pub pallet_index: notify_dispatch_error::PalletIndex,
                pub call_index: notify_dispatch_error::CallIndex,
            }
            pub mod notify_dispatch_error {
                use super::runtime_types;
                pub type QueryId = ::core::primitive::u64;
                pub type PalletIndex = ::core::primitive::u8;
                pub type CallIndex = ::core::primitive::u8;
            }
            impl ::subxt::events::StaticEvent for NotifyDispatchError {
                const PALLET: &'static str = "PolkadotXcm";
                const EVENT: &'static str = "NotifyDispatchError";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Query response has been received and query is removed. The dispatch was unable to be"]
            #[doc = "decoded into a `Call`; this might be due to dispatch function having a signature which"]
            #[doc = "is not `(origin, QueryId, Response)`."]
            pub struct NotifyDecodeFailed {
                pub query_id: notify_decode_failed::QueryId,
                pub pallet_index: notify_decode_failed::PalletIndex,
                pub call_index: notify_decode_failed::CallIndex,
            }
            pub mod notify_decode_failed {
                use super::runtime_types;
                pub type QueryId = ::core::primitive::u64;
                pub type PalletIndex = ::core::primitive::u8;
                pub type CallIndex = ::core::primitive::u8;
            }
            impl ::subxt::events::StaticEvent for NotifyDecodeFailed {
                const PALLET: &'static str = "PolkadotXcm";
                const EVENT: &'static str = "NotifyDecodeFailed";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Expected query response has been received but the origin location of the response does"]
            #[doc = "not match that expected. The query remains registered for a later, valid, response to"]
            #[doc = "be received and acted upon."]
            pub struct InvalidResponder {
                pub origin: invalid_responder::Origin,
                pub query_id: invalid_responder::QueryId,
                pub expected_location: invalid_responder::ExpectedLocation,
            }
            pub mod invalid_responder {
                use super::runtime_types;
                pub type Origin = runtime_types::staging_xcm::v4::location::Location;
                pub type QueryId = ::core::primitive::u64;
                pub type ExpectedLocation =
                    ::core::option::Option<runtime_types::staging_xcm::v4::location::Location>;
            }
            impl ::subxt::events::StaticEvent for InvalidResponder {
                const PALLET: &'static str = "PolkadotXcm";
                const EVENT: &'static str = "InvalidResponder";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Expected query response has been received but the expected origin location placed in"]
            #[doc = "storage by this runtime previously cannot be decoded. The query remains registered."]
            #[doc = ""]
            #[doc = "This is unexpected (since a location placed in storage in a previously executing"]
            #[doc = "runtime should be readable prior to query timeout) and dangerous since the possibly"]
            #[doc = "valid response will be dropped. Manual governance intervention is probably going to be"]
            #[doc = "needed."]
            pub struct InvalidResponderVersion {
                pub origin: invalid_responder_version::Origin,
                pub query_id: invalid_responder_version::QueryId,
            }
            pub mod invalid_responder_version {
                use super::runtime_types;
                pub type Origin = runtime_types::staging_xcm::v4::location::Location;
                pub type QueryId = ::core::primitive::u64;
            }
            impl ::subxt::events::StaticEvent for InvalidResponderVersion {
                const PALLET: &'static str = "PolkadotXcm";
                const EVENT: &'static str = "InvalidResponderVersion";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Received query response has been read and removed."]
            pub struct ResponseTaken {
                pub query_id: response_taken::QueryId,
            }
            pub mod response_taken {
                use super::runtime_types;
                pub type QueryId = ::core::primitive::u64;
            }
            impl ::subxt::events::StaticEvent for ResponseTaken {
                const PALLET: &'static str = "PolkadotXcm";
                const EVENT: &'static str = "ResponseTaken";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Some assets have been placed in an asset trap."]
            pub struct AssetsTrapped {
                pub hash: assets_trapped::Hash,
                pub origin: assets_trapped::Origin,
                pub assets: assets_trapped::Assets,
            }
            pub mod assets_trapped {
                use super::runtime_types;
                pub type Hash = ::subxt::utils::H256;
                pub type Origin = runtime_types::staging_xcm::v4::location::Location;
                pub type Assets = runtime_types::xcm::VersionedAssets;
            }
            impl ::subxt::events::StaticEvent for AssetsTrapped {
                const PALLET: &'static str = "PolkadotXcm";
                const EVENT: &'static str = "AssetsTrapped";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "An XCM version change notification message has been attempted to be sent."]
            #[doc = ""]
            #[doc = "The cost of sending it (borne by the chain) is included."]
            pub struct VersionChangeNotified {
                pub destination: version_change_notified::Destination,
                pub result: version_change_notified::Result,
                pub cost: version_change_notified::Cost,
                pub message_id: version_change_notified::MessageId,
            }
            pub mod version_change_notified {
                use super::runtime_types;
                pub type Destination = runtime_types::staging_xcm::v4::location::Location;
                pub type Result = ::core::primitive::u32;
                pub type Cost = runtime_types::staging_xcm::v4::asset::Assets;
                pub type MessageId = [::core::primitive::u8; 32usize];
            }
            impl ::subxt::events::StaticEvent for VersionChangeNotified {
                const PALLET: &'static str = "PolkadotXcm";
                const EVENT: &'static str = "VersionChangeNotified";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "The supported version of a location has been changed. This might be through an"]
            #[doc = "automatic notification or a manual intervention."]
            pub struct SupportedVersionChanged {
                pub location: supported_version_changed::Location,
                pub version: supported_version_changed::Version,
            }
            pub mod supported_version_changed {
                use super::runtime_types;
                pub type Location = runtime_types::staging_xcm::v4::location::Location;
                pub type Version = ::core::primitive::u32;
            }
            impl ::subxt::events::StaticEvent for SupportedVersionChanged {
                const PALLET: &'static str = "PolkadotXcm";
                const EVENT: &'static str = "SupportedVersionChanged";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A given location which had a version change subscription was dropped owing to an error"]
            #[doc = "sending the notification to it."]
            pub struct NotifyTargetSendFail {
                pub location: notify_target_send_fail::Location,
                pub query_id: notify_target_send_fail::QueryId,
                pub error: notify_target_send_fail::Error,
            }
            pub mod notify_target_send_fail {
                use super::runtime_types;
                pub type Location = runtime_types::staging_xcm::v4::location::Location;
                pub type QueryId = ::core::primitive::u64;
                pub type Error = runtime_types::xcm::v3::traits::Error;
            }
            impl ::subxt::events::StaticEvent for NotifyTargetSendFail {
                const PALLET: &'static str = "PolkadotXcm";
                const EVENT: &'static str = "NotifyTargetSendFail";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A given location which had a version change subscription was dropped owing to an error"]
            #[doc = "migrating the location to our new XCM format."]
            pub struct NotifyTargetMigrationFail {
                pub location: notify_target_migration_fail::Location,
                pub query_id: notify_target_migration_fail::QueryId,
            }
            pub mod notify_target_migration_fail {
                use super::runtime_types;
                pub type Location = runtime_types::xcm::VersionedLocation;
                pub type QueryId = ::core::primitive::u64;
            }
            impl ::subxt::events::StaticEvent for NotifyTargetMigrationFail {
                const PALLET: &'static str = "PolkadotXcm";
                const EVENT: &'static str = "NotifyTargetMigrationFail";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Expected query response has been received but the expected querier location placed in"]
            #[doc = "storage by this runtime previously cannot be decoded. The query remains registered."]
            #[doc = ""]
            #[doc = "This is unexpected (since a location placed in storage in a previously executing"]
            #[doc = "runtime should be readable prior to query timeout) and dangerous since the possibly"]
            #[doc = "valid response will be dropped. Manual governance intervention is probably going to be"]
            #[doc = "needed."]
            pub struct InvalidQuerierVersion {
                pub origin: invalid_querier_version::Origin,
                pub query_id: invalid_querier_version::QueryId,
            }
            pub mod invalid_querier_version {
                use super::runtime_types;
                pub type Origin = runtime_types::staging_xcm::v4::location::Location;
                pub type QueryId = ::core::primitive::u64;
            }
            impl ::subxt::events::StaticEvent for InvalidQuerierVersion {
                const PALLET: &'static str = "PolkadotXcm";
                const EVENT: &'static str = "InvalidQuerierVersion";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Expected query response has been received but the querier location of the response does"]
            #[doc = "not match the expected. The query remains registered for a later, valid, response to"]
            #[doc = "be received and acted upon."]
            pub struct InvalidQuerier {
                pub origin: invalid_querier::Origin,
                pub query_id: invalid_querier::QueryId,
                pub expected_querier: invalid_querier::ExpectedQuerier,
                pub maybe_actual_querier: invalid_querier::MaybeActualQuerier,
            }
            pub mod invalid_querier {
                use super::runtime_types;
                pub type Origin = runtime_types::staging_xcm::v4::location::Location;
                pub type QueryId = ::core::primitive::u64;
                pub type ExpectedQuerier = runtime_types::staging_xcm::v4::location::Location;
                pub type MaybeActualQuerier =
                    ::core::option::Option<runtime_types::staging_xcm::v4::location::Location>;
            }
            impl ::subxt::events::StaticEvent for InvalidQuerier {
                const PALLET: &'static str = "PolkadotXcm";
                const EVENT: &'static str = "InvalidQuerier";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A remote has requested XCM version change notification from us and we have honored it."]
            #[doc = "A version information message is sent to them and its cost is included."]
            pub struct VersionNotifyStarted {
                pub destination: version_notify_started::Destination,
                pub cost: version_notify_started::Cost,
                pub message_id: version_notify_started::MessageId,
            }
            pub mod version_notify_started {
                use super::runtime_types;
                pub type Destination = runtime_types::staging_xcm::v4::location::Location;
                pub type Cost = runtime_types::staging_xcm::v4::asset::Assets;
                pub type MessageId = [::core::primitive::u8; 32usize];
            }
            impl ::subxt::events::StaticEvent for VersionNotifyStarted {
                const PALLET: &'static str = "PolkadotXcm";
                const EVENT: &'static str = "VersionNotifyStarted";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "We have requested that a remote chain send us XCM version change notifications."]
            pub struct VersionNotifyRequested {
                pub destination: version_notify_requested::Destination,
                pub cost: version_notify_requested::Cost,
                pub message_id: version_notify_requested::MessageId,
            }
            pub mod version_notify_requested {
                use super::runtime_types;
                pub type Destination = runtime_types::staging_xcm::v4::location::Location;
                pub type Cost = runtime_types::staging_xcm::v4::asset::Assets;
                pub type MessageId = [::core::primitive::u8; 32usize];
            }
            impl ::subxt::events::StaticEvent for VersionNotifyRequested {
                const PALLET: &'static str = "PolkadotXcm";
                const EVENT: &'static str = "VersionNotifyRequested";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "We have requested that a remote chain stops sending us XCM version change"]
            #[doc = "notifications."]
            pub struct VersionNotifyUnrequested {
                pub destination: version_notify_unrequested::Destination,
                pub cost: version_notify_unrequested::Cost,
                pub message_id: version_notify_unrequested::MessageId,
            }
            pub mod version_notify_unrequested {
                use super::runtime_types;
                pub type Destination = runtime_types::staging_xcm::v4::location::Location;
                pub type Cost = runtime_types::staging_xcm::v4::asset::Assets;
                pub type MessageId = [::core::primitive::u8; 32usize];
            }
            impl ::subxt::events::StaticEvent for VersionNotifyUnrequested {
                const PALLET: &'static str = "PolkadotXcm";
                const EVENT: &'static str = "VersionNotifyUnrequested";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Fees were paid from a location for an operation (often for using `SendXcm`)."]
            pub struct FeesPaid {
                pub paying: fees_paid::Paying,
                pub fees: fees_paid::Fees,
            }
            pub mod fees_paid {
                use super::runtime_types;
                pub type Paying = runtime_types::staging_xcm::v4::location::Location;
                pub type Fees = runtime_types::staging_xcm::v4::asset::Assets;
            }
            impl ::subxt::events::StaticEvent for FeesPaid {
                const PALLET: &'static str = "PolkadotXcm";
                const EVENT: &'static str = "FeesPaid";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Some assets have been claimed from an asset trap"]
            pub struct AssetsClaimed {
                pub hash: assets_claimed::Hash,
                pub origin: assets_claimed::Origin,
                pub assets: assets_claimed::Assets,
            }
            pub mod assets_claimed {
                use super::runtime_types;
                pub type Hash = ::subxt::utils::H256;
                pub type Origin = runtime_types::staging_xcm::v4::location::Location;
                pub type Assets = runtime_types::xcm::VersionedAssets;
            }
            impl ::subxt::events::StaticEvent for AssetsClaimed {
                const PALLET: &'static str = "PolkadotXcm";
                const EVENT: &'static str = "AssetsClaimed";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A XCM version migration finished."]
            pub struct VersionMigrationFinished {
                pub version: version_migration_finished::Version,
            }
            pub mod version_migration_finished {
                use super::runtime_types;
                pub type Version = ::core::primitive::u32;
            }
            impl ::subxt::events::StaticEvent for VersionMigrationFinished {
                const PALLET: &'static str = "PolkadotXcm";
                const EVENT: &'static str = "VersionMigrationFinished";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub mod types {
                use super::runtime_types;
                pub mod query_counter {
                    use super::runtime_types;
                    pub type QueryCounter = ::core::primitive::u64;
                }
                pub mod queries {
                    use super::runtime_types;
                    pub type Queries =
                        runtime_types::pallet_xcm::pallet::QueryStatus<::core::primitive::u32>;
                    pub type Param0 = ::core::primitive::u64;
                }
                pub mod asset_traps {
                    use super::runtime_types;
                    pub type AssetTraps = ::core::primitive::u32;
                    pub type Param0 = ::subxt::utils::H256;
                }
                pub mod safe_xcm_version {
                    use super::runtime_types;
                    pub type SafeXcmVersion = ::core::primitive::u32;
                }
                pub mod supported_version {
                    use super::runtime_types;
                    pub type SupportedVersion = ::core::primitive::u32;
                    pub type Param0 = ::core::primitive::u32;
                    pub type Param1 = runtime_types::xcm::VersionedLocation;
                }
                pub mod version_notifiers {
                    use super::runtime_types;
                    pub type VersionNotifiers = ::core::primitive::u64;
                    pub type Param0 = ::core::primitive::u32;
                    pub type Param1 = runtime_types::xcm::VersionedLocation;
                }
                pub mod version_notify_targets {
                    use super::runtime_types;
                    pub type VersionNotifyTargets = (
                        ::core::primitive::u64,
                        runtime_types::sp_weights::weight_v2::Weight,
                        ::core::primitive::u32,
                    );
                    pub type Param0 = ::core::primitive::u32;
                    pub type Param1 = runtime_types::xcm::VersionedLocation;
                }
                pub mod version_discovery_queue {
                    use super::runtime_types;
                    pub type VersionDiscoveryQueue =
                        runtime_types::bounded_collections::bounded_vec::BoundedVec<(
                            runtime_types::xcm::VersionedLocation,
                            ::core::primitive::u32,
                        )>;
                }
                pub mod current_migration {
                    use super::runtime_types;
                    pub type CurrentMigration =
                        runtime_types::pallet_xcm::pallet::VersionMigrationStage;
                }
                pub mod remote_locked_fungibles {
                    use super::runtime_types;
                    pub type RemoteLockedFungibles =
                        runtime_types::pallet_xcm::pallet::RemoteLockedFungibleRecord<()>;
                    pub type Param0 = ::core::primitive::u32;
                    pub type Param1 = ::subxt::utils::AccountId32;
                    pub type Param2 = runtime_types::xcm::VersionedAssetId;
                }
                pub mod locked_fungibles {
                    use super::runtime_types;
                    pub type LockedFungibles =
                        runtime_types::bounded_collections::bounded_vec::BoundedVec<(
                            ::core::primitive::u128,
                            runtime_types::xcm::VersionedLocation,
                        )>;
                    pub type Param0 = ::subxt::utils::AccountId32;
                }
                pub mod xcm_execution_suspended {
                    use super::runtime_types;
                    pub type XcmExecutionSuspended = ::core::primitive::bool;
                }
            }
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " The latest available query index."]
                pub fn query_counter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::query_counter::QueryCounter,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "PolkadotXcm",
                        "QueryCounter",
                        vec![],
                        [
                            216u8, 73u8, 160u8, 232u8, 60u8, 245u8, 218u8, 219u8, 152u8, 68u8,
                            146u8, 219u8, 255u8, 7u8, 86u8, 112u8, 83u8, 49u8, 94u8, 173u8, 64u8,
                            203u8, 147u8, 226u8, 236u8, 39u8, 129u8, 106u8, 209u8, 113u8, 150u8,
                            50u8,
                        ],
                    )
                }
                #[doc = " The ongoing queries."]
                pub fn queries_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::queries::Queries,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "PolkadotXcm",
                        "Queries",
                        vec![],
                        [
                            246u8, 75u8, 240u8, 129u8, 106u8, 114u8, 99u8, 154u8, 176u8, 188u8,
                            146u8, 125u8, 244u8, 103u8, 187u8, 171u8, 60u8, 119u8, 4u8, 90u8, 58u8,
                            180u8, 48u8, 165u8, 145u8, 125u8, 227u8, 233u8, 11u8, 142u8, 122u8,
                            3u8,
                        ],
                    )
                }
                #[doc = " The ongoing queries."]
                pub fn queries(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::queries::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::queries::Queries,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "PolkadotXcm",
                        "Queries",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            246u8, 75u8, 240u8, 129u8, 106u8, 114u8, 99u8, 154u8, 176u8, 188u8,
                            146u8, 125u8, 244u8, 103u8, 187u8, 171u8, 60u8, 119u8, 4u8, 90u8, 58u8,
                            180u8, 48u8, 165u8, 145u8, 125u8, 227u8, 233u8, 11u8, 142u8, 122u8,
                            3u8,
                        ],
                    )
                }
                #[doc = " The existing asset traps."]
                #[doc = ""]
                #[doc = " Key is the blake2 256 hash of (origin, versioned `Assets`) pair. Value is the number of"]
                #[doc = " times this pair has been trapped (usually just 1 if it exists at all)."]
                pub fn asset_traps_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::asset_traps::AssetTraps,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "PolkadotXcm",
                        "AssetTraps",
                        vec![],
                        [
                            148u8, 41u8, 254u8, 134u8, 61u8, 172u8, 126u8, 146u8, 78u8, 178u8,
                            50u8, 77u8, 226u8, 8u8, 200u8, 78u8, 77u8, 91u8, 26u8, 133u8, 104u8,
                            126u8, 28u8, 28u8, 202u8, 62u8, 87u8, 183u8, 231u8, 191u8, 5u8, 181u8,
                        ],
                    )
                }
                #[doc = " The existing asset traps."]
                #[doc = ""]
                #[doc = " Key is the blake2 256 hash of (origin, versioned `Assets`) pair. Value is the number of"]
                #[doc = " times this pair has been trapped (usually just 1 if it exists at all)."]
                pub fn asset_traps(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::asset_traps::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::asset_traps::AssetTraps,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "PolkadotXcm",
                        "AssetTraps",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            148u8, 41u8, 254u8, 134u8, 61u8, 172u8, 126u8, 146u8, 78u8, 178u8,
                            50u8, 77u8, 226u8, 8u8, 200u8, 78u8, 77u8, 91u8, 26u8, 133u8, 104u8,
                            126u8, 28u8, 28u8, 202u8, 62u8, 87u8, 183u8, 231u8, 191u8, 5u8, 181u8,
                        ],
                    )
                }
                #[doc = " Default version to encode XCM when latest version of destination is unknown. If `None`,"]
                #[doc = " then the destinations whose XCM version is unknown are considered unreachable."]
                pub fn safe_xcm_version(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::safe_xcm_version::SafeXcmVersion,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "PolkadotXcm",
                        "SafeXcmVersion",
                        vec![],
                        [
                            187u8, 8u8, 74u8, 126u8, 80u8, 215u8, 177u8, 60u8, 223u8, 123u8, 196u8,
                            155u8, 166u8, 66u8, 25u8, 164u8, 191u8, 66u8, 116u8, 131u8, 116u8,
                            188u8, 224u8, 122u8, 75u8, 195u8, 246u8, 188u8, 83u8, 134u8, 49u8,
                            143u8,
                        ],
                    )
                }
                #[doc = " The Latest versions that we know various locations support."]
                pub fn supported_version_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::supported_version::SupportedVersion,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "PolkadotXcm",
                        "SupportedVersion",
                        vec![],
                        [
                            144u8, 218u8, 177u8, 254u8, 210u8, 8u8, 84u8, 149u8, 163u8, 162u8,
                            238u8, 37u8, 157u8, 28u8, 140u8, 121u8, 201u8, 173u8, 204u8, 92u8,
                            133u8, 45u8, 156u8, 38u8, 61u8, 51u8, 153u8, 161u8, 147u8, 146u8,
                            202u8, 24u8,
                        ],
                    )
                }
                #[doc = " The Latest versions that we know various locations support."]
                pub fn supported_version_iter1(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::supported_version::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::supported_version::SupportedVersion,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "PolkadotXcm",
                        "SupportedVersion",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            144u8, 218u8, 177u8, 254u8, 210u8, 8u8, 84u8, 149u8, 163u8, 162u8,
                            238u8, 37u8, 157u8, 28u8, 140u8, 121u8, 201u8, 173u8, 204u8, 92u8,
                            133u8, 45u8, 156u8, 38u8, 61u8, 51u8, 153u8, 161u8, 147u8, 146u8,
                            202u8, 24u8,
                        ],
                    )
                }
                #[doc = " The Latest versions that we know various locations support."]
                pub fn supported_version(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::supported_version::Param0>,
                    _1: impl ::std::borrow::Borrow<types::supported_version::Param1>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::supported_version::SupportedVersion,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "PolkadotXcm",
                        "SupportedVersion",
                        vec![
                            ::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
                            ::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
                        ],
                        [
                            144u8, 218u8, 177u8, 254u8, 210u8, 8u8, 84u8, 149u8, 163u8, 162u8,
                            238u8, 37u8, 157u8, 28u8, 140u8, 121u8, 201u8, 173u8, 204u8, 92u8,
                            133u8, 45u8, 156u8, 38u8, 61u8, 51u8, 153u8, 161u8, 147u8, 146u8,
                            202u8, 24u8,
                        ],
                    )
                }
                #[doc = " All locations that we have requested version notifications from."]
                pub fn version_notifiers_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::version_notifiers::VersionNotifiers,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "PolkadotXcm",
                        "VersionNotifiers",
                        vec![],
                        [
                            175u8, 206u8, 29u8, 14u8, 111u8, 123u8, 211u8, 109u8, 159u8, 131u8,
                            80u8, 149u8, 216u8, 196u8, 181u8, 105u8, 117u8, 138u8, 80u8, 69u8,
                            237u8, 116u8, 195u8, 66u8, 209u8, 102u8, 42u8, 126u8, 222u8, 176u8,
                            201u8, 49u8,
                        ],
                    )
                }
                #[doc = " All locations that we have requested version notifications from."]
                pub fn version_notifiers_iter1(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::version_notifiers::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::version_notifiers::VersionNotifiers,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "PolkadotXcm",
                        "VersionNotifiers",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            175u8, 206u8, 29u8, 14u8, 111u8, 123u8, 211u8, 109u8, 159u8, 131u8,
                            80u8, 149u8, 216u8, 196u8, 181u8, 105u8, 117u8, 138u8, 80u8, 69u8,
                            237u8, 116u8, 195u8, 66u8, 209u8, 102u8, 42u8, 126u8, 222u8, 176u8,
                            201u8, 49u8,
                        ],
                    )
                }
                #[doc = " All locations that we have requested version notifications from."]
                pub fn version_notifiers(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::version_notifiers::Param0>,
                    _1: impl ::std::borrow::Borrow<types::version_notifiers::Param1>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::version_notifiers::VersionNotifiers,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "PolkadotXcm",
                        "VersionNotifiers",
                        vec![
                            ::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
                            ::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
                        ],
                        [
                            175u8, 206u8, 29u8, 14u8, 111u8, 123u8, 211u8, 109u8, 159u8, 131u8,
                            80u8, 149u8, 216u8, 196u8, 181u8, 105u8, 117u8, 138u8, 80u8, 69u8,
                            237u8, 116u8, 195u8, 66u8, 209u8, 102u8, 42u8, 126u8, 222u8, 176u8,
                            201u8, 49u8,
                        ],
                    )
                }
                #[doc = " The target locations that are subscribed to our version changes, as well as the most recent"]
                #[doc = " of our versions we informed them of."]
                pub fn version_notify_targets_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::version_notify_targets::VersionNotifyTargets,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "PolkadotXcm",
                        "VersionNotifyTargets",
                        vec![],
                        [
                            113u8, 77u8, 150u8, 42u8, 82u8, 49u8, 195u8, 120u8, 96u8, 80u8, 152u8,
                            67u8, 27u8, 142u8, 10u8, 74u8, 66u8, 134u8, 35u8, 202u8, 77u8, 187u8,
                            174u8, 22u8, 207u8, 199u8, 57u8, 85u8, 53u8, 208u8, 146u8, 81u8,
                        ],
                    )
                }
                #[doc = " The target locations that are subscribed to our version changes, as well as the most recent"]
                #[doc = " of our versions we informed them of."]
                pub fn version_notify_targets_iter1(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::version_notify_targets::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::version_notify_targets::VersionNotifyTargets,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "PolkadotXcm",
                        "VersionNotifyTargets",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            113u8, 77u8, 150u8, 42u8, 82u8, 49u8, 195u8, 120u8, 96u8, 80u8, 152u8,
                            67u8, 27u8, 142u8, 10u8, 74u8, 66u8, 134u8, 35u8, 202u8, 77u8, 187u8,
                            174u8, 22u8, 207u8, 199u8, 57u8, 85u8, 53u8, 208u8, 146u8, 81u8,
                        ],
                    )
                }
                #[doc = " The target locations that are subscribed to our version changes, as well as the most recent"]
                #[doc = " of our versions we informed them of."]
                pub fn version_notify_targets(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::version_notify_targets::Param0>,
                    _1: impl ::std::borrow::Borrow<types::version_notify_targets::Param1>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::version_notify_targets::VersionNotifyTargets,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "PolkadotXcm",
                        "VersionNotifyTargets",
                        vec![
                            ::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
                            ::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
                        ],
                        [
                            113u8, 77u8, 150u8, 42u8, 82u8, 49u8, 195u8, 120u8, 96u8, 80u8, 152u8,
                            67u8, 27u8, 142u8, 10u8, 74u8, 66u8, 134u8, 35u8, 202u8, 77u8, 187u8,
                            174u8, 22u8, 207u8, 199u8, 57u8, 85u8, 53u8, 208u8, 146u8, 81u8,
                        ],
                    )
                }
                #[doc = " Destinations whose latest XCM version we would like to know. Duplicates not allowed, and"]
                #[doc = " the `u32` counter is the number of times that a send to the destination has been attempted,"]
                #[doc = " which is used as a prioritization."]
                pub fn version_discovery_queue(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::version_discovery_queue::VersionDiscoveryQueue,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "PolkadotXcm",
                        "VersionDiscoveryQueue",
                        vec![],
                        [
                            95u8, 74u8, 97u8, 94u8, 40u8, 140u8, 175u8, 176u8, 224u8, 222u8, 83u8,
                            199u8, 170u8, 102u8, 3u8, 77u8, 127u8, 208u8, 155u8, 122u8, 176u8,
                            51u8, 15u8, 253u8, 231u8, 245u8, 91u8, 192u8, 60u8, 144u8, 101u8,
                            168u8,
                        ],
                    )
                }
                #[doc = " The current migration's stage, if any."]
                pub fn current_migration(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::current_migration::CurrentMigration,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "PolkadotXcm",
                        "CurrentMigration",
                        vec![],
                        [
                            74u8, 138u8, 181u8, 162u8, 59u8, 251u8, 37u8, 28u8, 232u8, 51u8, 30u8,
                            152u8, 252u8, 133u8, 95u8, 195u8, 47u8, 127u8, 21u8, 44u8, 62u8, 143u8,
                            170u8, 234u8, 160u8, 37u8, 131u8, 179u8, 57u8, 241u8, 140u8, 124u8,
                        ],
                    )
                }
                #[doc = " Fungible assets which we know are locked on a remote chain."]
                pub fn remote_locked_fungibles_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::remote_locked_fungibles::RemoteLockedFungibles,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "PolkadotXcm",
                        "RemoteLockedFungibles",
                        vec![],
                        [
                            247u8, 124u8, 77u8, 42u8, 208u8, 183u8, 99u8, 196u8, 50u8, 113u8,
                            250u8, 221u8, 222u8, 170u8, 10u8, 60u8, 143u8, 172u8, 149u8, 198u8,
                            125u8, 154u8, 196u8, 196u8, 145u8, 209u8, 68u8, 28u8, 241u8, 241u8,
                            201u8, 150u8,
                        ],
                    )
                }
                #[doc = " Fungible assets which we know are locked on a remote chain."]
                pub fn remote_locked_fungibles_iter1(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::remote_locked_fungibles::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::remote_locked_fungibles::RemoteLockedFungibles,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "PolkadotXcm",
                        "RemoteLockedFungibles",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            247u8, 124u8, 77u8, 42u8, 208u8, 183u8, 99u8, 196u8, 50u8, 113u8,
                            250u8, 221u8, 222u8, 170u8, 10u8, 60u8, 143u8, 172u8, 149u8, 198u8,
                            125u8, 154u8, 196u8, 196u8, 145u8, 209u8, 68u8, 28u8, 241u8, 241u8,
                            201u8, 150u8,
                        ],
                    )
                }
                #[doc = " Fungible assets which we know are locked on a remote chain."]
                pub fn remote_locked_fungibles_iter2(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::remote_locked_fungibles::Param0>,
                    _1: impl ::std::borrow::Borrow<types::remote_locked_fungibles::Param1>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::remote_locked_fungibles::RemoteLockedFungibles,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "PolkadotXcm",
                        "RemoteLockedFungibles",
                        vec![
                            ::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
                            ::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
                        ],
                        [
                            247u8, 124u8, 77u8, 42u8, 208u8, 183u8, 99u8, 196u8, 50u8, 113u8,
                            250u8, 221u8, 222u8, 170u8, 10u8, 60u8, 143u8, 172u8, 149u8, 198u8,
                            125u8, 154u8, 196u8, 196u8, 145u8, 209u8, 68u8, 28u8, 241u8, 241u8,
                            201u8, 150u8,
                        ],
                    )
                }
                #[doc = " Fungible assets which we know are locked on a remote chain."]
                pub fn remote_locked_fungibles(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::remote_locked_fungibles::Param0>,
                    _1: impl ::std::borrow::Borrow<types::remote_locked_fungibles::Param1>,
                    _2: impl ::std::borrow::Borrow<types::remote_locked_fungibles::Param2>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::remote_locked_fungibles::RemoteLockedFungibles,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "PolkadotXcm",
                        "RemoteLockedFungibles",
                        vec![
                            ::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
                            ::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
                            ::subxt::storage::address::make_static_storage_map_key(_2.borrow()),
                        ],
                        [
                            247u8, 124u8, 77u8, 42u8, 208u8, 183u8, 99u8, 196u8, 50u8, 113u8,
                            250u8, 221u8, 222u8, 170u8, 10u8, 60u8, 143u8, 172u8, 149u8, 198u8,
                            125u8, 154u8, 196u8, 196u8, 145u8, 209u8, 68u8, 28u8, 241u8, 241u8,
                            201u8, 150u8,
                        ],
                    )
                }
                #[doc = " Fungible assets which we know are locked on this chain."]
                pub fn locked_fungibles_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::locked_fungibles::LockedFungibles,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "PolkadotXcm",
                        "LockedFungibles",
                        vec![],
                        [
                            254u8, 234u8, 1u8, 27u8, 27u8, 32u8, 217u8, 24u8, 47u8, 30u8, 62u8,
                            80u8, 86u8, 125u8, 120u8, 24u8, 143u8, 229u8, 161u8, 153u8, 240u8,
                            246u8, 80u8, 15u8, 49u8, 189u8, 20u8, 204u8, 239u8, 198u8, 97u8, 174u8,
                        ],
                    )
                }
                #[doc = " Fungible assets which we know are locked on this chain."]
                pub fn locked_fungibles(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::locked_fungibles::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::locked_fungibles::LockedFungibles,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "PolkadotXcm",
                        "LockedFungibles",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            254u8, 234u8, 1u8, 27u8, 27u8, 32u8, 217u8, 24u8, 47u8, 30u8, 62u8,
                            80u8, 86u8, 125u8, 120u8, 24u8, 143u8, 229u8, 161u8, 153u8, 240u8,
                            246u8, 80u8, 15u8, 49u8, 189u8, 20u8, 204u8, 239u8, 198u8, 97u8, 174u8,
                        ],
                    )
                }
                #[doc = " Global suspension state of the XCM executor."]
                pub fn xcm_execution_suspended(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::xcm_execution_suspended::XcmExecutionSuspended,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "PolkadotXcm",
                        "XcmExecutionSuspended",
                        vec![],
                        [
                            182u8, 54u8, 69u8, 68u8, 78u8, 76u8, 103u8, 79u8, 47u8, 136u8, 99u8,
                            104u8, 128u8, 129u8, 249u8, 54u8, 214u8, 136u8, 97u8, 48u8, 178u8,
                            42u8, 26u8, 27u8, 82u8, 24u8, 33u8, 77u8, 33u8, 27u8, 20u8, 127u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod cumulus_xcm {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
        pub type Call = runtime_types::cumulus_pallet_xcm::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
            }
            pub struct TransactionApi;
            impl TransactionApi {}
        }
        #[doc = "The `Event` enum of this pallet"]
        pub type Event = runtime_types::cumulus_pallet_xcm::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Downward message is invalid XCM."]
            #[doc = "\\[ id \\]"]
            pub struct InvalidFormat(pub invalid_format::Field0);
            pub mod invalid_format {
                use super::runtime_types;
                pub type Field0 = [::core::primitive::u8; 32usize];
            }
            impl ::subxt::events::StaticEvent for InvalidFormat {
                const PALLET: &'static str = "CumulusXcm";
                const EVENT: &'static str = "InvalidFormat";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Downward message is unsupported version of XCM."]
            #[doc = "\\[ id \\]"]
            pub struct UnsupportedVersion(pub unsupported_version::Field0);
            pub mod unsupported_version {
                use super::runtime_types;
                pub type Field0 = [::core::primitive::u8; 32usize];
            }
            impl ::subxt::events::StaticEvent for UnsupportedVersion {
                const PALLET: &'static str = "CumulusXcm";
                const EVENT: &'static str = "UnsupportedVersion";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Downward message executed with the given outcome."]
            #[doc = "\\[ id, outcome \\]"]
            pub struct ExecutedDownward(
                pub executed_downward::Field0,
                pub executed_downward::Field1,
            );
            pub mod executed_downward {
                use super::runtime_types;
                pub type Field0 = [::core::primitive::u8; 32usize];
                pub type Field1 = runtime_types::staging_xcm::v4::traits::Outcome;
            }
            impl ::subxt::events::StaticEvent for ExecutedDownward {
                const PALLET: &'static str = "CumulusXcm";
                const EVENT: &'static str = "ExecutedDownward";
            }
        }
    }
    pub mod utility {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "The `Error` enum of this pallet."]
        pub type Error = runtime_types::pallet_utility::pallet::Error;
        #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
        pub type Call = runtime_types::pallet_utility::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "See [`Pallet::batch`]."]
                pub struct Batch {
                    pub calls: batch::Calls,
                }
                pub mod batch {
                    use super::runtime_types;
                    pub type Calls =
                        ::std::vec::Vec<runtime_types::bridge_hub_rococo_runtime::RuntimeCall>;
                }
                impl ::subxt::blocks::StaticExtrinsic for Batch {
                    const PALLET: &'static str = "Utility";
                    const CALL: &'static str = "batch";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "See [`Pallet::as_derivative`]."]
                pub struct AsDerivative {
                    pub index: as_derivative::Index,
                    pub call: ::std::boxed::Box<as_derivative::Call>,
                }
                pub mod as_derivative {
                    use super::runtime_types;
                    pub type Index = ::core::primitive::u16;
                    pub type Call = runtime_types::bridge_hub_rococo_runtime::RuntimeCall;
                }
                impl ::subxt::blocks::StaticExtrinsic for AsDerivative {
                    const PALLET: &'static str = "Utility";
                    const CALL: &'static str = "as_derivative";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "See [`Pallet::batch_all`]."]
                pub struct BatchAll {
                    pub calls: batch_all::Calls,
                }
                pub mod batch_all {
                    use super::runtime_types;
                    pub type Calls =
                        ::std::vec::Vec<runtime_types::bridge_hub_rococo_runtime::RuntimeCall>;
                }
                impl ::subxt::blocks::StaticExtrinsic for BatchAll {
                    const PALLET: &'static str = "Utility";
                    const CALL: &'static str = "batch_all";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "See [`Pallet::dispatch_as`]."]
                pub struct DispatchAs {
                    pub as_origin: ::std::boxed::Box<dispatch_as::AsOrigin>,
                    pub call: ::std::boxed::Box<dispatch_as::Call>,
                }
                pub mod dispatch_as {
                    use super::runtime_types;
                    pub type AsOrigin = runtime_types::bridge_hub_rococo_runtime::OriginCaller;
                    pub type Call = runtime_types::bridge_hub_rococo_runtime::RuntimeCall;
                }
                impl ::subxt::blocks::StaticExtrinsic for DispatchAs {
                    const PALLET: &'static str = "Utility";
                    const CALL: &'static str = "dispatch_as";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "See [`Pallet::force_batch`]."]
                pub struct ForceBatch {
                    pub calls: force_batch::Calls,
                }
                pub mod force_batch {
                    use super::runtime_types;
                    pub type Calls =
                        ::std::vec::Vec<runtime_types::bridge_hub_rococo_runtime::RuntimeCall>;
                }
                impl ::subxt::blocks::StaticExtrinsic for ForceBatch {
                    const PALLET: &'static str = "Utility";
                    const CALL: &'static str = "force_batch";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "See [`Pallet::with_weight`]."]
                pub struct WithWeight {
                    pub call: ::std::boxed::Box<with_weight::Call>,
                    pub weight: with_weight::Weight,
                }
                pub mod with_weight {
                    use super::runtime_types;
                    pub type Call = runtime_types::bridge_hub_rococo_runtime::RuntimeCall;
                    pub type Weight = runtime_types::sp_weights::weight_v2::Weight;
                }
                impl ::subxt::blocks::StaticExtrinsic for WithWeight {
                    const PALLET: &'static str = "Utility";
                    const CALL: &'static str = "with_weight";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "See [`Pallet::batch`]."]
                pub fn batch(
                    &self,
                    calls: types::batch::Calls,
                ) -> ::subxt::tx::Payload<types::Batch> {
                    ::subxt::tx::Payload::new_static(
                        "Utility",
                        "batch",
                        types::Batch { calls },
                        [
                            76u8, 208u8, 78u8, 74u8, 178u8, 96u8, 68u8, 197u8, 23u8, 152u8, 179u8,
                            111u8, 110u8, 162u8, 229u8, 43u8, 133u8, 13u8, 74u8, 82u8, 0u8, 118u8,
                            37u8, 69u8, 121u8, 45u8, 73u8, 245u8, 226u8, 155u8, 165u8, 199u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::as_derivative`]."]
                pub fn as_derivative(
                    &self,
                    index: types::as_derivative::Index,
                    call: types::as_derivative::Call,
                ) -> ::subxt::tx::Payload<types::AsDerivative> {
                    ::subxt::tx::Payload::new_static(
                        "Utility",
                        "as_derivative",
                        types::AsDerivative {
                            index,
                            call: ::std::boxed::Box::new(call),
                        },
                        [
                            251u8, 100u8, 155u8, 3u8, 243u8, 7u8, 46u8, 184u8, 26u8, 197u8, 30u8,
                            252u8, 13u8, 228u8, 54u8, 57u8, 169u8, 191u8, 116u8, 237u8, 86u8, 42u8,
                            36u8, 115u8, 28u8, 37u8, 196u8, 21u8, 8u8, 87u8, 96u8, 38u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::batch_all`]."]
                pub fn batch_all(
                    &self,
                    calls: types::batch_all::Calls,
                ) -> ::subxt::tx::Payload<types::BatchAll> {
                    ::subxt::tx::Payload::new_static(
                        "Utility",
                        "batch_all",
                        types::BatchAll { calls },
                        [
                            248u8, 14u8, 71u8, 167u8, 213u8, 148u8, 204u8, 207u8, 157u8, 65u8,
                            26u8, 132u8, 139u8, 170u8, 21u8, 230u8, 61u8, 153u8, 35u8, 175u8,
                            245u8, 157u8, 108u8, 52u8, 124u8, 117u8, 140u8, 89u8, 217u8, 87u8,
                            117u8, 211u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::dispatch_as`]."]
                pub fn dispatch_as(
                    &self,
                    as_origin: types::dispatch_as::AsOrigin,
                    call: types::dispatch_as::Call,
                ) -> ::subxt::tx::Payload<types::DispatchAs> {
                    ::subxt::tx::Payload::new_static(
                        "Utility",
                        "dispatch_as",
                        types::DispatchAs {
                            as_origin: ::std::boxed::Box::new(as_origin),
                            call: ::std::boxed::Box::new(call),
                        },
                        [
                            177u8, 156u8, 182u8, 52u8, 221u8, 15u8, 169u8, 6u8, 196u8, 67u8, 114u8,
                            174u8, 119u8, 208u8, 229u8, 102u8, 242u8, 87u8, 195u8, 82u8, 19u8,
                            199u8, 20u8, 147u8, 11u8, 128u8, 101u8, 16u8, 71u8, 200u8, 3u8, 64u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::force_batch`]."]
                pub fn force_batch(
                    &self,
                    calls: types::force_batch::Calls,
                ) -> ::subxt::tx::Payload<types::ForceBatch> {
                    ::subxt::tx::Payload::new_static(
                        "Utility",
                        "force_batch",
                        types::ForceBatch { calls },
                        [
                            171u8, 79u8, 130u8, 61u8, 119u8, 42u8, 207u8, 46u8, 215u8, 53u8, 171u8,
                            207u8, 90u8, 77u8, 32u8, 81u8, 245u8, 229u8, 153u8, 250u8, 37u8, 241u8,
                            88u8, 240u8, 53u8, 120u8, 168u8, 208u8, 7u8, 188u8, 162u8, 1u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::with_weight`]."]
                pub fn with_weight(
                    &self,
                    call: types::with_weight::Call,
                    weight: types::with_weight::Weight,
                ) -> ::subxt::tx::Payload<types::WithWeight> {
                    ::subxt::tx::Payload::new_static(
                        "Utility",
                        "with_weight",
                        types::WithWeight {
                            call: ::std::boxed::Box::new(call),
                            weight,
                        },
                        [
                            168u8, 169u8, 174u8, 154u8, 117u8, 186u8, 6u8, 155u8, 225u8, 152u8,
                            21u8, 95u8, 51u8, 119u8, 187u8, 152u8, 38u8, 158u8, 125u8, 161u8,
                            156u8, 37u8, 243u8, 98u8, 249u8, 208u8, 198u8, 113u8, 217u8, 177u8,
                            249u8, 209u8,
                        ],
                    )
                }
            }
        }
        #[doc = "The `Event` enum of this pallet"]
        pub type Event = runtime_types::pallet_utility::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Batch of dispatches did not complete fully. Index of first failing dispatch given, as"]
            #[doc = "well as the error."]
            pub struct BatchInterrupted {
                pub index: batch_interrupted::Index,
                pub error: batch_interrupted::Error,
            }
            pub mod batch_interrupted {
                use super::runtime_types;
                pub type Index = ::core::primitive::u32;
                pub type Error = runtime_types::sp_runtime::DispatchError;
            }
            impl ::subxt::events::StaticEvent for BatchInterrupted {
                const PALLET: &'static str = "Utility";
                const EVENT: &'static str = "BatchInterrupted";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Batch of dispatches completed fully with no error."]
            pub struct BatchCompleted;
            impl ::subxt::events::StaticEvent for BatchCompleted {
                const PALLET: &'static str = "Utility";
                const EVENT: &'static str = "BatchCompleted";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Batch of dispatches completed but has errors."]
            pub struct BatchCompletedWithErrors;
            impl ::subxt::events::StaticEvent for BatchCompletedWithErrors {
                const PALLET: &'static str = "Utility";
                const EVENT: &'static str = "BatchCompletedWithErrors";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A single item within a Batch of dispatches has completed with no error."]
            pub struct ItemCompleted;
            impl ::subxt::events::StaticEvent for ItemCompleted {
                const PALLET: &'static str = "Utility";
                const EVENT: &'static str = "ItemCompleted";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A single item within a Batch of dispatches has completed with error."]
            pub struct ItemFailed {
                pub error: item_failed::Error,
            }
            pub mod item_failed {
                use super::runtime_types;
                pub type Error = runtime_types::sp_runtime::DispatchError;
            }
            impl ::subxt::events::StaticEvent for ItemFailed {
                const PALLET: &'static str = "Utility";
                const EVENT: &'static str = "ItemFailed";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A call was dispatched."]
            pub struct DispatchedAs {
                pub result: dispatched_as::Result,
            }
            pub mod dispatched_as {
                use super::runtime_types;
                pub type Result =
                    ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>;
            }
            impl ::subxt::events::StaticEvent for DispatchedAs {
                const PALLET: &'static str = "Utility";
                const EVENT: &'static str = "DispatchedAs";
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                #[doc = " The limit on the number of batched calls."]
                pub fn batched_calls_limit(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "Utility",
                        "batched_calls_limit",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod multisig {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "The `Error` enum of this pallet."]
        pub type Error = runtime_types::pallet_multisig::pallet::Error;
        #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
        pub type Call = runtime_types::pallet_multisig::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "See [`Pallet::as_multi_threshold_1`]."]
                pub struct AsMultiThreshold1 {
                    pub other_signatories: as_multi_threshold1::OtherSignatories,
                    pub call: ::std::boxed::Box<as_multi_threshold1::Call>,
                }
                pub mod as_multi_threshold1 {
                    use super::runtime_types;
                    pub type OtherSignatories = ::std::vec::Vec<::subxt::utils::AccountId32>;
                    pub type Call = runtime_types::bridge_hub_rococo_runtime::RuntimeCall;
                }
                impl ::subxt::blocks::StaticExtrinsic for AsMultiThreshold1 {
                    const PALLET: &'static str = "Multisig";
                    const CALL: &'static str = "as_multi_threshold_1";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "See [`Pallet::as_multi`]."]
                pub struct AsMulti {
                    pub threshold: as_multi::Threshold,
                    pub other_signatories: as_multi::OtherSignatories,
                    pub maybe_timepoint: as_multi::MaybeTimepoint,
                    pub call: ::std::boxed::Box<as_multi::Call>,
                    pub max_weight: as_multi::MaxWeight,
                }
                pub mod as_multi {
                    use super::runtime_types;
                    pub type Threshold = ::core::primitive::u16;
                    pub type OtherSignatories = ::std::vec::Vec<::subxt::utils::AccountId32>;
                    pub type MaybeTimepoint = ::core::option::Option<
                        runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>,
                    >;
                    pub type Call = runtime_types::bridge_hub_rococo_runtime::RuntimeCall;
                    pub type MaxWeight = runtime_types::sp_weights::weight_v2::Weight;
                }
                impl ::subxt::blocks::StaticExtrinsic for AsMulti {
                    const PALLET: &'static str = "Multisig";
                    const CALL: &'static str = "as_multi";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "See [`Pallet::approve_as_multi`]."]
                pub struct ApproveAsMulti {
                    pub threshold: approve_as_multi::Threshold,
                    pub other_signatories: approve_as_multi::OtherSignatories,
                    pub maybe_timepoint: approve_as_multi::MaybeTimepoint,
                    pub call_hash: approve_as_multi::CallHash,
                    pub max_weight: approve_as_multi::MaxWeight,
                }
                pub mod approve_as_multi {
                    use super::runtime_types;
                    pub type Threshold = ::core::primitive::u16;
                    pub type OtherSignatories = ::std::vec::Vec<::subxt::utils::AccountId32>;
                    pub type MaybeTimepoint = ::core::option::Option<
                        runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>,
                    >;
                    pub type CallHash = [::core::primitive::u8; 32usize];
                    pub type MaxWeight = runtime_types::sp_weights::weight_v2::Weight;
                }
                impl ::subxt::blocks::StaticExtrinsic for ApproveAsMulti {
                    const PALLET: &'static str = "Multisig";
                    const CALL: &'static str = "approve_as_multi";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "See [`Pallet::cancel_as_multi`]."]
                pub struct CancelAsMulti {
                    pub threshold: cancel_as_multi::Threshold,
                    pub other_signatories: cancel_as_multi::OtherSignatories,
                    pub timepoint: cancel_as_multi::Timepoint,
                    pub call_hash: cancel_as_multi::CallHash,
                }
                pub mod cancel_as_multi {
                    use super::runtime_types;
                    pub type Threshold = ::core::primitive::u16;
                    pub type OtherSignatories = ::std::vec::Vec<::subxt::utils::AccountId32>;
                    pub type Timepoint =
                        runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>;
                    pub type CallHash = [::core::primitive::u8; 32usize];
                }
                impl ::subxt::blocks::StaticExtrinsic for CancelAsMulti {
                    const PALLET: &'static str = "Multisig";
                    const CALL: &'static str = "cancel_as_multi";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "See [`Pallet::as_multi_threshold_1`]."]
                pub fn as_multi_threshold_1(
                    &self,
                    other_signatories: types::as_multi_threshold1::OtherSignatories,
                    call: types::as_multi_threshold1::Call,
                ) -> ::subxt::tx::Payload<types::AsMultiThreshold1> {
                    ::subxt::tx::Payload::new_static(
                        "Multisig",
                        "as_multi_threshold_1",
                        types::AsMultiThreshold1 {
                            other_signatories,
                            call: ::std::boxed::Box::new(call),
                        },
                        [
                            76u8, 21u8, 176u8, 95u8, 22u8, 194u8, 79u8, 151u8, 45u8, 57u8, 1u8,
                            237u8, 84u8, 102u8, 131u8, 39u8, 221u8, 27u8, 135u8, 194u8, 31u8, 91u8,
                            106u8, 75u8, 78u8, 162u8, 130u8, 196u8, 84u8, 188u8, 233u8, 168u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::as_multi`]."]
                pub fn as_multi(
                    &self,
                    threshold: types::as_multi::Threshold,
                    other_signatories: types::as_multi::OtherSignatories,
                    maybe_timepoint: types::as_multi::MaybeTimepoint,
                    call: types::as_multi::Call,
                    max_weight: types::as_multi::MaxWeight,
                ) -> ::subxt::tx::Payload<types::AsMulti> {
                    ::subxt::tx::Payload::new_static(
                        "Multisig",
                        "as_multi",
                        types::AsMulti {
                            threshold,
                            other_signatories,
                            maybe_timepoint,
                            call: ::std::boxed::Box::new(call),
                            max_weight,
                        },
                        [
                            129u8, 168u8, 135u8, 196u8, 141u8, 118u8, 35u8, 52u8, 117u8, 145u8,
                            193u8, 179u8, 200u8, 9u8, 101u8, 63u8, 199u8, 250u8, 251u8, 211u8,
                            136u8, 207u8, 150u8, 184u8, 2u8, 39u8, 98u8, 244u8, 161u8, 200u8, 29u8,
                            71u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::approve_as_multi`]."]
                pub fn approve_as_multi(
                    &self,
                    threshold: types::approve_as_multi::Threshold,
                    other_signatories: types::approve_as_multi::OtherSignatories,
                    maybe_timepoint: types::approve_as_multi::MaybeTimepoint,
                    call_hash: types::approve_as_multi::CallHash,
                    max_weight: types::approve_as_multi::MaxWeight,
                ) -> ::subxt::tx::Payload<types::ApproveAsMulti> {
                    ::subxt::tx::Payload::new_static(
                        "Multisig",
                        "approve_as_multi",
                        types::ApproveAsMulti {
                            threshold,
                            other_signatories,
                            maybe_timepoint,
                            call_hash,
                            max_weight,
                        },
                        [
                            248u8, 46u8, 131u8, 35u8, 204u8, 12u8, 218u8, 150u8, 88u8, 131u8, 89u8,
                            13u8, 95u8, 122u8, 87u8, 107u8, 136u8, 154u8, 92u8, 199u8, 108u8, 92u8,
                            207u8, 171u8, 113u8, 8u8, 47u8, 248u8, 65u8, 26u8, 203u8, 135u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::cancel_as_multi`]."]
                pub fn cancel_as_multi(
                    &self,
                    threshold: types::cancel_as_multi::Threshold,
                    other_signatories: types::cancel_as_multi::OtherSignatories,
                    timepoint: types::cancel_as_multi::Timepoint,
                    call_hash: types::cancel_as_multi::CallHash,
                ) -> ::subxt::tx::Payload<types::CancelAsMulti> {
                    ::subxt::tx::Payload::new_static(
                        "Multisig",
                        "cancel_as_multi",
                        types::CancelAsMulti {
                            threshold,
                            other_signatories,
                            timepoint,
                            call_hash,
                        },
                        [
                            212u8, 179u8, 123u8, 40u8, 209u8, 228u8, 181u8, 0u8, 109u8, 28u8, 27u8,
                            48u8, 15u8, 47u8, 203u8, 54u8, 106u8, 114u8, 28u8, 118u8, 101u8, 201u8,
                            95u8, 187u8, 46u8, 182u8, 4u8, 30u8, 227u8, 105u8, 14u8, 81u8,
                        ],
                    )
                }
            }
        }
        #[doc = "The `Event` enum of this pallet"]
        pub type Event = runtime_types::pallet_multisig::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A new multisig operation has begun."]
            pub struct NewMultisig {
                pub approving: new_multisig::Approving,
                pub multisig: new_multisig::Multisig,
                pub call_hash: new_multisig::CallHash,
            }
            pub mod new_multisig {
                use super::runtime_types;
                pub type Approving = ::subxt::utils::AccountId32;
                pub type Multisig = ::subxt::utils::AccountId32;
                pub type CallHash = [::core::primitive::u8; 32usize];
            }
            impl ::subxt::events::StaticEvent for NewMultisig {
                const PALLET: &'static str = "Multisig";
                const EVENT: &'static str = "NewMultisig";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A multisig operation has been approved by someone."]
            pub struct MultisigApproval {
                pub approving: multisig_approval::Approving,
                pub timepoint: multisig_approval::Timepoint,
                pub multisig: multisig_approval::Multisig,
                pub call_hash: multisig_approval::CallHash,
            }
            pub mod multisig_approval {
                use super::runtime_types;
                pub type Approving = ::subxt::utils::AccountId32;
                pub type Timepoint =
                    runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>;
                pub type Multisig = ::subxt::utils::AccountId32;
                pub type CallHash = [::core::primitive::u8; 32usize];
            }
            impl ::subxt::events::StaticEvent for MultisigApproval {
                const PALLET: &'static str = "Multisig";
                const EVENT: &'static str = "MultisigApproval";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A multisig operation has been executed."]
            pub struct MultisigExecuted {
                pub approving: multisig_executed::Approving,
                pub timepoint: multisig_executed::Timepoint,
                pub multisig: multisig_executed::Multisig,
                pub call_hash: multisig_executed::CallHash,
                pub result: multisig_executed::Result,
            }
            pub mod multisig_executed {
                use super::runtime_types;
                pub type Approving = ::subxt::utils::AccountId32;
                pub type Timepoint =
                    runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>;
                pub type Multisig = ::subxt::utils::AccountId32;
                pub type CallHash = [::core::primitive::u8; 32usize];
                pub type Result =
                    ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>;
            }
            impl ::subxt::events::StaticEvent for MultisigExecuted {
                const PALLET: &'static str = "Multisig";
                const EVENT: &'static str = "MultisigExecuted";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A multisig operation has been cancelled."]
            pub struct MultisigCancelled {
                pub cancelling: multisig_cancelled::Cancelling,
                pub timepoint: multisig_cancelled::Timepoint,
                pub multisig: multisig_cancelled::Multisig,
                pub call_hash: multisig_cancelled::CallHash,
            }
            pub mod multisig_cancelled {
                use super::runtime_types;
                pub type Cancelling = ::subxt::utils::AccountId32;
                pub type Timepoint =
                    runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>;
                pub type Multisig = ::subxt::utils::AccountId32;
                pub type CallHash = [::core::primitive::u8; 32usize];
            }
            impl ::subxt::events::StaticEvent for MultisigCancelled {
                const PALLET: &'static str = "Multisig";
                const EVENT: &'static str = "MultisigCancelled";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub mod types {
                use super::runtime_types;
                pub mod multisigs {
                    use super::runtime_types;
                    pub type Multisigs = runtime_types::pallet_multisig::Multisig<
                        ::core::primitive::u32,
                        ::core::primitive::u128,
                        ::subxt::utils::AccountId32,
                    >;
                    pub type Param0 = ::subxt::utils::AccountId32;
                    pub type Param1 = [::core::primitive::u8; 32usize];
                }
            }
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " The set of open multisig operations."]
                pub fn multisigs_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::multisigs::Multisigs,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Multisig",
                        "Multisigs",
                        vec![],
                        [
                            154u8, 109u8, 45u8, 18u8, 155u8, 151u8, 81u8, 28u8, 86u8, 127u8, 189u8,
                            151u8, 49u8, 61u8, 12u8, 149u8, 84u8, 61u8, 110u8, 197u8, 200u8, 140u8,
                            37u8, 100u8, 14u8, 162u8, 158u8, 161u8, 48u8, 117u8, 102u8, 61u8,
                        ],
                    )
                }
                #[doc = " The set of open multisig operations."]
                pub fn multisigs_iter1(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::multisigs::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::multisigs::Multisigs,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Multisig",
                        "Multisigs",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            154u8, 109u8, 45u8, 18u8, 155u8, 151u8, 81u8, 28u8, 86u8, 127u8, 189u8,
                            151u8, 49u8, 61u8, 12u8, 149u8, 84u8, 61u8, 110u8, 197u8, 200u8, 140u8,
                            37u8, 100u8, 14u8, 162u8, 158u8, 161u8, 48u8, 117u8, 102u8, 61u8,
                        ],
                    )
                }
                #[doc = " The set of open multisig operations."]
                pub fn multisigs(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::multisigs::Param0>,
                    _1: impl ::std::borrow::Borrow<types::multisigs::Param1>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::multisigs::Multisigs,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Multisig",
                        "Multisigs",
                        vec![
                            ::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
                            ::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
                        ],
                        [
                            154u8, 109u8, 45u8, 18u8, 155u8, 151u8, 81u8, 28u8, 86u8, 127u8, 189u8,
                            151u8, 49u8, 61u8, 12u8, 149u8, 84u8, 61u8, 110u8, 197u8, 200u8, 140u8,
                            37u8, 100u8, 14u8, 162u8, 158u8, 161u8, 48u8, 117u8, 102u8, 61u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                #[doc = " The base amount of currency needed to reserve for creating a multisig execution or to"]
                #[doc = " store a dispatch call for later."]
                #[doc = ""]
                #[doc = " This is held for an additional storage item whose value size is"]
                #[doc = " `4 + sizeof((BlockNumber, Balance, AccountId))` bytes and whose key size is"]
                #[doc = " `32 + sizeof(AccountId)` bytes."]
                pub fn deposit_base(&self) -> ::subxt::constants::Address<::core::primitive::u128> {
                    ::subxt::constants::Address::new_static(
                        "Multisig",
                        "DepositBase",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
                #[doc = " The amount of currency needed per unit threshold when creating a multisig execution."]
                #[doc = ""]
                #[doc = " This is held for adding 32 bytes more into a pre-existing storage value."]
                pub fn deposit_factor(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u128> {
                    ::subxt::constants::Address::new_static(
                        "Multisig",
                        "DepositFactor",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
                #[doc = " The maximum amount of signatories allowed in the multisig."]
                pub fn max_signatories(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "Multisig",
                        "MaxSignatories",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod bridge_relayers {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "The `Error` enum of this pallet."]
        pub type Error = runtime_types::pallet_bridge_relayers::pallet::Error;
        #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
        pub type Call = runtime_types::pallet_bridge_relayers::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "See [`Pallet::claim_rewards`]."]
                pub struct ClaimRewards {
                    pub rewards_account_params: claim_rewards::RewardsAccountParams,
                }
                pub mod claim_rewards {
                    use super::runtime_types;
                    pub type RewardsAccountParams =
                        runtime_types::bp_relayers::RewardsAccountParams;
                }
                impl ::subxt::blocks::StaticExtrinsic for ClaimRewards {
                    const PALLET: &'static str = "BridgeRelayers";
                    const CALL: &'static str = "claim_rewards";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "See [`Pallet::register`]."]
                pub struct Register {
                    pub valid_till: register::ValidTill,
                }
                pub mod register {
                    use super::runtime_types;
                    pub type ValidTill = ::core::primitive::u32;
                }
                impl ::subxt::blocks::StaticExtrinsic for Register {
                    const PALLET: &'static str = "BridgeRelayers";
                    const CALL: &'static str = "register";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "See [`Pallet::deregister`]."]
                pub struct Deregister;
                impl ::subxt::blocks::StaticExtrinsic for Deregister {
                    const PALLET: &'static str = "BridgeRelayers";
                    const CALL: &'static str = "deregister";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "See [`Pallet::claim_rewards`]."]
                pub fn claim_rewards(
                    &self,
                    rewards_account_params: types::claim_rewards::RewardsAccountParams,
                ) -> ::subxt::tx::Payload<types::ClaimRewards> {
                    ::subxt::tx::Payload::new_static(
                        "BridgeRelayers",
                        "claim_rewards",
                        types::ClaimRewards {
                            rewards_account_params,
                        },
                        [
                            109u8, 5u8, 147u8, 146u8, 56u8, 13u8, 131u8, 125u8, 151u8, 149u8,
                            150u8, 182u8, 14u8, 83u8, 186u8, 218u8, 107u8, 118u8, 105u8, 139u8,
                            11u8, 180u8, 175u8, 243u8, 12u8, 212u8, 55u8, 194u8, 75u8, 243u8,
                            229u8, 66u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::register`]."]
                pub fn register(
                    &self,
                    valid_till: types::register::ValidTill,
                ) -> ::subxt::tx::Payload<types::Register> {
                    ::subxt::tx::Payload::new_static(
                        "BridgeRelayers",
                        "register",
                        types::Register { valid_till },
                        [
                            115u8, 200u8, 77u8, 82u8, 58u8, 8u8, 55u8, 64u8, 26u8, 194u8, 1u8,
                            238u8, 115u8, 54u8, 106u8, 78u8, 72u8, 134u8, 231u8, 178u8, 249u8,
                            107u8, 181u8, 253u8, 121u8, 174u8, 22u8, 106u8, 212u8, 145u8, 33u8,
                            78u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::deregister`]."]
                pub fn deregister(&self) -> ::subxt::tx::Payload<types::Deregister> {
                    ::subxt::tx::Payload::new_static(
                        "BridgeRelayers",
                        "deregister",
                        types::Deregister {},
                        [
                            228u8, 7u8, 6u8, 52u8, 110u8, 101u8, 41u8, 226u8, 254u8, 53u8, 44u8,
                            229u8, 20u8, 205u8, 131u8, 91u8, 118u8, 71u8, 43u8, 97u8, 99u8, 205u8,
                            75u8, 146u8, 27u8, 144u8, 219u8, 167u8, 98u8, 120u8, 11u8, 151u8,
                        ],
                    )
                }
            }
        }
        #[doc = "The `Event` enum of this pallet"]
        pub type Event = runtime_types::pallet_bridge_relayers::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Relayer reward has been registered and may be claimed later."]
            pub struct RewardRegistered {
                pub relayer: reward_registered::Relayer,
                pub rewards_account_params: reward_registered::RewardsAccountParams,
                pub reward: reward_registered::Reward,
            }
            pub mod reward_registered {
                use super::runtime_types;
                pub type Relayer = ::subxt::utils::AccountId32;
                pub type RewardsAccountParams = runtime_types::bp_relayers::RewardsAccountParams;
                pub type Reward = ::core::primitive::u128;
            }
            impl ::subxt::events::StaticEvent for RewardRegistered {
                const PALLET: &'static str = "BridgeRelayers";
                const EVENT: &'static str = "RewardRegistered";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Reward has been paid to the relayer."]
            pub struct RewardPaid {
                pub relayer: reward_paid::Relayer,
                pub rewards_account_params: reward_paid::RewardsAccountParams,
                pub reward: reward_paid::Reward,
            }
            pub mod reward_paid {
                use super::runtime_types;
                pub type Relayer = ::subxt::utils::AccountId32;
                pub type RewardsAccountParams = runtime_types::bp_relayers::RewardsAccountParams;
                pub type Reward = ::core::primitive::u128;
            }
            impl ::subxt::events::StaticEvent for RewardPaid {
                const PALLET: &'static str = "BridgeRelayers";
                const EVENT: &'static str = "RewardPaid";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Relayer registration has been added or updated."]
            pub struct RegistrationUpdated {
                pub relayer: registration_updated::Relayer,
                pub registration: registration_updated::Registration,
            }
            pub mod registration_updated {
                use super::runtime_types;
                pub type Relayer = ::subxt::utils::AccountId32;
                pub type Registration = runtime_types::bp_relayers::registration::Registration<
                    ::core::primitive::u32,
                    ::core::primitive::u128,
                >;
            }
            impl ::subxt::events::StaticEvent for RegistrationUpdated {
                const PALLET: &'static str = "BridgeRelayers";
                const EVENT: &'static str = "RegistrationUpdated";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Relayer has been `deregistered`."]
            pub struct Deregistered {
                pub relayer: deregistered::Relayer,
            }
            pub mod deregistered {
                use super::runtime_types;
                pub type Relayer = ::subxt::utils::AccountId32;
            }
            impl ::subxt::events::StaticEvent for Deregistered {
                const PALLET: &'static str = "BridgeRelayers";
                const EVENT: &'static str = "Deregistered";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Relayer has been slashed and `deregistered`."]
            pub struct SlashedAndDeregistered {
                pub relayer: slashed_and_deregistered::Relayer,
                pub registration: slashed_and_deregistered::Registration,
            }
            pub mod slashed_and_deregistered {
                use super::runtime_types;
                pub type Relayer = ::subxt::utils::AccountId32;
                pub type Registration = runtime_types::bp_relayers::registration::Registration<
                    ::core::primitive::u32,
                    ::core::primitive::u128,
                >;
            }
            impl ::subxt::events::StaticEvent for SlashedAndDeregistered {
                const PALLET: &'static str = "BridgeRelayers";
                const EVENT: &'static str = "SlashedAndDeregistered";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub mod types {
                use super::runtime_types;
                pub mod relayer_rewards {
                    use super::runtime_types;
                    pub type RelayerRewards = ::core::primitive::u128;
                    pub type Param0 = ::subxt::utils::AccountId32;
                    pub type Param1 = runtime_types::bp_relayers::RewardsAccountParams;
                }
                pub mod registered_relayers {
                    use super::runtime_types;
                    pub type RegisteredRelayers =
                        runtime_types::bp_relayers::registration::Registration<
                            ::core::primitive::u32,
                            ::core::primitive::u128,
                        >;
                    pub type Param0 = ::subxt::utils::AccountId32;
                }
            }
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " Map of the relayer => accumulated reward."]
                pub fn relayer_rewards_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::relayer_rewards::RelayerRewards,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "BridgeRelayers",
                        "RelayerRewards",
                        vec![],
                        [
                            6u8, 119u8, 6u8, 44u8, 91u8, 71u8, 77u8, 77u8, 22u8, 199u8, 252u8,
                            87u8, 243u8, 166u8, 167u8, 68u8, 4u8, 250u8, 125u8, 165u8, 37u8, 187u8,
                            229u8, 19u8, 214u8, 125u8, 110u8, 44u8, 194u8, 12u8, 168u8, 204u8,
                        ],
                    )
                }
                #[doc = " Map of the relayer => accumulated reward."]
                pub fn relayer_rewards_iter1(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::relayer_rewards::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::relayer_rewards::RelayerRewards,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "BridgeRelayers",
                        "RelayerRewards",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            6u8, 119u8, 6u8, 44u8, 91u8, 71u8, 77u8, 77u8, 22u8, 199u8, 252u8,
                            87u8, 243u8, 166u8, 167u8, 68u8, 4u8, 250u8, 125u8, 165u8, 37u8, 187u8,
                            229u8, 19u8, 214u8, 125u8, 110u8, 44u8, 194u8, 12u8, 168u8, 204u8,
                        ],
                    )
                }
                #[doc = " Map of the relayer => accumulated reward."]
                pub fn relayer_rewards(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::relayer_rewards::Param0>,
                    _1: impl ::std::borrow::Borrow<types::relayer_rewards::Param1>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::relayer_rewards::RelayerRewards,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "BridgeRelayers",
                        "RelayerRewards",
                        vec![
                            ::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
                            ::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
                        ],
                        [
                            6u8, 119u8, 6u8, 44u8, 91u8, 71u8, 77u8, 77u8, 22u8, 199u8, 252u8,
                            87u8, 243u8, 166u8, 167u8, 68u8, 4u8, 250u8, 125u8, 165u8, 37u8, 187u8,
                            229u8, 19u8, 214u8, 125u8, 110u8, 44u8, 194u8, 12u8, 168u8, 204u8,
                        ],
                    )
                }
                #[doc = " Relayers that have reserved some of their balance to get free priority boost"]
                #[doc = " for their message delivery transactions."]
                #[doc = ""]
                #[doc = " Other relayers may submit transactions as well, but they will have default"]
                #[doc = " priority and will be rejected (without significant tip) in case if registered"]
                #[doc = " relayer is present."]
                pub fn registered_relayers_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::registered_relayers::RegisteredRelayers,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "BridgeRelayers",
                        "RegisteredRelayers",
                        vec![],
                        [
                            201u8, 78u8, 131u8, 175u8, 50u8, 147u8, 55u8, 118u8, 94u8, 0u8, 133u8,
                            103u8, 197u8, 85u8, 106u8, 66u8, 40u8, 84u8, 218u8, 92u8, 11u8, 180u8,
                            231u8, 125u8, 88u8, 215u8, 72u8, 112u8, 142u8, 136u8, 255u8, 50u8,
                        ],
                    )
                }
                #[doc = " Relayers that have reserved some of their balance to get free priority boost"]
                #[doc = " for their message delivery transactions."]
                #[doc = ""]
                #[doc = " Other relayers may submit transactions as well, but they will have default"]
                #[doc = " priority and will be rejected (without significant tip) in case if registered"]
                #[doc = " relayer is present."]
                pub fn registered_relayers(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::registered_relayers::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::registered_relayers::RegisteredRelayers,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "BridgeRelayers",
                        "RegisteredRelayers",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            201u8, 78u8, 131u8, 175u8, 50u8, 147u8, 55u8, 118u8, 94u8, 0u8, 133u8,
                            103u8, 197u8, 85u8, 106u8, 66u8, 40u8, 84u8, 218u8, 92u8, 11u8, 180u8,
                            231u8, 125u8, 88u8, 215u8, 72u8, 112u8, 142u8, 136u8, 255u8, 50u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod bridge_westend_grandpa {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "The `Error` enum of this pallet."]
        pub type Error = runtime_types::pallet_bridge_grandpa::pallet::Error;
        #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
        pub type Call = runtime_types::pallet_bridge_grandpa::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "See [`Pallet::submit_finality_proof`]."]
                pub struct SubmitFinalityProof {
                    pub finality_target: ::std::boxed::Box<submit_finality_proof::FinalityTarget>,
                    pub justification: submit_finality_proof::Justification,
                }
                pub mod submit_finality_proof {
                    use super::runtime_types;
                    pub type FinalityTarget =
                        runtime_types::sp_runtime::generic::header::Header<::core::primitive::u32>;
                    pub type Justification =
                        runtime_types::bp_header_chain::justification::GrandpaJustification<
                            runtime_types::sp_runtime::generic::header::Header<
                                ::core::primitive::u32,
                            >,
                        >;
                }
                impl ::subxt::blocks::StaticExtrinsic for SubmitFinalityProof {
                    const PALLET: &'static str = "BridgeWestendGrandpa";
                    const CALL: &'static str = "submit_finality_proof";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "See [`Pallet::initialize`]."]
                pub struct Initialize {
                    pub init_data: initialize::InitData,
                }
                pub mod initialize {
                    use super::runtime_types;
                    pub type InitData = runtime_types::bp_header_chain::InitializationData<
                        runtime_types::sp_runtime::generic::header::Header<::core::primitive::u32>,
                    >;
                }
                impl ::subxt::blocks::StaticExtrinsic for Initialize {
                    const PALLET: &'static str = "BridgeWestendGrandpa";
                    const CALL: &'static str = "initialize";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "See [`Pallet::set_owner`]."]
                pub struct SetOwner {
                    pub new_owner: set_owner::NewOwner,
                }
                pub mod set_owner {
                    use super::runtime_types;
                    pub type NewOwner = ::core::option::Option<::subxt::utils::AccountId32>;
                }
                impl ::subxt::blocks::StaticExtrinsic for SetOwner {
                    const PALLET: &'static str = "BridgeWestendGrandpa";
                    const CALL: &'static str = "set_owner";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "See [`Pallet::set_operating_mode`]."]
                pub struct SetOperatingMode {
                    pub operating_mode: set_operating_mode::OperatingMode,
                }
                pub mod set_operating_mode {
                    use super::runtime_types;
                    pub type OperatingMode = runtime_types::bp_runtime::BasicOperatingMode;
                }
                impl ::subxt::blocks::StaticExtrinsic for SetOperatingMode {
                    const PALLET: &'static str = "BridgeWestendGrandpa";
                    const CALL: &'static str = "set_operating_mode";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "See [`Pallet::submit_finality_proof`]."]
                pub fn submit_finality_proof(
                    &self,
                    finality_target: types::submit_finality_proof::FinalityTarget,
                    justification: types::submit_finality_proof::Justification,
                ) -> ::subxt::tx::Payload<types::SubmitFinalityProof> {
                    ::subxt::tx::Payload::new_static(
                        "BridgeWestendGrandpa",
                        "submit_finality_proof",
                        types::SubmitFinalityProof {
                            finality_target: ::std::boxed::Box::new(finality_target),
                            justification,
                        },
                        [
                            22u8, 27u8, 236u8, 29u8, 218u8, 67u8, 242u8, 254u8, 46u8, 49u8, 52u8,
                            119u8, 114u8, 108u8, 226u8, 215u8, 115u8, 23u8, 153u8, 73u8, 7u8,
                            148u8, 22u8, 62u8, 129u8, 36u8, 170u8, 31u8, 101u8, 100u8, 35u8, 146u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::initialize`]."]
                pub fn initialize(
                    &self,
                    init_data: types::initialize::InitData,
                ) -> ::subxt::tx::Payload<types::Initialize> {
                    ::subxt::tx::Payload::new_static(
                        "BridgeWestendGrandpa",
                        "initialize",
                        types::Initialize { init_data },
                        [
                            40u8, 36u8, 80u8, 133u8, 150u8, 154u8, 62u8, 22u8, 230u8, 227u8, 243u8,
                            146u8, 99u8, 89u8, 167u8, 71u8, 27u8, 134u8, 193u8, 196u8, 222u8,
                            203u8, 40u8, 79u8, 171u8, 66u8, 178u8, 26u8, 25u8, 113u8, 183u8, 47u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::set_owner`]."]
                pub fn set_owner(
                    &self,
                    new_owner: types::set_owner::NewOwner,
                ) -> ::subxt::tx::Payload<types::SetOwner> {
                    ::subxt::tx::Payload::new_static(
                        "BridgeWestendGrandpa",
                        "set_owner",
                        types::SetOwner { new_owner },
                        [
                            20u8, 198u8, 11u8, 168u8, 212u8, 75u8, 67u8, 127u8, 41u8, 66u8, 58u8,
                            216u8, 1u8, 13u8, 226u8, 140u8, 176u8, 32u8, 232u8, 54u8, 86u8, 52u8,
                            202u8, 80u8, 189u8, 229u8, 250u8, 217u8, 121u8, 45u8, 212u8, 215u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::set_operating_mode`]."]
                pub fn set_operating_mode(
                    &self,
                    operating_mode: types::set_operating_mode::OperatingMode,
                ) -> ::subxt::tx::Payload<types::SetOperatingMode> {
                    ::subxt::tx::Payload::new_static(
                        "BridgeWestendGrandpa",
                        "set_operating_mode",
                        types::SetOperatingMode { operating_mode },
                        [
                            210u8, 175u8, 1u8, 180u8, 102u8, 1u8, 114u8, 147u8, 103u8, 194u8,
                            200u8, 153u8, 180u8, 193u8, 53u8, 23u8, 75u8, 80u8, 67u8, 162u8, 162u8,
                            241u8, 251u8, 8u8, 19u8, 100u8, 103u8, 35u8, 35u8, 161u8, 206u8, 85u8,
                        ],
                    )
                }
            }
        }
        #[doc = "The `Event` enum of this pallet"]
        pub type Event = runtime_types::pallet_bridge_grandpa::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Best finalized chain header has been updated to the header with given number and hash."]
            pub struct UpdatedBestFinalizedHeader {
                pub number: updated_best_finalized_header::Number,
                pub hash: updated_best_finalized_header::Hash,
                pub grandpa_info: updated_best_finalized_header::GrandpaInfo,
            }
            pub mod updated_best_finalized_header {
                use super::runtime_types;
                pub type Number = ::core::primitive::u32;
                pub type Hash = ::subxt::utils::H256;
                pub type GrandpaInfo = runtime_types::bp_header_chain::HeaderFinalityInfo<
                    runtime_types::bp_header_chain::justification::GrandpaJustification<
                        runtime_types::sp_runtime::generic::header::Header<::core::primitive::u32>,
                    >,
                    runtime_types::bp_header_chain::AuthoritySet,
                >;
            }
            impl ::subxt::events::StaticEvent for UpdatedBestFinalizedHeader {
                const PALLET: &'static str = "BridgeWestendGrandpa";
                const EVENT: &'static str = "UpdatedBestFinalizedHeader";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub mod types {
                use super::runtime_types;
                pub mod free_mandatory_headers_remaining {
                    use super::runtime_types;
                    pub type FreeMandatoryHeadersRemaining = ::core::primitive::u32;
                }
                pub mod initial_hash {
                    use super::runtime_types;
                    pub type InitialHash = ::subxt::utils::H256;
                }
                pub mod best_finalized {
                    use super::runtime_types;
                    pub type BestFinalized = runtime_types::bp_runtime::HeaderId<
                        ::subxt::utils::H256,
                        ::core::primitive::u32,
                    >;
                }
                pub mod imported_hashes {
                    use super::runtime_types;
                    pub type ImportedHashes = ::subxt::utils::H256;
                    pub type Param0 = ::core::primitive::u32;
                }
                pub mod imported_hashes_pointer {
                    use super::runtime_types;
                    pub type ImportedHashesPointer = ::core::primitive::u32;
                }
                pub mod imported_headers {
                    use super::runtime_types;
                    pub type ImportedHeaders = runtime_types::bp_header_chain::StoredHeaderData<
                        ::core::primitive::u32,
                        ::subxt::utils::H256,
                    >;
                    pub type Param0 = ::subxt::utils::H256;
                }
                pub mod current_authority_set {
                    use super::runtime_types;
                    pub type CurrentAuthoritySet =
                        runtime_types::pallet_bridge_grandpa::storage_types::StoredAuthoritySet;
                }
                pub mod pallet_owner {
                    use super::runtime_types;
                    pub type PalletOwner = ::subxt::utils::AccountId32;
                }
                pub mod pallet_operating_mode {
                    use super::runtime_types;
                    pub type PalletOperatingMode = runtime_types::bp_runtime::BasicOperatingMode;
                }
            }
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " Number mandatory headers that we may accept in the current block for free (returning"]
                #[doc = " `Pays::No`)."]
                #[doc = ""]
                #[doc = " If the `FreeMandatoryHeadersRemaining` hits zero, all following mandatory headers in the"]
                #[doc = " current block are accepted with fee (`Pays::Yes` is returned)."]
                #[doc = ""]
                #[doc = " The `FreeMandatoryHeadersRemaining` is an ephemeral value that is set to"]
                #[doc = " `MaxFreeMandatoryHeadersPerBlock` at each block initialization and is killed on block"]
                #[doc = " finalization. So it never ends up in the storage trie."]
                pub fn free_mandatory_headers_remaining(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::free_mandatory_headers_remaining::FreeMandatoryHeadersRemaining,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "BridgeWestendGrandpa",
                        "FreeMandatoryHeadersRemaining",
                        vec![],
                        [
                            203u8, 50u8, 205u8, 0u8, 86u8, 33u8, 88u8, 61u8, 228u8, 224u8, 22u8,
                            239u8, 84u8, 57u8, 84u8, 135u8, 82u8, 163u8, 163u8, 123u8, 82u8, 115u8,
                            211u8, 173u8, 54u8, 143u8, 241u8, 162u8, 112u8, 158u8, 210u8, 254u8,
                        ],
                    )
                }
                #[doc = " Hash of the header used to bootstrap the pallet."]
                pub fn initial_hash(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::initial_hash::InitialHash,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "BridgeWestendGrandpa",
                        "InitialHash",
                        vec![],
                        [
                            112u8, 194u8, 193u8, 168u8, 95u8, 98u8, 49u8, 51u8, 254u8, 106u8, 65u8,
                            231u8, 91u8, 67u8, 54u8, 129u8, 72u8, 35u8, 131u8, 59u8, 238u8, 48u8,
                            55u8, 214u8, 104u8, 60u8, 21u8, 252u8, 186u8, 167u8, 108u8, 225u8,
                        ],
                    )
                }
                #[doc = " Hash of the best finalized header."]
                pub fn best_finalized(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::best_finalized::BestFinalized,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "BridgeWestendGrandpa",
                        "BestFinalized",
                        vec![],
                        [
                            101u8, 247u8, 117u8, 8u8, 64u8, 66u8, 51u8, 17u8, 158u8, 37u8, 100u8,
                            24u8, 104u8, 58u8, 215u8, 15u8, 88u8, 161u8, 1u8, 182u8, 142u8, 2u8,
                            73u8, 192u8, 68u8, 236u8, 62u8, 198u8, 128u8, 57u8, 181u8, 235u8,
                        ],
                    )
                }
                #[doc = " A ring buffer of imported hashes. Ordered by the insertion time."]
                pub fn imported_hashes_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::imported_hashes::ImportedHashes,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "BridgeWestendGrandpa",
                        "ImportedHashes",
                        vec![],
                        [
                            105u8, 81u8, 158u8, 69u8, 52u8, 176u8, 14u8, 7u8, 137u8, 213u8, 9u8,
                            157u8, 226u8, 56u8, 32u8, 55u8, 178u8, 133u8, 50u8, 172u8, 168u8,
                            162u8, 92u8, 180u8, 252u8, 39u8, 183u8, 219u8, 136u8, 81u8, 161u8,
                            187u8,
                        ],
                    )
                }
                #[doc = " A ring buffer of imported hashes. Ordered by the insertion time."]
                pub fn imported_hashes(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::imported_hashes::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::imported_hashes::ImportedHashes,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "BridgeWestendGrandpa",
                        "ImportedHashes",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            105u8, 81u8, 158u8, 69u8, 52u8, 176u8, 14u8, 7u8, 137u8, 213u8, 9u8,
                            157u8, 226u8, 56u8, 32u8, 55u8, 178u8, 133u8, 50u8, 172u8, 168u8,
                            162u8, 92u8, 180u8, 252u8, 39u8, 183u8, 219u8, 136u8, 81u8, 161u8,
                            187u8,
                        ],
                    )
                }
                #[doc = " Current ring buffer position."]
                pub fn imported_hashes_pointer(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::imported_hashes_pointer::ImportedHashesPointer,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "BridgeWestendGrandpa",
                        "ImportedHashesPointer",
                        vec![],
                        [
                            187u8, 146u8, 130u8, 217u8, 62u8, 168u8, 125u8, 61u8, 61u8, 126u8,
                            255u8, 205u8, 13u8, 185u8, 116u8, 160u8, 201u8, 60u8, 176u8, 125u8,
                            212u8, 99u8, 226u8, 32u8, 180u8, 147u8, 92u8, 162u8, 209u8, 244u8,
                            185u8, 41u8,
                        ],
                    )
                }
                #[doc = " Relevant fields of imported headers."]
                pub fn imported_headers_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::imported_headers::ImportedHeaders,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "BridgeWestendGrandpa",
                        "ImportedHeaders",
                        vec![],
                        [
                            108u8, 225u8, 24u8, 118u8, 237u8, 166u8, 174u8, 244u8, 198u8, 255u8,
                            156u8, 66u8, 60u8, 174u8, 90u8, 102u8, 32u8, 109u8, 119u8, 49u8, 107u8,
                            255u8, 119u8, 48u8, 11u8, 206u8, 196u8, 19u8, 19u8, 217u8, 205u8, 63u8,
                        ],
                    )
                }
                #[doc = " Relevant fields of imported headers."]
                pub fn imported_headers(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::imported_headers::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::imported_headers::ImportedHeaders,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "BridgeWestendGrandpa",
                        "ImportedHeaders",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            108u8, 225u8, 24u8, 118u8, 237u8, 166u8, 174u8, 244u8, 198u8, 255u8,
                            156u8, 66u8, 60u8, 174u8, 90u8, 102u8, 32u8, 109u8, 119u8, 49u8, 107u8,
                            255u8, 119u8, 48u8, 11u8, 206u8, 196u8, 19u8, 19u8, 217u8, 205u8, 63u8,
                        ],
                    )
                }
                #[doc = " The current GRANDPA Authority set."]
                pub fn current_authority_set(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::current_authority_set::CurrentAuthoritySet,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "BridgeWestendGrandpa",
                        "CurrentAuthoritySet",
                        vec![],
                        [
                            208u8, 195u8, 73u8, 207u8, 27u8, 33u8, 121u8, 47u8, 92u8, 136u8, 18u8,
                            2u8, 52u8, 229u8, 56u8, 63u8, 147u8, 127u8, 255u8, 178u8, 66u8, 96u8,
                            225u8, 115u8, 68u8, 138u8, 38u8, 211u8, 184u8, 190u8, 49u8, 95u8,
                        ],
                    )
                }
                #[doc = " Optional pallet owner."]
                #[doc = ""]
                #[doc = " Pallet owner has a right to halt all pallet operations and then resume it. If it is"]
                #[doc = " `None`, then there are no direct ways to halt/resume pallet operations, but other"]
                #[doc = " runtime methods may still be used to do that (i.e. democracy::referendum to update halt"]
                #[doc = " flag directly or call the `halt_operations`)."]
                pub fn pallet_owner(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::pallet_owner::PalletOwner,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "BridgeWestendGrandpa",
                        "PalletOwner",
                        vec![],
                        [
                            203u8, 207u8, 161u8, 128u8, 147u8, 32u8, 171u8, 173u8, 201u8, 104u8,
                            232u8, 15u8, 70u8, 88u8, 29u8, 94u8, 179u8, 140u8, 252u8, 200u8, 200u8,
                            244u8, 89u8, 199u8, 118u8, 34u8, 197u8, 77u8, 35u8, 11u8, 250u8, 210u8,
                        ],
                    )
                }
                #[doc = " The current operating mode of the pallet."]
                #[doc = ""]
                #[doc = " Depending on the mode either all, or no transactions will be allowed."]
                pub fn pallet_operating_mode(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::pallet_operating_mode::PalletOperatingMode,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "BridgeWestendGrandpa",
                        "PalletOperatingMode",
                        vec![],
                        [
                            182u8, 210u8, 140u8, 248u8, 106u8, 134u8, 58u8, 208u8, 14u8, 227u8,
                            182u8, 201u8, 140u8, 172u8, 231u8, 198u8, 133u8, 182u8, 212u8, 92u8,
                            76u8, 105u8, 80u8, 209u8, 162u8, 49u8, 119u8, 26u8, 100u8, 3u8, 18u8,
                            99u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                #[doc = " Maximal number of \"free\" mandatory header transactions per block."]
                #[doc = ""]
                #[doc = " To be able to track the bridged chain, the pallet requires all headers that are"]
                #[doc = " changing GRANDPA authorities set at the bridged chain (we call them mandatory)."]
                #[doc = " So it is a common good deed to submit mandatory headers to the pallet. However, if the"]
                #[doc = " bridged chain gets compromised, its validators may generate as many mandatory headers"]
                #[doc = " as they want. And they may fill the whole block (at this chain) for free. This constants"]
                #[doc = " limits number of calls that we may refund in a single block. All calls above this"]
                #[doc = " limit are accepted, but are not refunded."]
                pub fn max_free_mandatory_headers_per_block(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "BridgeWestendGrandpa",
                        "MaxFreeMandatoryHeadersPerBlock",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " Maximal number of finalized headers to keep in the storage."]
                #[doc = ""]
                #[doc = " The setting is there to prevent growing the on-chain state indefinitely. Note"]
                #[doc = " the setting does not relate to block numbers - we will simply keep as much items"]
                #[doc = " in the storage, so it doesn't guarantee any fixed timeframe for finality headers."]
                #[doc = ""]
                #[doc = " Incautious change of this constant may lead to orphan entries in the runtime storage."]
                pub fn headers_to_keep(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "BridgeWestendGrandpa",
                        "HeadersToKeep",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod bridge_westend_parachains {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "The `Error` enum of this pallet."]
        pub type Error = runtime_types::pallet_bridge_parachains::pallet::Error;
        #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
        pub type Call = runtime_types::pallet_bridge_parachains::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "See [`Pallet::submit_parachain_heads`]."]
                pub struct SubmitParachainHeads {
                    pub at_relay_block: submit_parachain_heads::AtRelayBlock,
                    pub parachains: submit_parachain_heads::Parachains,
                    pub parachain_heads_proof: submit_parachain_heads::ParachainHeadsProof,
                }
                pub mod submit_parachain_heads {
                    use super::runtime_types;
                    pub type AtRelayBlock = (::core::primitive::u32, ::subxt::utils::H256);
                    pub type Parachains = ::std::vec::Vec<(
                        runtime_types::bp_polkadot_core::parachains::ParaId,
                        ::subxt::utils::H256,
                    )>;
                    pub type ParachainHeadsProof =
                        runtime_types::bp_polkadot_core::parachains::ParaHeadsProof;
                }
                impl ::subxt::blocks::StaticExtrinsic for SubmitParachainHeads {
                    const PALLET: &'static str = "BridgeWestendParachains";
                    const CALL: &'static str = "submit_parachain_heads";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "See [`Pallet::set_owner`]."]
                pub struct SetOwner {
                    pub new_owner: set_owner::NewOwner,
                }
                pub mod set_owner {
                    use super::runtime_types;
                    pub type NewOwner = ::core::option::Option<::subxt::utils::AccountId32>;
                }
                impl ::subxt::blocks::StaticExtrinsic for SetOwner {
                    const PALLET: &'static str = "BridgeWestendParachains";
                    const CALL: &'static str = "set_owner";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "See [`Pallet::set_operating_mode`]."]
                pub struct SetOperatingMode {
                    pub operating_mode: set_operating_mode::OperatingMode,
                }
                pub mod set_operating_mode {
                    use super::runtime_types;
                    pub type OperatingMode = runtime_types::bp_runtime::BasicOperatingMode;
                }
                impl ::subxt::blocks::StaticExtrinsic for SetOperatingMode {
                    const PALLET: &'static str = "BridgeWestendParachains";
                    const CALL: &'static str = "set_operating_mode";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "See [`Pallet::submit_parachain_heads`]."]
                pub fn submit_parachain_heads(
                    &self,
                    at_relay_block: types::submit_parachain_heads::AtRelayBlock,
                    parachains: types::submit_parachain_heads::Parachains,
                    parachain_heads_proof: types::submit_parachain_heads::ParachainHeadsProof,
                ) -> ::subxt::tx::Payload<types::SubmitParachainHeads> {
                    ::subxt::tx::Payload::new_static(
                        "BridgeWestendParachains",
                        "submit_parachain_heads",
                        types::SubmitParachainHeads {
                            at_relay_block,
                            parachains,
                            parachain_heads_proof,
                        },
                        [
                            134u8, 141u8, 120u8, 2u8, 122u8, 102u8, 111u8, 162u8, 42u8, 35u8,
                            227u8, 177u8, 99u8, 244u8, 248u8, 27u8, 170u8, 128u8, 29u8, 236u8,
                            165u8, 83u8, 247u8, 123u8, 22u8, 241u8, 18u8, 108u8, 2u8, 147u8, 115u8,
                            53u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::set_owner`]."]
                pub fn set_owner(
                    &self,
                    new_owner: types::set_owner::NewOwner,
                ) -> ::subxt::tx::Payload<types::SetOwner> {
                    ::subxt::tx::Payload::new_static(
                        "BridgeWestendParachains",
                        "set_owner",
                        types::SetOwner { new_owner },
                        [
                            20u8, 198u8, 11u8, 168u8, 212u8, 75u8, 67u8, 127u8, 41u8, 66u8, 58u8,
                            216u8, 1u8, 13u8, 226u8, 140u8, 176u8, 32u8, 232u8, 54u8, 86u8, 52u8,
                            202u8, 80u8, 189u8, 229u8, 250u8, 217u8, 121u8, 45u8, 212u8, 215u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::set_operating_mode`]."]
                pub fn set_operating_mode(
                    &self,
                    operating_mode: types::set_operating_mode::OperatingMode,
                ) -> ::subxt::tx::Payload<types::SetOperatingMode> {
                    ::subxt::tx::Payload::new_static(
                        "BridgeWestendParachains",
                        "set_operating_mode",
                        types::SetOperatingMode { operating_mode },
                        [
                            210u8, 175u8, 1u8, 180u8, 102u8, 1u8, 114u8, 147u8, 103u8, 194u8,
                            200u8, 153u8, 180u8, 193u8, 53u8, 23u8, 75u8, 80u8, 67u8, 162u8, 162u8,
                            241u8, 251u8, 8u8, 19u8, 100u8, 103u8, 35u8, 35u8, 161u8, 206u8, 85u8,
                        ],
                    )
                }
            }
        }
        #[doc = "The `Event` enum of this pallet"]
        pub type Event = runtime_types::pallet_bridge_parachains::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "The caller has provided head of parachain that the pallet is not configured to track."]
            pub struct UntrackedParachainRejected {
                pub parachain: untracked_parachain_rejected::Parachain,
            }
            pub mod untracked_parachain_rejected {
                use super::runtime_types;
                pub type Parachain = runtime_types::bp_polkadot_core::parachains::ParaId;
            }
            impl ::subxt::events::StaticEvent for UntrackedParachainRejected {
                const PALLET: &'static str = "BridgeWestendParachains";
                const EVENT: &'static str = "UntrackedParachainRejected";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "The caller has declared that he has provided given parachain head, but it is missing"]
            #[doc = "from the storage proof."]
            pub struct MissingParachainHead {
                pub parachain: missing_parachain_head::Parachain,
            }
            pub mod missing_parachain_head {
                use super::runtime_types;
                pub type Parachain = runtime_types::bp_polkadot_core::parachains::ParaId;
            }
            impl ::subxt::events::StaticEvent for MissingParachainHead {
                const PALLET: &'static str = "BridgeWestendParachains";
                const EVENT: &'static str = "MissingParachainHead";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "The caller has provided parachain head hash that is not matching the hash read from the"]
            #[doc = "storage proof."]
            pub struct IncorrectParachainHeadHash {
                pub parachain: incorrect_parachain_head_hash::Parachain,
                pub parachain_head_hash: incorrect_parachain_head_hash::ParachainHeadHash,
                pub actual_parachain_head_hash:
                    incorrect_parachain_head_hash::ActualParachainHeadHash,
            }
            pub mod incorrect_parachain_head_hash {
                use super::runtime_types;
                pub type Parachain = runtime_types::bp_polkadot_core::parachains::ParaId;
                pub type ParachainHeadHash = ::subxt::utils::H256;
                pub type ActualParachainHeadHash = ::subxt::utils::H256;
            }
            impl ::subxt::events::StaticEvent for IncorrectParachainHeadHash {
                const PALLET: &'static str = "BridgeWestendParachains";
                const EVENT: &'static str = "IncorrectParachainHeadHash";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "The caller has provided obsolete parachain head, which is already known to the pallet."]
            pub struct RejectedObsoleteParachainHead {
                pub parachain: rejected_obsolete_parachain_head::Parachain,
                pub parachain_head_hash: rejected_obsolete_parachain_head::ParachainHeadHash,
            }
            pub mod rejected_obsolete_parachain_head {
                use super::runtime_types;
                pub type Parachain = runtime_types::bp_polkadot_core::parachains::ParaId;
                pub type ParachainHeadHash = ::subxt::utils::H256;
            }
            impl ::subxt::events::StaticEvent for RejectedObsoleteParachainHead {
                const PALLET: &'static str = "BridgeWestendParachains";
                const EVENT: &'static str = "RejectedObsoleteParachainHead";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "The caller has provided parachain head that exceeds the maximal configured head size."]
            pub struct RejectedLargeParachainHead {
                pub parachain: rejected_large_parachain_head::Parachain,
                pub parachain_head_hash: rejected_large_parachain_head::ParachainHeadHash,
                pub parachain_head_size: rejected_large_parachain_head::ParachainHeadSize,
            }
            pub mod rejected_large_parachain_head {
                use super::runtime_types;
                pub type Parachain = runtime_types::bp_polkadot_core::parachains::ParaId;
                pub type ParachainHeadHash = ::subxt::utils::H256;
                pub type ParachainHeadSize = ::core::primitive::u32;
            }
            impl ::subxt::events::StaticEvent for RejectedLargeParachainHead {
                const PALLET: &'static str = "BridgeWestendParachains";
                const EVENT: &'static str = "RejectedLargeParachainHead";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Parachain head has been updated."]
            pub struct UpdatedParachainHead {
                pub parachain: updated_parachain_head::Parachain,
                pub parachain_head_hash: updated_parachain_head::ParachainHeadHash,
            }
            pub mod updated_parachain_head {
                use super::runtime_types;
                pub type Parachain = runtime_types::bp_polkadot_core::parachains::ParaId;
                pub type ParachainHeadHash = ::subxt::utils::H256;
            }
            impl ::subxt::events::StaticEvent for UpdatedParachainHead {
                const PALLET: &'static str = "BridgeWestendParachains";
                const EVENT: &'static str = "UpdatedParachainHead";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub mod types {
                use super::runtime_types;
                pub mod pallet_owner {
                    use super::runtime_types;
                    pub type PalletOwner = ::subxt::utils::AccountId32;
                }
                pub mod pallet_operating_mode {
                    use super::runtime_types;
                    pub type PalletOperatingMode = runtime_types::bp_runtime::BasicOperatingMode;
                }
                pub mod paras_info {
                    use super::runtime_types;
                    pub type ParasInfo = runtime_types::bp_parachains::ParaInfo;
                    pub type Param0 = runtime_types::bp_polkadot_core::parachains::ParaId;
                }
                pub mod imported_para_heads {
                    use super::runtime_types;
                    pub type ImportedParaHeads = runtime_types::bp_parachains::ParaStoredHeaderData;
                    pub type Param0 = runtime_types::bp_polkadot_core::parachains::ParaId;
                    pub type Param1 = ::subxt::utils::H256;
                }
                pub mod imported_para_hashes {
                    use super::runtime_types;
                    pub type ImportedParaHashes = ::subxt::utils::H256;
                    pub type Param0 = runtime_types::bp_polkadot_core::parachains::ParaId;
                    pub type Param1 = ::core::primitive::u32;
                }
            }
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " Optional pallet owner."]
                #[doc = ""]
                #[doc = " Pallet owner has a right to halt all pallet operations and then resume them. If it is"]
                #[doc = " `None`, then there are no direct ways to halt/resume pallet operations, but other"]
                #[doc = " runtime methods may still be used to do that (i.e. democracy::referendum to update halt"]
                #[doc = " flag directly or call the `halt_operations`)."]
                pub fn pallet_owner(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::pallet_owner::PalletOwner,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "BridgeWestendParachains",
                        "PalletOwner",
                        vec![],
                        [
                            203u8, 207u8, 161u8, 128u8, 147u8, 32u8, 171u8, 173u8, 201u8, 104u8,
                            232u8, 15u8, 70u8, 88u8, 29u8, 94u8, 179u8, 140u8, 252u8, 200u8, 200u8,
                            244u8, 89u8, 199u8, 118u8, 34u8, 197u8, 77u8, 35u8, 11u8, 250u8, 210u8,
                        ],
                    )
                }
                #[doc = " The current operating mode of the pallet."]
                #[doc = ""]
                #[doc = " Depending on the mode either all, or no transactions will be allowed."]
                pub fn pallet_operating_mode(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::pallet_operating_mode::PalletOperatingMode,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "BridgeWestendParachains",
                        "PalletOperatingMode",
                        vec![],
                        [
                            182u8, 210u8, 140u8, 248u8, 106u8, 134u8, 58u8, 208u8, 14u8, 227u8,
                            182u8, 201u8, 140u8, 172u8, 231u8, 198u8, 133u8, 182u8, 212u8, 92u8,
                            76u8, 105u8, 80u8, 209u8, 162u8, 49u8, 119u8, 26u8, 100u8, 3u8, 18u8,
                            99u8,
                        ],
                    )
                }
                #[doc = " Parachains info."]
                #[doc = ""]
                #[doc = " Contains the following info:"]
                #[doc = " - best parachain head hash"]
                #[doc = " - the head of the `ImportedParaHashes` ring buffer"]
                pub fn paras_info_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::paras_info::ParasInfo,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "BridgeWestendParachains",
                        "ParasInfo",
                        vec![],
                        [
                            205u8, 35u8, 77u8, 252u8, 179u8, 37u8, 198u8, 2u8, 174u8, 196u8, 177u8,
                            122u8, 144u8, 47u8, 142u8, 116u8, 33u8, 136u8, 97u8, 36u8, 133u8, 9u8,
                            211u8, 91u8, 87u8, 136u8, 217u8, 132u8, 71u8, 9u8, 120u8, 62u8,
                        ],
                    )
                }
                #[doc = " Parachains info."]
                #[doc = ""]
                #[doc = " Contains the following info:"]
                #[doc = " - best parachain head hash"]
                #[doc = " - the head of the `ImportedParaHashes` ring buffer"]
                pub fn paras_info(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::paras_info::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::paras_info::ParasInfo,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "BridgeWestendParachains",
                        "ParasInfo",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            205u8, 35u8, 77u8, 252u8, 179u8, 37u8, 198u8, 2u8, 174u8, 196u8, 177u8,
                            122u8, 144u8, 47u8, 142u8, 116u8, 33u8, 136u8, 97u8, 36u8, 133u8, 9u8,
                            211u8, 91u8, 87u8, 136u8, 217u8, 132u8, 71u8, 9u8, 120u8, 62u8,
                        ],
                    )
                }
                #[doc = " State roots of parachain heads which have been imported into the pallet."]
                pub fn imported_para_heads_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::imported_para_heads::ImportedParaHeads,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "BridgeWestendParachains",
                        "ImportedParaHeads",
                        vec![],
                        [
                            80u8, 43u8, 193u8, 231u8, 95u8, 226u8, 161u8, 6u8, 34u8, 25u8, 3u8,
                            184u8, 82u8, 35u8, 102u8, 88u8, 114u8, 23u8, 244u8, 72u8, 131u8, 146u8,
                            222u8, 196u8, 18u8, 103u8, 28u8, 71u8, 8u8, 60u8, 217u8, 111u8,
                        ],
                    )
                }
                #[doc = " State roots of parachain heads which have been imported into the pallet."]
                pub fn imported_para_heads_iter1(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::imported_para_heads::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::imported_para_heads::ImportedParaHeads,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "BridgeWestendParachains",
                        "ImportedParaHeads",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            80u8, 43u8, 193u8, 231u8, 95u8, 226u8, 161u8, 6u8, 34u8, 25u8, 3u8,
                            184u8, 82u8, 35u8, 102u8, 88u8, 114u8, 23u8, 244u8, 72u8, 131u8, 146u8,
                            222u8, 196u8, 18u8, 103u8, 28u8, 71u8, 8u8, 60u8, 217u8, 111u8,
                        ],
                    )
                }
                #[doc = " State roots of parachain heads which have been imported into the pallet."]
                pub fn imported_para_heads(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::imported_para_heads::Param0>,
                    _1: impl ::std::borrow::Borrow<types::imported_para_heads::Param1>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::imported_para_heads::ImportedParaHeads,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "BridgeWestendParachains",
                        "ImportedParaHeads",
                        vec![
                            ::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
                            ::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
                        ],
                        [
                            80u8, 43u8, 193u8, 231u8, 95u8, 226u8, 161u8, 6u8, 34u8, 25u8, 3u8,
                            184u8, 82u8, 35u8, 102u8, 88u8, 114u8, 23u8, 244u8, 72u8, 131u8, 146u8,
                            222u8, 196u8, 18u8, 103u8, 28u8, 71u8, 8u8, 60u8, 217u8, 111u8,
                        ],
                    )
                }
                #[doc = " A ring buffer of imported parachain head hashes. Ordered by the insertion time."]
                pub fn imported_para_hashes_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::imported_para_hashes::ImportedParaHashes,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "BridgeWestendParachains",
                        "ImportedParaHashes",
                        vec![],
                        [
                            155u8, 163u8, 88u8, 42u8, 32u8, 240u8, 215u8, 56u8, 40u8, 229u8, 227u8,
                            202u8, 51u8, 173u8, 33u8, 237u8, 29u8, 113u8, 115u8, 122u8, 226u8,
                            201u8, 209u8, 4u8, 198u8, 58u8, 38u8, 209u8, 50u8, 192u8, 168u8, 127u8,
                        ],
                    )
                }
                #[doc = " A ring buffer of imported parachain head hashes. Ordered by the insertion time."]
                pub fn imported_para_hashes_iter1(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::imported_para_hashes::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::imported_para_hashes::ImportedParaHashes,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "BridgeWestendParachains",
                        "ImportedParaHashes",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            155u8, 163u8, 88u8, 42u8, 32u8, 240u8, 215u8, 56u8, 40u8, 229u8, 227u8,
                            202u8, 51u8, 173u8, 33u8, 237u8, 29u8, 113u8, 115u8, 122u8, 226u8,
                            201u8, 209u8, 4u8, 198u8, 58u8, 38u8, 209u8, 50u8, 192u8, 168u8, 127u8,
                        ],
                    )
                }
                #[doc = " A ring buffer of imported parachain head hashes. Ordered by the insertion time."]
                pub fn imported_para_hashes(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::imported_para_hashes::Param0>,
                    _1: impl ::std::borrow::Borrow<types::imported_para_hashes::Param1>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::imported_para_hashes::ImportedParaHashes,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "BridgeWestendParachains",
                        "ImportedParaHashes",
                        vec![
                            ::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
                            ::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
                        ],
                        [
                            155u8, 163u8, 88u8, 42u8, 32u8, 240u8, 215u8, 56u8, 40u8, 229u8, 227u8,
                            202u8, 51u8, 173u8, 33u8, 237u8, 29u8, 113u8, 115u8, 122u8, 226u8,
                            201u8, 209u8, 4u8, 198u8, 58u8, 38u8, 209u8, 50u8, 192u8, 168u8, 127u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                #[doc = " Name of the original `paras` pallet in the `construct_runtime!()` call at the bridged"]
                #[doc = " chain."]
                #[doc = ""]
                #[doc = " Please keep in mind that this should be the name of the `runtime_parachains::paras`"]
                #[doc = " pallet from polkadot repository, not the `pallet-bridge-parachains`."]
                pub fn paras_pallet_name(
                    &self,
                ) -> ::subxt::constants::Address<::std::string::String> {
                    ::subxt::constants::Address::new_static(
                        "BridgeWestendParachains",
                        "ParasPalletName",
                        [
                            251u8, 233u8, 211u8, 209u8, 5u8, 66u8, 94u8, 200u8, 148u8, 166u8,
                            119u8, 200u8, 59u8, 180u8, 70u8, 77u8, 182u8, 127u8, 45u8, 65u8, 28u8,
                            104u8, 253u8, 149u8, 167u8, 216u8, 2u8, 94u8, 39u8, 173u8, 198u8,
                            219u8,
                        ],
                    )
                }
                #[doc = " Maximal number of single parachain heads to keep in the storage."]
                #[doc = ""]
                #[doc = " The setting is there to prevent growing the on-chain state indefinitely. Note"]
                #[doc = " the setting does not relate to parachain block numbers - we will simply keep as much"]
                #[doc = " items in the storage, so it doesn't guarantee any fixed timeframe for heads."]
                #[doc = ""]
                #[doc = " Incautious change of this constant may lead to orphan entries in the runtime storage."]
                pub fn heads_to_keep(&self) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "BridgeWestendParachains",
                        "HeadsToKeep",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " Maximal size (in bytes) of the SCALE-encoded parachain head data"]
                #[doc = " (`bp_parachains::ParaStoredHeaderData`)."]
                #[doc = ""]
                #[doc = " Keep in mind that the size of any tracked parachain header data must not exceed this"]
                #[doc = " value. So if you're going to track multiple parachains, one of which is using large"]
                #[doc = " hashes, you shall choose this maximal value."]
                #[doc = ""]
                #[doc = " There's no mandatory headers in this pallet, so it can't stall if there's some header"]
                #[doc = " that exceeds this bound."]
                pub fn max_para_head_data_size(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "BridgeWestendParachains",
                        "MaxParaHeadDataSize",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod bridge_westend_messages {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "The `Error` enum of this pallet."]
        pub type Error = runtime_types::pallet_bridge_messages::pallet::Error;
        #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
        pub type Call = runtime_types::pallet_bridge_messages::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "See [`Pallet::set_owner`]."]
                pub struct SetOwner {
                    pub new_owner: set_owner::NewOwner,
                }
                pub mod set_owner {
                    use super::runtime_types;
                    pub type NewOwner = ::core::option::Option<::subxt::utils::AccountId32>;
                }
                impl ::subxt::blocks::StaticExtrinsic for SetOwner {
                    const PALLET: &'static str = "BridgeWestendMessages";
                    const CALL: &'static str = "set_owner";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "See [`Pallet::set_operating_mode`]."]
                pub struct SetOperatingMode {
                    pub operating_mode: set_operating_mode::OperatingMode,
                }
                pub mod set_operating_mode {
                    use super::runtime_types;
                    pub type OperatingMode = runtime_types::bp_messages::MessagesOperatingMode;
                }
                impl ::subxt::blocks::StaticExtrinsic for SetOperatingMode {
                    const PALLET: &'static str = "BridgeWestendMessages";
                    const CALL: &'static str = "set_operating_mode";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "See [`Pallet::receive_messages_proof`]."]
                pub struct ReceiveMessagesProof {
                    pub relayer_id_at_bridged_chain:
                        receive_messages_proof::RelayerIdAtBridgedChain,
                    pub proof: receive_messages_proof::Proof,
                    pub messages_count: receive_messages_proof::MessagesCount,
                    pub dispatch_weight: receive_messages_proof::DispatchWeight,
                }
                pub mod receive_messages_proof {
                    use super::runtime_types;
                    pub type RelayerIdAtBridgedChain = ::subxt::utils::AccountId32;
                    pub type Proof = runtime_types :: bridge_runtime_common :: messages :: target :: FromBridgedChainMessagesProof < :: subxt :: utils :: H256 > ;
                    pub type MessagesCount = ::core::primitive::u32;
                    pub type DispatchWeight = runtime_types::sp_weights::weight_v2::Weight;
                }
                impl ::subxt::blocks::StaticExtrinsic for ReceiveMessagesProof {
                    const PALLET: &'static str = "BridgeWestendMessages";
                    const CALL: &'static str = "receive_messages_proof";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "See [`Pallet::receive_messages_delivery_proof`]."]
                pub struct ReceiveMessagesDeliveryProof {
                    pub proof: receive_messages_delivery_proof::Proof,
                    pub relayers_state: receive_messages_delivery_proof::RelayersState,
                }
                pub mod receive_messages_delivery_proof {
                    use super::runtime_types;
                    pub type Proof = runtime_types :: bridge_runtime_common :: messages :: source :: FromBridgedChainMessagesDeliveryProof < :: subxt :: utils :: H256 > ;
                    pub type RelayersState = runtime_types::bp_messages::UnrewardedRelayersState;
                }
                impl ::subxt::blocks::StaticExtrinsic for ReceiveMessagesDeliveryProof {
                    const PALLET: &'static str = "BridgeWestendMessages";
                    const CALL: &'static str = "receive_messages_delivery_proof";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "See [`Pallet::set_owner`]."]
                pub fn set_owner(
                    &self,
                    new_owner: types::set_owner::NewOwner,
                ) -> ::subxt::tx::Payload<types::SetOwner> {
                    ::subxt::tx::Payload::new_static(
                        "BridgeWestendMessages",
                        "set_owner",
                        types::SetOwner { new_owner },
                        [
                            20u8, 198u8, 11u8, 168u8, 212u8, 75u8, 67u8, 127u8, 41u8, 66u8, 58u8,
                            216u8, 1u8, 13u8, 226u8, 140u8, 176u8, 32u8, 232u8, 54u8, 86u8, 52u8,
                            202u8, 80u8, 189u8, 229u8, 250u8, 217u8, 121u8, 45u8, 212u8, 215u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::set_operating_mode`]."]
                pub fn set_operating_mode(
                    &self,
                    operating_mode: types::set_operating_mode::OperatingMode,
                ) -> ::subxt::tx::Payload<types::SetOperatingMode> {
                    ::subxt::tx::Payload::new_static(
                        "BridgeWestendMessages",
                        "set_operating_mode",
                        types::SetOperatingMode { operating_mode },
                        [
                            6u8, 176u8, 109u8, 240u8, 48u8, 38u8, 227u8, 166u8, 31u8, 33u8, 192u8,
                            197u8, 197u8, 82u8, 146u8, 100u8, 188u8, 3u8, 194u8, 228u8, 79u8,
                            107u8, 42u8, 88u8, 55u8, 150u8, 154u8, 84u8, 225u8, 158u8, 37u8, 189u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::receive_messages_proof`]."]
                pub fn receive_messages_proof(
                    &self,
                    relayer_id_at_bridged_chain : types :: receive_messages_proof :: RelayerIdAtBridgedChain,
                    proof: types::receive_messages_proof::Proof,
                    messages_count: types::receive_messages_proof::MessagesCount,
                    dispatch_weight: types::receive_messages_proof::DispatchWeight,
                ) -> ::subxt::tx::Payload<types::ReceiveMessagesProof> {
                    ::subxt::tx::Payload::new_static(
                        "BridgeWestendMessages",
                        "receive_messages_proof",
                        types::ReceiveMessagesProof {
                            relayer_id_at_bridged_chain,
                            proof,
                            messages_count,
                            dispatch_weight,
                        },
                        [
                            128u8, 99u8, 149u8, 32u8, 147u8, 78u8, 224u8, 155u8, 11u8, 86u8, 89u8,
                            67u8, 249u8, 158u8, 199u8, 78u8, 57u8, 11u8, 67u8, 0u8, 21u8, 207u8,
                            215u8, 86u8, 241u8, 228u8, 206u8, 82u8, 171u8, 162u8, 38u8, 30u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::receive_messages_delivery_proof`]."]
                pub fn receive_messages_delivery_proof(
                    &self,
                    proof: types::receive_messages_delivery_proof::Proof,
                    relayers_state: types::receive_messages_delivery_proof::RelayersState,
                ) -> ::subxt::tx::Payload<types::ReceiveMessagesDeliveryProof> {
                    ::subxt::tx::Payload::new_static(
                        "BridgeWestendMessages",
                        "receive_messages_delivery_proof",
                        types::ReceiveMessagesDeliveryProof {
                            proof,
                            relayers_state,
                        },
                        [
                            181u8, 84u8, 93u8, 0u8, 13u8, 225u8, 111u8, 46u8, 246u8, 28u8, 196u8,
                            226u8, 13u8, 236u8, 78u8, 171u8, 104u8, 93u8, 166u8, 209u8, 124u8,
                            59u8, 216u8, 54u8, 142u8, 176u8, 50u8, 114u8, 211u8, 205u8, 124u8,
                            44u8,
                        ],
                    )
                }
            }
        }
        #[doc = "The `Event` enum of this pallet"]
        pub type Event = runtime_types::pallet_bridge_messages::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Message has been accepted and is waiting to be delivered."]
            pub struct MessageAccepted {
                pub lane_id: message_accepted::LaneId,
                pub nonce: message_accepted::Nonce,
            }
            pub mod message_accepted {
                use super::runtime_types;
                pub type LaneId = runtime_types::bp_messages::LaneId;
                pub type Nonce = ::core::primitive::u64;
            }
            impl ::subxt::events::StaticEvent for MessageAccepted {
                const PALLET: &'static str = "BridgeWestendMessages";
                const EVENT: &'static str = "MessageAccepted";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Messages have been received from the bridged chain."]
            pub struct MessagesReceived(pub messages_received::Field0);
            pub mod messages_received {
                use super::runtime_types;
                pub type Field0 = :: std :: vec :: Vec < runtime_types :: bp_messages :: ReceivedMessages < runtime_types :: bridge_runtime_common :: messages_xcm_extension :: XcmBlobMessageDispatchResult > > ;
            }
            impl ::subxt::events::StaticEvent for MessagesReceived {
                const PALLET: &'static str = "BridgeWestendMessages";
                const EVENT: &'static str = "MessagesReceived";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Messages in the inclusive range have been delivered to the bridged chain."]
            pub struct MessagesDelivered {
                pub lane_id: messages_delivered::LaneId,
                pub messages: messages_delivered::Messages,
            }
            pub mod messages_delivered {
                use super::runtime_types;
                pub type LaneId = runtime_types::bp_messages::LaneId;
                pub type Messages = runtime_types::bp_messages::DeliveredMessages;
            }
            impl ::subxt::events::StaticEvent for MessagesDelivered {
                const PALLET: &'static str = "BridgeWestendMessages";
                const EVENT: &'static str = "MessagesDelivered";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub mod types {
                use super::runtime_types;
                pub mod pallet_owner {
                    use super::runtime_types;
                    pub type PalletOwner = ::subxt::utils::AccountId32;
                }
                pub mod pallet_operating_mode {
                    use super::runtime_types;
                    pub type PalletOperatingMode =
                        runtime_types::bp_messages::MessagesOperatingMode;
                }
                pub mod inbound_lanes {
                    use super::runtime_types;
                    pub type InboundLanes =
                        runtime_types::bp_messages::InboundLaneData<::subxt::utils::AccountId32>;
                    pub type Param0 = runtime_types::bp_messages::LaneId;
                }
                pub mod outbound_lanes {
                    use super::runtime_types;
                    pub type OutboundLanes = runtime_types::bp_messages::OutboundLaneData;
                    pub type Param0 = runtime_types::bp_messages::LaneId;
                }
                pub mod outbound_lanes_congested_signals {
                    use super::runtime_types;
                    pub type OutboundLanesCongestedSignals = ::core::primitive::bool;
                    pub type Param0 = runtime_types::bp_messages::LaneId;
                }
                pub mod outbound_messages {
                    use super::runtime_types;
                    pub type OutboundMessages =
                        runtime_types::bounded_collections::bounded_vec::BoundedVec<
                            ::core::primitive::u8,
                        >;
                    pub type Param0 = runtime_types::bp_messages::MessageKey;
                }
            }
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " Optional pallet owner."]
                #[doc = ""]
                #[doc = " Pallet owner has a right to halt all pallet operations and then resume it. If it is"]
                #[doc = " `None`, then there are no direct ways to halt/resume pallet operations, but other"]
                #[doc = " runtime methods may still be used to do that (i.e. democracy::referendum to update halt"]
                #[doc = " flag directly or call the `halt_operations`)."]
                pub fn pallet_owner(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::pallet_owner::PalletOwner,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "BridgeWestendMessages",
                        "PalletOwner",
                        vec![],
                        [
                            203u8, 207u8, 161u8, 128u8, 147u8, 32u8, 171u8, 173u8, 201u8, 104u8,
                            232u8, 15u8, 70u8, 88u8, 29u8, 94u8, 179u8, 140u8, 252u8, 200u8, 200u8,
                            244u8, 89u8, 199u8, 118u8, 34u8, 197u8, 77u8, 35u8, 11u8, 250u8, 210u8,
                        ],
                    )
                }
                #[doc = " The current operating mode of the pallet."]
                #[doc = ""]
                #[doc = " Depending on the mode either all, some, or no transactions will be allowed."]
                pub fn pallet_operating_mode(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::pallet_operating_mode::PalletOperatingMode,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "BridgeWestendMessages",
                        "PalletOperatingMode",
                        vec![],
                        [
                            1u8, 142u8, 9u8, 145u8, 1u8, 120u8, 215u8, 61u8, 174u8, 83u8, 98u8,
                            152u8, 116u8, 210u8, 22u8, 63u8, 30u8, 47u8, 27u8, 60u8, 142u8, 145u8,
                            215u8, 206u8, 155u8, 238u8, 243u8, 100u8, 175u8, 44u8, 237u8, 43u8,
                        ],
                    )
                }
                #[doc = " Map of lane id => inbound lane data."]
                pub fn inbound_lanes_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::inbound_lanes::InboundLanes,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "BridgeWestendMessages",
                        "InboundLanes",
                        vec![],
                        [
                            8u8, 218u8, 61u8, 222u8, 240u8, 73u8, 203u8, 83u8, 59u8, 175u8, 190u8,
                            13u8, 127u8, 119u8, 207u8, 123u8, 196u8, 184u8, 29u8, 230u8, 193u8,
                            51u8, 223u8, 208u8, 53u8, 152u8, 68u8, 212u8, 222u8, 118u8, 134u8,
                            224u8,
                        ],
                    )
                }
                #[doc = " Map of lane id => inbound lane data."]
                pub fn inbound_lanes(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::inbound_lanes::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::inbound_lanes::InboundLanes,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "BridgeWestendMessages",
                        "InboundLanes",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            8u8, 218u8, 61u8, 222u8, 240u8, 73u8, 203u8, 83u8, 59u8, 175u8, 190u8,
                            13u8, 127u8, 119u8, 207u8, 123u8, 196u8, 184u8, 29u8, 230u8, 193u8,
                            51u8, 223u8, 208u8, 53u8, 152u8, 68u8, 212u8, 222u8, 118u8, 134u8,
                            224u8,
                        ],
                    )
                }
                #[doc = " Map of lane id => outbound lane data."]
                pub fn outbound_lanes_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::outbound_lanes::OutboundLanes,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "BridgeWestendMessages",
                        "OutboundLanes",
                        vec![],
                        [
                            218u8, 116u8, 88u8, 191u8, 4u8, 116u8, 141u8, 162u8, 173u8, 251u8,
                            117u8, 29u8, 26u8, 224u8, 60u8, 165u8, 98u8, 94u8, 18u8, 115u8, 242u8,
                            228u8, 137u8, 244u8, 64u8, 32u8, 106u8, 208u8, 160u8, 183u8, 191u8,
                            173u8,
                        ],
                    )
                }
                #[doc = " Map of lane id => outbound lane data."]
                pub fn outbound_lanes(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::outbound_lanes::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::outbound_lanes::OutboundLanes,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "BridgeWestendMessages",
                        "OutboundLanes",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            218u8, 116u8, 88u8, 191u8, 4u8, 116u8, 141u8, 162u8, 173u8, 251u8,
                            117u8, 29u8, 26u8, 224u8, 60u8, 165u8, 98u8, 94u8, 18u8, 115u8, 242u8,
                            228u8, 137u8, 244u8, 64u8, 32u8, 106u8, 208u8, 160u8, 183u8, 191u8,
                            173u8,
                        ],
                    )
                }
                #[doc = " Map of lane id => is congested signal sent. It is managed by the"]
                #[doc = " `bridge_runtime_common::LocalXcmQueueManager`."]
                #[doc = ""]
                #[doc = " **bridges-v1**: this map is a temporary hack and will be dropped in the `v2`. We can emulate"]
                #[doc = " a storage map using `sp_io::unhashed` storage functions, but then benchmarks are not"]
                #[doc = " accounting its `proof_size`, so it is missing from the final weights. So we need to make it"]
                #[doc = " a map inside some pallet. We could use a simply value instead of map here, because"]
                #[doc = " in `v1` we'll only have a single lane. But in the case of adding another lane before `v2`,"]
                #[doc = " it'll be easier to deal with the isolated storage map instead."]
                pub fn outbound_lanes_congested_signals_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::outbound_lanes_congested_signals::OutboundLanesCongestedSignals,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "BridgeWestendMessages",
                        "OutboundLanesCongestedSignals",
                        vec![],
                        [
                            168u8, 35u8, 16u8, 21u8, 168u8, 198u8, 151u8, 49u8, 90u8, 152u8, 181u8,
                            142u8, 215u8, 189u8, 172u8, 94u8, 144u8, 100u8, 110u8, 54u8, 47u8,
                            226u8, 79u8, 19u8, 21u8, 50u8, 3u8, 182u8, 178u8, 46u8, 154u8, 10u8,
                        ],
                    )
                }
                #[doc = " Map of lane id => is congested signal sent. It is managed by the"]
                #[doc = " `bridge_runtime_common::LocalXcmQueueManager`."]
                #[doc = ""]
                #[doc = " **bridges-v1**: this map is a temporary hack and will be dropped in the `v2`. We can emulate"]
                #[doc = " a storage map using `sp_io::unhashed` storage functions, but then benchmarks are not"]
                #[doc = " accounting its `proof_size`, so it is missing from the final weights. So we need to make it"]
                #[doc = " a map inside some pallet. We could use a simply value instead of map here, because"]
                #[doc = " in `v1` we'll only have a single lane. But in the case of adding another lane before `v2`,"]
                #[doc = " it'll be easier to deal with the isolated storage map instead."]
                pub fn outbound_lanes_congested_signals(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::outbound_lanes_congested_signals::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::outbound_lanes_congested_signals::OutboundLanesCongestedSignals,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "BridgeWestendMessages",
                        "OutboundLanesCongestedSignals",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            168u8, 35u8, 16u8, 21u8, 168u8, 198u8, 151u8, 49u8, 90u8, 152u8, 181u8,
                            142u8, 215u8, 189u8, 172u8, 94u8, 144u8, 100u8, 110u8, 54u8, 47u8,
                            226u8, 79u8, 19u8, 21u8, 50u8, 3u8, 182u8, 178u8, 46u8, 154u8, 10u8,
                        ],
                    )
                }
                #[doc = " All queued outbound messages."]
                pub fn outbound_messages_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::outbound_messages::OutboundMessages,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "BridgeWestendMessages",
                        "OutboundMessages",
                        vec![],
                        [
                            12u8, 220u8, 41u8, 187u8, 207u8, 251u8, 195u8, 92u8, 70u8, 125u8,
                            154u8, 153u8, 203u8, 57u8, 245u8, 172u8, 64u8, 100u8, 185u8, 100u8,
                            32u8, 36u8, 238u8, 116u8, 191u8, 216u8, 142u8, 25u8, 228u8, 27u8,
                            219u8, 40u8,
                        ],
                    )
                }
                #[doc = " All queued outbound messages."]
                pub fn outbound_messages(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::outbound_messages::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::outbound_messages::OutboundMessages,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "BridgeWestendMessages",
                        "OutboundMessages",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            12u8, 220u8, 41u8, 187u8, 207u8, 251u8, 195u8, 92u8, 70u8, 125u8,
                            154u8, 153u8, 203u8, 57u8, 245u8, 172u8, 64u8, 100u8, 185u8, 100u8,
                            32u8, 36u8, 238u8, 116u8, 191u8, 216u8, 142u8, 25u8, 228u8, 27u8,
                            219u8, 40u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                #[doc = " Gets the chain id value from the instance."]
                pub fn bridged_chain_id(
                    &self,
                ) -> ::subxt::constants::Address<[::core::primitive::u8; 4usize]> {
                    ::subxt::constants::Address::new_static(
                        "BridgeWestendMessages",
                        "BridgedChainId",
                        [
                            229u8, 118u8, 85u8, 247u8, 205u8, 2u8, 196u8, 182u8, 188u8, 228u8,
                            113u8, 192u8, 129u8, 87u8, 158u8, 46u8, 215u8, 75u8, 99u8, 136u8, 53u8,
                            44u8, 29u8, 171u8, 89u8, 134u8, 187u8, 1u8, 121u8, 217u8, 232u8, 125u8,
                        ],
                    )
                }
                #[doc = " Maximal encoded size of the outbound payload."]
                pub fn maximal_outbound_payload_size(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "BridgeWestendMessages",
                        "MaximalOutboundPayloadSize",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod xcm_over_bridge_hub_westend {
        use super::root_mod;
        use super::runtime_types;
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                #[doc = " Bridged network as relative location of bridged `GlobalConsensus`."]
                pub fn bridged_network(
                    &self,
                ) -> ::subxt::constants::Address<runtime_types::staging_xcm::v4::location::Location>
                {
                    ::subxt::constants::Address::new_static(
                        "XcmOverBridgeHubWestend",
                        "BridgedNetwork",
                        [
                            156u8, 101u8, 154u8, 239u8, 2u8, 98u8, 175u8, 99u8, 52u8, 10u8, 106u8,
                            226u8, 31u8, 142u8, 176u8, 76u8, 245u8, 104u8, 178u8, 254u8, 24u8,
                            72u8, 52u8, 27u8, 252u8, 187u8, 111u8, 125u8, 241u8, 255u8, 165u8,
                            224u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod bridge_polkadot_bulletin_grandpa {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "The `Error` enum of this pallet."]
        pub type Error = runtime_types::pallet_bridge_grandpa::pallet::Error2;
        #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
        pub type Call = runtime_types::pallet_bridge_grandpa::pallet::Call2;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "See [`Pallet::submit_finality_proof`]."]
                pub struct SubmitFinalityProof {
                    pub finality_target: ::std::boxed::Box<submit_finality_proof::FinalityTarget>,
                    pub justification: submit_finality_proof::Justification,
                }
                pub mod submit_finality_proof {
                    use super::runtime_types;
                    pub type FinalityTarget =
                        runtime_types::sp_runtime::generic::header::Header<::core::primitive::u32>;
                    pub type Justification =
                        runtime_types::bp_header_chain::justification::GrandpaJustification<
                            runtime_types::sp_runtime::generic::header::Header<
                                ::core::primitive::u32,
                            >,
                        >;
                }
                impl ::subxt::blocks::StaticExtrinsic for SubmitFinalityProof {
                    const PALLET: &'static str = "BridgePolkadotBulletinGrandpa";
                    const CALL: &'static str = "submit_finality_proof";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "See [`Pallet::initialize`]."]
                pub struct Initialize {
                    pub init_data: initialize::InitData,
                }
                pub mod initialize {
                    use super::runtime_types;
                    pub type InitData = runtime_types::bp_header_chain::InitializationData<
                        runtime_types::sp_runtime::generic::header::Header<::core::primitive::u32>,
                    >;
                }
                impl ::subxt::blocks::StaticExtrinsic for Initialize {
                    const PALLET: &'static str = "BridgePolkadotBulletinGrandpa";
                    const CALL: &'static str = "initialize";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "See [`Pallet::set_owner`]."]
                pub struct SetOwner {
                    pub new_owner: set_owner::NewOwner,
                }
                pub mod set_owner {
                    use super::runtime_types;
                    pub type NewOwner = ::core::option::Option<::subxt::utils::AccountId32>;
                }
                impl ::subxt::blocks::StaticExtrinsic for SetOwner {
                    const PALLET: &'static str = "BridgePolkadotBulletinGrandpa";
                    const CALL: &'static str = "set_owner";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "See [`Pallet::set_operating_mode`]."]
                pub struct SetOperatingMode {
                    pub operating_mode: set_operating_mode::OperatingMode,
                }
                pub mod set_operating_mode {
                    use super::runtime_types;
                    pub type OperatingMode = runtime_types::bp_runtime::BasicOperatingMode;
                }
                impl ::subxt::blocks::StaticExtrinsic for SetOperatingMode {
                    const PALLET: &'static str = "BridgePolkadotBulletinGrandpa";
                    const CALL: &'static str = "set_operating_mode";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "See [`Pallet::submit_finality_proof`]."]
                pub fn submit_finality_proof(
                    &self,
                    finality_target: types::submit_finality_proof::FinalityTarget,
                    justification: types::submit_finality_proof::Justification,
                ) -> ::subxt::tx::Payload<types::SubmitFinalityProof> {
                    ::subxt::tx::Payload::new_static(
                        "BridgePolkadotBulletinGrandpa",
                        "submit_finality_proof",
                        types::SubmitFinalityProof {
                            finality_target: ::std::boxed::Box::new(finality_target),
                            justification,
                        },
                        [
                            22u8, 27u8, 236u8, 29u8, 218u8, 67u8, 242u8, 254u8, 46u8, 49u8, 52u8,
                            119u8, 114u8, 108u8, 226u8, 215u8, 115u8, 23u8, 153u8, 73u8, 7u8,
                            148u8, 22u8, 62u8, 129u8, 36u8, 170u8, 31u8, 101u8, 100u8, 35u8, 146u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::initialize`]."]
                pub fn initialize(
                    &self,
                    init_data: types::initialize::InitData,
                ) -> ::subxt::tx::Payload<types::Initialize> {
                    ::subxt::tx::Payload::new_static(
                        "BridgePolkadotBulletinGrandpa",
                        "initialize",
                        types::Initialize { init_data },
                        [
                            40u8, 36u8, 80u8, 133u8, 150u8, 154u8, 62u8, 22u8, 230u8, 227u8, 243u8,
                            146u8, 99u8, 89u8, 167u8, 71u8, 27u8, 134u8, 193u8, 196u8, 222u8,
                            203u8, 40u8, 79u8, 171u8, 66u8, 178u8, 26u8, 25u8, 113u8, 183u8, 47u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::set_owner`]."]
                pub fn set_owner(
                    &self,
                    new_owner: types::set_owner::NewOwner,
                ) -> ::subxt::tx::Payload<types::SetOwner> {
                    ::subxt::tx::Payload::new_static(
                        "BridgePolkadotBulletinGrandpa",
                        "set_owner",
                        types::SetOwner { new_owner },
                        [
                            20u8, 198u8, 11u8, 168u8, 212u8, 75u8, 67u8, 127u8, 41u8, 66u8, 58u8,
                            216u8, 1u8, 13u8, 226u8, 140u8, 176u8, 32u8, 232u8, 54u8, 86u8, 52u8,
                            202u8, 80u8, 189u8, 229u8, 250u8, 217u8, 121u8, 45u8, 212u8, 215u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::set_operating_mode`]."]
                pub fn set_operating_mode(
                    &self,
                    operating_mode: types::set_operating_mode::OperatingMode,
                ) -> ::subxt::tx::Payload<types::SetOperatingMode> {
                    ::subxt::tx::Payload::new_static(
                        "BridgePolkadotBulletinGrandpa",
                        "set_operating_mode",
                        types::SetOperatingMode { operating_mode },
                        [
                            210u8, 175u8, 1u8, 180u8, 102u8, 1u8, 114u8, 147u8, 103u8, 194u8,
                            200u8, 153u8, 180u8, 193u8, 53u8, 23u8, 75u8, 80u8, 67u8, 162u8, 162u8,
                            241u8, 251u8, 8u8, 19u8, 100u8, 103u8, 35u8, 35u8, 161u8, 206u8, 85u8,
                        ],
                    )
                }
            }
        }
        #[doc = "The `Event` enum of this pallet"]
        pub type Event = runtime_types::pallet_bridge_grandpa::pallet::Event2;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Best finalized chain header has been updated to the header with given number and hash."]
            pub struct UpdatedBestFinalizedHeader {
                pub number: updated_best_finalized_header::Number,
                pub hash: updated_best_finalized_header::Hash,
                pub grandpa_info: updated_best_finalized_header::GrandpaInfo,
            }
            pub mod updated_best_finalized_header {
                use super::runtime_types;
                pub type Number = ::core::primitive::u32;
                pub type Hash = ::subxt::utils::H256;
                pub type GrandpaInfo = runtime_types::bp_header_chain::HeaderFinalityInfo<
                    runtime_types::bp_header_chain::justification::GrandpaJustification<
                        runtime_types::sp_runtime::generic::header::Header<::core::primitive::u32>,
                    >,
                    runtime_types::bp_header_chain::AuthoritySet,
                >;
            }
            impl ::subxt::events::StaticEvent for UpdatedBestFinalizedHeader {
                const PALLET: &'static str = "BridgePolkadotBulletinGrandpa";
                const EVENT: &'static str = "UpdatedBestFinalizedHeader";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub mod types {
                use super::runtime_types;
                pub mod free_mandatory_headers_remaining {
                    use super::runtime_types;
                    pub type FreeMandatoryHeadersRemaining = ::core::primitive::u32;
                }
                pub mod initial_hash {
                    use super::runtime_types;
                    pub type InitialHash = ::subxt::utils::H256;
                }
                pub mod best_finalized {
                    use super::runtime_types;
                    pub type BestFinalized = runtime_types::bp_runtime::HeaderId<
                        ::subxt::utils::H256,
                        ::core::primitive::u32,
                    >;
                }
                pub mod imported_hashes {
                    use super::runtime_types;
                    pub type ImportedHashes = ::subxt::utils::H256;
                    pub type Param0 = ::core::primitive::u32;
                }
                pub mod imported_hashes_pointer {
                    use super::runtime_types;
                    pub type ImportedHashesPointer = ::core::primitive::u32;
                }
                pub mod imported_headers {
                    use super::runtime_types;
                    pub type ImportedHeaders = runtime_types::bp_header_chain::StoredHeaderData<
                        ::core::primitive::u32,
                        ::subxt::utils::H256,
                    >;
                    pub type Param0 = ::subxt::utils::H256;
                }
                pub mod current_authority_set {
                    use super::runtime_types;
                    pub type CurrentAuthoritySet =
                        runtime_types::pallet_bridge_grandpa::storage_types::StoredAuthoritySet2;
                }
                pub mod pallet_owner {
                    use super::runtime_types;
                    pub type PalletOwner = ::subxt::utils::AccountId32;
                }
                pub mod pallet_operating_mode {
                    use super::runtime_types;
                    pub type PalletOperatingMode = runtime_types::bp_runtime::BasicOperatingMode;
                }
            }
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " Number mandatory headers that we may accept in the current block for free (returning"]
                #[doc = " `Pays::No`)."]
                #[doc = ""]
                #[doc = " If the `FreeMandatoryHeadersRemaining` hits zero, all following mandatory headers in the"]
                #[doc = " current block are accepted with fee (`Pays::Yes` is returned)."]
                #[doc = ""]
                #[doc = " The `FreeMandatoryHeadersRemaining` is an ephemeral value that is set to"]
                #[doc = " `MaxFreeMandatoryHeadersPerBlock` at each block initialization and is killed on block"]
                #[doc = " finalization. So it never ends up in the storage trie."]
                pub fn free_mandatory_headers_remaining(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::free_mandatory_headers_remaining::FreeMandatoryHeadersRemaining,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "BridgePolkadotBulletinGrandpa",
                        "FreeMandatoryHeadersRemaining",
                        vec![],
                        [
                            203u8, 50u8, 205u8, 0u8, 86u8, 33u8, 88u8, 61u8, 228u8, 224u8, 22u8,
                            239u8, 84u8, 57u8, 84u8, 135u8, 82u8, 163u8, 163u8, 123u8, 82u8, 115u8,
                            211u8, 173u8, 54u8, 143u8, 241u8, 162u8, 112u8, 158u8, 210u8, 254u8,
                        ],
                    )
                }
                #[doc = " Hash of the header used to bootstrap the pallet."]
                pub fn initial_hash(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::initial_hash::InitialHash,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "BridgePolkadotBulletinGrandpa",
                        "InitialHash",
                        vec![],
                        [
                            112u8, 194u8, 193u8, 168u8, 95u8, 98u8, 49u8, 51u8, 254u8, 106u8, 65u8,
                            231u8, 91u8, 67u8, 54u8, 129u8, 72u8, 35u8, 131u8, 59u8, 238u8, 48u8,
                            55u8, 214u8, 104u8, 60u8, 21u8, 252u8, 186u8, 167u8, 108u8, 225u8,
                        ],
                    )
                }
                #[doc = " Hash of the best finalized header."]
                pub fn best_finalized(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::best_finalized::BestFinalized,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "BridgePolkadotBulletinGrandpa",
                        "BestFinalized",
                        vec![],
                        [
                            101u8, 247u8, 117u8, 8u8, 64u8, 66u8, 51u8, 17u8, 158u8, 37u8, 100u8,
                            24u8, 104u8, 58u8, 215u8, 15u8, 88u8, 161u8, 1u8, 182u8, 142u8, 2u8,
                            73u8, 192u8, 68u8, 236u8, 62u8, 198u8, 128u8, 57u8, 181u8, 235u8,
                        ],
                    )
                }
                #[doc = " A ring buffer of imported hashes. Ordered by the insertion time."]
                pub fn imported_hashes_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::imported_hashes::ImportedHashes,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "BridgePolkadotBulletinGrandpa",
                        "ImportedHashes",
                        vec![],
                        [
                            105u8, 81u8, 158u8, 69u8, 52u8, 176u8, 14u8, 7u8, 137u8, 213u8, 9u8,
                            157u8, 226u8, 56u8, 32u8, 55u8, 178u8, 133u8, 50u8, 172u8, 168u8,
                            162u8, 92u8, 180u8, 252u8, 39u8, 183u8, 219u8, 136u8, 81u8, 161u8,
                            187u8,
                        ],
                    )
                }
                #[doc = " A ring buffer of imported hashes. Ordered by the insertion time."]
                pub fn imported_hashes(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::imported_hashes::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::imported_hashes::ImportedHashes,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "BridgePolkadotBulletinGrandpa",
                        "ImportedHashes",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            105u8, 81u8, 158u8, 69u8, 52u8, 176u8, 14u8, 7u8, 137u8, 213u8, 9u8,
                            157u8, 226u8, 56u8, 32u8, 55u8, 178u8, 133u8, 50u8, 172u8, 168u8,
                            162u8, 92u8, 180u8, 252u8, 39u8, 183u8, 219u8, 136u8, 81u8, 161u8,
                            187u8,
                        ],
                    )
                }
                #[doc = " Current ring buffer position."]
                pub fn imported_hashes_pointer(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::imported_hashes_pointer::ImportedHashesPointer,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "BridgePolkadotBulletinGrandpa",
                        "ImportedHashesPointer",
                        vec![],
                        [
                            187u8, 146u8, 130u8, 217u8, 62u8, 168u8, 125u8, 61u8, 61u8, 126u8,
                            255u8, 205u8, 13u8, 185u8, 116u8, 160u8, 201u8, 60u8, 176u8, 125u8,
                            212u8, 99u8, 226u8, 32u8, 180u8, 147u8, 92u8, 162u8, 209u8, 244u8,
                            185u8, 41u8,
                        ],
                    )
                }
                #[doc = " Relevant fields of imported headers."]
                pub fn imported_headers_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::imported_headers::ImportedHeaders,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "BridgePolkadotBulletinGrandpa",
                        "ImportedHeaders",
                        vec![],
                        [
                            108u8, 225u8, 24u8, 118u8, 237u8, 166u8, 174u8, 244u8, 198u8, 255u8,
                            156u8, 66u8, 60u8, 174u8, 90u8, 102u8, 32u8, 109u8, 119u8, 49u8, 107u8,
                            255u8, 119u8, 48u8, 11u8, 206u8, 196u8, 19u8, 19u8, 217u8, 205u8, 63u8,
                        ],
                    )
                }
                #[doc = " Relevant fields of imported headers."]
                pub fn imported_headers(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::imported_headers::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::imported_headers::ImportedHeaders,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "BridgePolkadotBulletinGrandpa",
                        "ImportedHeaders",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            108u8, 225u8, 24u8, 118u8, 237u8, 166u8, 174u8, 244u8, 198u8, 255u8,
                            156u8, 66u8, 60u8, 174u8, 90u8, 102u8, 32u8, 109u8, 119u8, 49u8, 107u8,
                            255u8, 119u8, 48u8, 11u8, 206u8, 196u8, 19u8, 19u8, 217u8, 205u8, 63u8,
                        ],
                    )
                }
                #[doc = " The current GRANDPA Authority set."]
                pub fn current_authority_set(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::current_authority_set::CurrentAuthoritySet,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "BridgePolkadotBulletinGrandpa",
                        "CurrentAuthoritySet",
                        vec![],
                        [
                            208u8, 195u8, 73u8, 207u8, 27u8, 33u8, 121u8, 47u8, 92u8, 136u8, 18u8,
                            2u8, 52u8, 229u8, 56u8, 63u8, 147u8, 127u8, 255u8, 178u8, 66u8, 96u8,
                            225u8, 115u8, 68u8, 138u8, 38u8, 211u8, 184u8, 190u8, 49u8, 95u8,
                        ],
                    )
                }
                #[doc = " Optional pallet owner."]
                #[doc = ""]
                #[doc = " Pallet owner has a right to halt all pallet operations and then resume it. If it is"]
                #[doc = " `None`, then there are no direct ways to halt/resume pallet operations, but other"]
                #[doc = " runtime methods may still be used to do that (i.e. democracy::referendum to update halt"]
                #[doc = " flag directly or call the `halt_operations`)."]
                pub fn pallet_owner(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::pallet_owner::PalletOwner,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "BridgePolkadotBulletinGrandpa",
                        "PalletOwner",
                        vec![],
                        [
                            203u8, 207u8, 161u8, 128u8, 147u8, 32u8, 171u8, 173u8, 201u8, 104u8,
                            232u8, 15u8, 70u8, 88u8, 29u8, 94u8, 179u8, 140u8, 252u8, 200u8, 200u8,
                            244u8, 89u8, 199u8, 118u8, 34u8, 197u8, 77u8, 35u8, 11u8, 250u8, 210u8,
                        ],
                    )
                }
                #[doc = " The current operating mode of the pallet."]
                #[doc = ""]
                #[doc = " Depending on the mode either all, or no transactions will be allowed."]
                pub fn pallet_operating_mode(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::pallet_operating_mode::PalletOperatingMode,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "BridgePolkadotBulletinGrandpa",
                        "PalletOperatingMode",
                        vec![],
                        [
                            182u8, 210u8, 140u8, 248u8, 106u8, 134u8, 58u8, 208u8, 14u8, 227u8,
                            182u8, 201u8, 140u8, 172u8, 231u8, 198u8, 133u8, 182u8, 212u8, 92u8,
                            76u8, 105u8, 80u8, 209u8, 162u8, 49u8, 119u8, 26u8, 100u8, 3u8, 18u8,
                            99u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                #[doc = " Maximal number of \"free\" mandatory header transactions per block."]
                #[doc = ""]
                #[doc = " To be able to track the bridged chain, the pallet requires all headers that are"]
                #[doc = " changing GRANDPA authorities set at the bridged chain (we call them mandatory)."]
                #[doc = " So it is a common good deed to submit mandatory headers to the pallet. However, if the"]
                #[doc = " bridged chain gets compromised, its validators may generate as many mandatory headers"]
                #[doc = " as they want. And they may fill the whole block (at this chain) for free. This constants"]
                #[doc = " limits number of calls that we may refund in a single block. All calls above this"]
                #[doc = " limit are accepted, but are not refunded."]
                pub fn max_free_mandatory_headers_per_block(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "BridgePolkadotBulletinGrandpa",
                        "MaxFreeMandatoryHeadersPerBlock",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " Maximal number of finalized headers to keep in the storage."]
                #[doc = ""]
                #[doc = " The setting is there to prevent growing the on-chain state indefinitely. Note"]
                #[doc = " the setting does not relate to block numbers - we will simply keep as much items"]
                #[doc = " in the storage, so it doesn't guarantee any fixed timeframe for finality headers."]
                #[doc = ""]
                #[doc = " Incautious change of this constant may lead to orphan entries in the runtime storage."]
                pub fn headers_to_keep(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "BridgePolkadotBulletinGrandpa",
                        "HeadersToKeep",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod bridge_polkadot_bulletin_messages {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "The `Error` enum of this pallet."]
        pub type Error = runtime_types::pallet_bridge_messages::pallet::Error2;
        #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
        pub type Call = runtime_types::pallet_bridge_messages::pallet::Call2;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "See [`Pallet::set_owner`]."]
                pub struct SetOwner {
                    pub new_owner: set_owner::NewOwner,
                }
                pub mod set_owner {
                    use super::runtime_types;
                    pub type NewOwner = ::core::option::Option<::subxt::utils::AccountId32>;
                }
                impl ::subxt::blocks::StaticExtrinsic for SetOwner {
                    const PALLET: &'static str = "BridgePolkadotBulletinMessages";
                    const CALL: &'static str = "set_owner";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "See [`Pallet::set_operating_mode`]."]
                pub struct SetOperatingMode {
                    pub operating_mode: set_operating_mode::OperatingMode,
                }
                pub mod set_operating_mode {
                    use super::runtime_types;
                    pub type OperatingMode = runtime_types::bp_messages::MessagesOperatingMode;
                }
                impl ::subxt::blocks::StaticExtrinsic for SetOperatingMode {
                    const PALLET: &'static str = "BridgePolkadotBulletinMessages";
                    const CALL: &'static str = "set_operating_mode";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "See [`Pallet::receive_messages_proof`]."]
                pub struct ReceiveMessagesProof {
                    pub relayer_id_at_bridged_chain:
                        receive_messages_proof::RelayerIdAtBridgedChain,
                    pub proof: receive_messages_proof::Proof,
                    pub messages_count: receive_messages_proof::MessagesCount,
                    pub dispatch_weight: receive_messages_proof::DispatchWeight,
                }
                pub mod receive_messages_proof {
                    use super::runtime_types;
                    pub type RelayerIdAtBridgedChain = ::subxt::utils::AccountId32;
                    pub type Proof = runtime_types :: bridge_runtime_common :: messages :: target :: FromBridgedChainMessagesProof < :: subxt :: utils :: H256 > ;
                    pub type MessagesCount = ::core::primitive::u32;
                    pub type DispatchWeight = runtime_types::sp_weights::weight_v2::Weight;
                }
                impl ::subxt::blocks::StaticExtrinsic for ReceiveMessagesProof {
                    const PALLET: &'static str = "BridgePolkadotBulletinMessages";
                    const CALL: &'static str = "receive_messages_proof";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "See [`Pallet::receive_messages_delivery_proof`]."]
                pub struct ReceiveMessagesDeliveryProof {
                    pub proof: receive_messages_delivery_proof::Proof,
                    pub relayers_state: receive_messages_delivery_proof::RelayersState,
                }
                pub mod receive_messages_delivery_proof {
                    use super::runtime_types;
                    pub type Proof = runtime_types :: bridge_runtime_common :: messages :: source :: FromBridgedChainMessagesDeliveryProof < :: subxt :: utils :: H256 > ;
                    pub type RelayersState = runtime_types::bp_messages::UnrewardedRelayersState;
                }
                impl ::subxt::blocks::StaticExtrinsic for ReceiveMessagesDeliveryProof {
                    const PALLET: &'static str = "BridgePolkadotBulletinMessages";
                    const CALL: &'static str = "receive_messages_delivery_proof";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "See [`Pallet::set_owner`]."]
                pub fn set_owner(
                    &self,
                    new_owner: types::set_owner::NewOwner,
                ) -> ::subxt::tx::Payload<types::SetOwner> {
                    ::subxt::tx::Payload::new_static(
                        "BridgePolkadotBulletinMessages",
                        "set_owner",
                        types::SetOwner { new_owner },
                        [
                            20u8, 198u8, 11u8, 168u8, 212u8, 75u8, 67u8, 127u8, 41u8, 66u8, 58u8,
                            216u8, 1u8, 13u8, 226u8, 140u8, 176u8, 32u8, 232u8, 54u8, 86u8, 52u8,
                            202u8, 80u8, 189u8, 229u8, 250u8, 217u8, 121u8, 45u8, 212u8, 215u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::set_operating_mode`]."]
                pub fn set_operating_mode(
                    &self,
                    operating_mode: types::set_operating_mode::OperatingMode,
                ) -> ::subxt::tx::Payload<types::SetOperatingMode> {
                    ::subxt::tx::Payload::new_static(
                        "BridgePolkadotBulletinMessages",
                        "set_operating_mode",
                        types::SetOperatingMode { operating_mode },
                        [
                            6u8, 176u8, 109u8, 240u8, 48u8, 38u8, 227u8, 166u8, 31u8, 33u8, 192u8,
                            197u8, 197u8, 82u8, 146u8, 100u8, 188u8, 3u8, 194u8, 228u8, 79u8,
                            107u8, 42u8, 88u8, 55u8, 150u8, 154u8, 84u8, 225u8, 158u8, 37u8, 189u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::receive_messages_proof`]."]
                pub fn receive_messages_proof(
                    &self,
                    relayer_id_at_bridged_chain : types :: receive_messages_proof :: RelayerIdAtBridgedChain,
                    proof: types::receive_messages_proof::Proof,
                    messages_count: types::receive_messages_proof::MessagesCount,
                    dispatch_weight: types::receive_messages_proof::DispatchWeight,
                ) -> ::subxt::tx::Payload<types::ReceiveMessagesProof> {
                    ::subxt::tx::Payload::new_static(
                        "BridgePolkadotBulletinMessages",
                        "receive_messages_proof",
                        types::ReceiveMessagesProof {
                            relayer_id_at_bridged_chain,
                            proof,
                            messages_count,
                            dispatch_weight,
                        },
                        [
                            128u8, 99u8, 149u8, 32u8, 147u8, 78u8, 224u8, 155u8, 11u8, 86u8, 89u8,
                            67u8, 249u8, 158u8, 199u8, 78u8, 57u8, 11u8, 67u8, 0u8, 21u8, 207u8,
                            215u8, 86u8, 241u8, 228u8, 206u8, 82u8, 171u8, 162u8, 38u8, 30u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::receive_messages_delivery_proof`]."]
                pub fn receive_messages_delivery_proof(
                    &self,
                    proof: types::receive_messages_delivery_proof::Proof,
                    relayers_state: types::receive_messages_delivery_proof::RelayersState,
                ) -> ::subxt::tx::Payload<types::ReceiveMessagesDeliveryProof> {
                    ::subxt::tx::Payload::new_static(
                        "BridgePolkadotBulletinMessages",
                        "receive_messages_delivery_proof",
                        types::ReceiveMessagesDeliveryProof {
                            proof,
                            relayers_state,
                        },
                        [
                            181u8, 84u8, 93u8, 0u8, 13u8, 225u8, 111u8, 46u8, 246u8, 28u8, 196u8,
                            226u8, 13u8, 236u8, 78u8, 171u8, 104u8, 93u8, 166u8, 209u8, 124u8,
                            59u8, 216u8, 54u8, 142u8, 176u8, 50u8, 114u8, 211u8, 205u8, 124u8,
                            44u8,
                        ],
                    )
                }
            }
        }
        #[doc = "The `Event` enum of this pallet"]
        pub type Event = runtime_types::pallet_bridge_messages::pallet::Event2;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Message has been accepted and is waiting to be delivered."]
            pub struct MessageAccepted {
                pub lane_id: message_accepted::LaneId,
                pub nonce: message_accepted::Nonce,
            }
            pub mod message_accepted {
                use super::runtime_types;
                pub type LaneId = runtime_types::bp_messages::LaneId;
                pub type Nonce = ::core::primitive::u64;
            }
            impl ::subxt::events::StaticEvent for MessageAccepted {
                const PALLET: &'static str = "BridgePolkadotBulletinMessages";
                const EVENT: &'static str = "MessageAccepted";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Messages have been received from the bridged chain."]
            pub struct MessagesReceived(pub messages_received::Field0);
            pub mod messages_received {
                use super::runtime_types;
                pub type Field0 = :: std :: vec :: Vec < runtime_types :: bp_messages :: ReceivedMessages < runtime_types :: bridge_runtime_common :: messages_xcm_extension :: XcmBlobMessageDispatchResult > > ;
            }
            impl ::subxt::events::StaticEvent for MessagesReceived {
                const PALLET: &'static str = "BridgePolkadotBulletinMessages";
                const EVENT: &'static str = "MessagesReceived";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Messages in the inclusive range have been delivered to the bridged chain."]
            pub struct MessagesDelivered {
                pub lane_id: messages_delivered::LaneId,
                pub messages: messages_delivered::Messages,
            }
            pub mod messages_delivered {
                use super::runtime_types;
                pub type LaneId = runtime_types::bp_messages::LaneId;
                pub type Messages = runtime_types::bp_messages::DeliveredMessages;
            }
            impl ::subxt::events::StaticEvent for MessagesDelivered {
                const PALLET: &'static str = "BridgePolkadotBulletinMessages";
                const EVENT: &'static str = "MessagesDelivered";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub mod types {
                use super::runtime_types;
                pub mod pallet_owner {
                    use super::runtime_types;
                    pub type PalletOwner = ::subxt::utils::AccountId32;
                }
                pub mod pallet_operating_mode {
                    use super::runtime_types;
                    pub type PalletOperatingMode =
                        runtime_types::bp_messages::MessagesOperatingMode;
                }
                pub mod inbound_lanes {
                    use super::runtime_types;
                    pub type InboundLanes =
                        runtime_types::bp_messages::InboundLaneData<::subxt::utils::AccountId32>;
                    pub type Param0 = runtime_types::bp_messages::LaneId;
                }
                pub mod outbound_lanes {
                    use super::runtime_types;
                    pub type OutboundLanes = runtime_types::bp_messages::OutboundLaneData;
                    pub type Param0 = runtime_types::bp_messages::LaneId;
                }
                pub mod outbound_lanes_congested_signals {
                    use super::runtime_types;
                    pub type OutboundLanesCongestedSignals = ::core::primitive::bool;
                    pub type Param0 = runtime_types::bp_messages::LaneId;
                }
                pub mod outbound_messages {
                    use super::runtime_types;
                    pub type OutboundMessages =
                        runtime_types::bounded_collections::bounded_vec::BoundedVec<
                            ::core::primitive::u8,
                        >;
                    pub type Param0 = runtime_types::bp_messages::MessageKey;
                }
            }
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " Optional pallet owner."]
                #[doc = ""]
                #[doc = " Pallet owner has a right to halt all pallet operations and then resume it. If it is"]
                #[doc = " `None`, then there are no direct ways to halt/resume pallet operations, but other"]
                #[doc = " runtime methods may still be used to do that (i.e. democracy::referendum to update halt"]
                #[doc = " flag directly or call the `halt_operations`)."]
                pub fn pallet_owner(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::pallet_owner::PalletOwner,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "BridgePolkadotBulletinMessages",
                        "PalletOwner",
                        vec![],
                        [
                            203u8, 207u8, 161u8, 128u8, 147u8, 32u8, 171u8, 173u8, 201u8, 104u8,
                            232u8, 15u8, 70u8, 88u8, 29u8, 94u8, 179u8, 140u8, 252u8, 200u8, 200u8,
                            244u8, 89u8, 199u8, 118u8, 34u8, 197u8, 77u8, 35u8, 11u8, 250u8, 210u8,
                        ],
                    )
                }
                #[doc = " The current operating mode of the pallet."]
                #[doc = ""]
                #[doc = " Depending on the mode either all, some, or no transactions will be allowed."]
                pub fn pallet_operating_mode(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::pallet_operating_mode::PalletOperatingMode,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "BridgePolkadotBulletinMessages",
                        "PalletOperatingMode",
                        vec![],
                        [
                            1u8, 142u8, 9u8, 145u8, 1u8, 120u8, 215u8, 61u8, 174u8, 83u8, 98u8,
                            152u8, 116u8, 210u8, 22u8, 63u8, 30u8, 47u8, 27u8, 60u8, 142u8, 145u8,
                            215u8, 206u8, 155u8, 238u8, 243u8, 100u8, 175u8, 44u8, 237u8, 43u8,
                        ],
                    )
                }
                #[doc = " Map of lane id => inbound lane data."]
                pub fn inbound_lanes_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::inbound_lanes::InboundLanes,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "BridgePolkadotBulletinMessages",
                        "InboundLanes",
                        vec![],
                        [
                            8u8, 218u8, 61u8, 222u8, 240u8, 73u8, 203u8, 83u8, 59u8, 175u8, 190u8,
                            13u8, 127u8, 119u8, 207u8, 123u8, 196u8, 184u8, 29u8, 230u8, 193u8,
                            51u8, 223u8, 208u8, 53u8, 152u8, 68u8, 212u8, 222u8, 118u8, 134u8,
                            224u8,
                        ],
                    )
                }
                #[doc = " Map of lane id => inbound lane data."]
                pub fn inbound_lanes(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::inbound_lanes::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::inbound_lanes::InboundLanes,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "BridgePolkadotBulletinMessages",
                        "InboundLanes",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            8u8, 218u8, 61u8, 222u8, 240u8, 73u8, 203u8, 83u8, 59u8, 175u8, 190u8,
                            13u8, 127u8, 119u8, 207u8, 123u8, 196u8, 184u8, 29u8, 230u8, 193u8,
                            51u8, 223u8, 208u8, 53u8, 152u8, 68u8, 212u8, 222u8, 118u8, 134u8,
                            224u8,
                        ],
                    )
                }
                #[doc = " Map of lane id => outbound lane data."]
                pub fn outbound_lanes_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::outbound_lanes::OutboundLanes,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "BridgePolkadotBulletinMessages",
                        "OutboundLanes",
                        vec![],
                        [
                            218u8, 116u8, 88u8, 191u8, 4u8, 116u8, 141u8, 162u8, 173u8, 251u8,
                            117u8, 29u8, 26u8, 224u8, 60u8, 165u8, 98u8, 94u8, 18u8, 115u8, 242u8,
                            228u8, 137u8, 244u8, 64u8, 32u8, 106u8, 208u8, 160u8, 183u8, 191u8,
                            173u8,
                        ],
                    )
                }
                #[doc = " Map of lane id => outbound lane data."]
                pub fn outbound_lanes(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::outbound_lanes::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::outbound_lanes::OutboundLanes,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "BridgePolkadotBulletinMessages",
                        "OutboundLanes",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            218u8, 116u8, 88u8, 191u8, 4u8, 116u8, 141u8, 162u8, 173u8, 251u8,
                            117u8, 29u8, 26u8, 224u8, 60u8, 165u8, 98u8, 94u8, 18u8, 115u8, 242u8,
                            228u8, 137u8, 244u8, 64u8, 32u8, 106u8, 208u8, 160u8, 183u8, 191u8,
                            173u8,
                        ],
                    )
                }
                #[doc = " Map of lane id => is congested signal sent. It is managed by the"]
                #[doc = " `bridge_runtime_common::LocalXcmQueueManager`."]
                #[doc = ""]
                #[doc = " **bridges-v1**: this map is a temporary hack and will be dropped in the `v2`. We can emulate"]
                #[doc = " a storage map using `sp_io::unhashed` storage functions, but then benchmarks are not"]
                #[doc = " accounting its `proof_size`, so it is missing from the final weights. So we need to make it"]
                #[doc = " a map inside some pallet. We could use a simply value instead of map here, because"]
                #[doc = " in `v1` we'll only have a single lane. But in the case of adding another lane before `v2`,"]
                #[doc = " it'll be easier to deal with the isolated storage map instead."]
                pub fn outbound_lanes_congested_signals_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::outbound_lanes_congested_signals::OutboundLanesCongestedSignals,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "BridgePolkadotBulletinMessages",
                        "OutboundLanesCongestedSignals",
                        vec![],
                        [
                            168u8, 35u8, 16u8, 21u8, 168u8, 198u8, 151u8, 49u8, 90u8, 152u8, 181u8,
                            142u8, 215u8, 189u8, 172u8, 94u8, 144u8, 100u8, 110u8, 54u8, 47u8,
                            226u8, 79u8, 19u8, 21u8, 50u8, 3u8, 182u8, 178u8, 46u8, 154u8, 10u8,
                        ],
                    )
                }
                #[doc = " Map of lane id => is congested signal sent. It is managed by the"]
                #[doc = " `bridge_runtime_common::LocalXcmQueueManager`."]
                #[doc = ""]
                #[doc = " **bridges-v1**: this map is a temporary hack and will be dropped in the `v2`. We can emulate"]
                #[doc = " a storage map using `sp_io::unhashed` storage functions, but then benchmarks are not"]
                #[doc = " accounting its `proof_size`, so it is missing from the final weights. So we need to make it"]
                #[doc = " a map inside some pallet. We could use a simply value instead of map here, because"]
                #[doc = " in `v1` we'll only have a single lane. But in the case of adding another lane before `v2`,"]
                #[doc = " it'll be easier to deal with the isolated storage map instead."]
                pub fn outbound_lanes_congested_signals(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::outbound_lanes_congested_signals::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::outbound_lanes_congested_signals::OutboundLanesCongestedSignals,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "BridgePolkadotBulletinMessages",
                        "OutboundLanesCongestedSignals",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            168u8, 35u8, 16u8, 21u8, 168u8, 198u8, 151u8, 49u8, 90u8, 152u8, 181u8,
                            142u8, 215u8, 189u8, 172u8, 94u8, 144u8, 100u8, 110u8, 54u8, 47u8,
                            226u8, 79u8, 19u8, 21u8, 50u8, 3u8, 182u8, 178u8, 46u8, 154u8, 10u8,
                        ],
                    )
                }
                #[doc = " All queued outbound messages."]
                pub fn outbound_messages_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::outbound_messages::OutboundMessages,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "BridgePolkadotBulletinMessages",
                        "OutboundMessages",
                        vec![],
                        [
                            12u8, 220u8, 41u8, 187u8, 207u8, 251u8, 195u8, 92u8, 70u8, 125u8,
                            154u8, 153u8, 203u8, 57u8, 245u8, 172u8, 64u8, 100u8, 185u8, 100u8,
                            32u8, 36u8, 238u8, 116u8, 191u8, 216u8, 142u8, 25u8, 228u8, 27u8,
                            219u8, 40u8,
                        ],
                    )
                }
                #[doc = " All queued outbound messages."]
                pub fn outbound_messages(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::outbound_messages::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::outbound_messages::OutboundMessages,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "BridgePolkadotBulletinMessages",
                        "OutboundMessages",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            12u8, 220u8, 41u8, 187u8, 207u8, 251u8, 195u8, 92u8, 70u8, 125u8,
                            154u8, 153u8, 203u8, 57u8, 245u8, 172u8, 64u8, 100u8, 185u8, 100u8,
                            32u8, 36u8, 238u8, 116u8, 191u8, 216u8, 142u8, 25u8, 228u8, 27u8,
                            219u8, 40u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                #[doc = " Gets the chain id value from the instance."]
                pub fn bridged_chain_id(
                    &self,
                ) -> ::subxt::constants::Address<[::core::primitive::u8; 4usize]> {
                    ::subxt::constants::Address::new_static(
                        "BridgePolkadotBulletinMessages",
                        "BridgedChainId",
                        [
                            229u8, 118u8, 85u8, 247u8, 205u8, 2u8, 196u8, 182u8, 188u8, 228u8,
                            113u8, 192u8, 129u8, 87u8, 158u8, 46u8, 215u8, 75u8, 99u8, 136u8, 53u8,
                            44u8, 29u8, 171u8, 89u8, 134u8, 187u8, 1u8, 121u8, 217u8, 232u8, 125u8,
                        ],
                    )
                }
                #[doc = " Maximal encoded size of the outbound payload."]
                pub fn maximal_outbound_payload_size(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "BridgePolkadotBulletinMessages",
                        "MaximalOutboundPayloadSize",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod xcm_over_polkadot_bulletin {
        use super::root_mod;
        use super::runtime_types;
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                #[doc = " Bridged network as relative location of bridged `GlobalConsensus`."]
                pub fn bridged_network(
                    &self,
                ) -> ::subxt::constants::Address<runtime_types::staging_xcm::v4::location::Location>
                {
                    ::subxt::constants::Address::new_static(
                        "XcmOverPolkadotBulletin",
                        "BridgedNetwork",
                        [
                            156u8, 101u8, 154u8, 239u8, 2u8, 98u8, 175u8, 99u8, 52u8, 10u8, 106u8,
                            226u8, 31u8, 142u8, 176u8, 76u8, 245u8, 104u8, 178u8, 254u8, 24u8,
                            72u8, 52u8, 27u8, 252u8, 187u8, 111u8, 125u8, 241u8, 255u8, 165u8,
                            224u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod ethereum_inbound_queue {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "The `Error` enum of this pallet."]
        pub type Error = runtime_types::snowbridge_pallet_inbound_queue::pallet::Error;
        #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
        pub type Call = runtime_types::snowbridge_pallet_inbound_queue::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "See [`Pallet::submit`]."]
                pub struct Submit {
                    pub message: submit::Message,
                }
                pub mod submit {
                    use super::runtime_types;
                    pub type Message = runtime_types::snowbridge_core::inbound::Message;
                }
                impl ::subxt::blocks::StaticExtrinsic for Submit {
                    const PALLET: &'static str = "EthereumInboundQueue";
                    const CALL: &'static str = "submit";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "See [`Pallet::set_operating_mode`]."]
                pub struct SetOperatingMode {
                    pub mode: set_operating_mode::Mode,
                }
                pub mod set_operating_mode {
                    use super::runtime_types;
                    pub type Mode =
                        runtime_types::snowbridge_core::operating_mode::BasicOperatingMode;
                }
                impl ::subxt::blocks::StaticExtrinsic for SetOperatingMode {
                    const PALLET: &'static str = "EthereumInboundQueue";
                    const CALL: &'static str = "set_operating_mode";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "See [`Pallet::submit`]."]
                pub fn submit(
                    &self,
                    message: types::submit::Message,
                ) -> ::subxt::tx::Payload<types::Submit> {
                    ::subxt::tx::Payload::new_static(
                        "EthereumInboundQueue",
                        "submit",
                        types::Submit { message },
                        [
                            22u8, 11u8, 185u8, 127u8, 135u8, 22u8, 47u8, 237u8, 124u8, 242u8,
                            171u8, 48u8, 5u8, 156u8, 92u8, 43u8, 194u8, 64u8, 213u8, 31u8, 135u8,
                            202u8, 101u8, 102u8, 5u8, 243u8, 34u8, 49u8, 73u8, 229u8, 63u8, 6u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::set_operating_mode`]."]
                pub fn set_operating_mode(
                    &self,
                    mode: types::set_operating_mode::Mode,
                ) -> ::subxt::tx::Payload<types::SetOperatingMode> {
                    ::subxt::tx::Payload::new_static(
                        "EthereumInboundQueue",
                        "set_operating_mode",
                        types::SetOperatingMode { mode },
                        [
                            223u8, 92u8, 198u8, 41u8, 160u8, 232u8, 158u8, 165u8, 141u8, 127u8,
                            165u8, 39u8, 1u8, 81u8, 34u8, 107u8, 211u8, 65u8, 173u8, 65u8, 33u8,
                            35u8, 151u8, 177u8, 237u8, 17u8, 112u8, 142u8, 10u8, 93u8, 157u8, 48u8,
                        ],
                    )
                }
            }
        }
        #[doc = "The `Event` enum of this pallet"]
        pub type Event = runtime_types::snowbridge_pallet_inbound_queue::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A message was received from Ethereum"]
            pub struct MessageReceived {
                pub channel_id: message_received::ChannelId,
                pub nonce: message_received::Nonce,
                pub message_id: message_received::MessageId,
                pub fee_burned: message_received::FeeBurned,
            }
            pub mod message_received {
                use super::runtime_types;
                pub type ChannelId = runtime_types::snowbridge_core::ChannelId;
                pub type Nonce = ::core::primitive::u64;
                pub type MessageId = [::core::primitive::u8; 32usize];
                pub type FeeBurned = ::core::primitive::u128;
            }
            impl ::subxt::events::StaticEvent for MessageReceived {
                const PALLET: &'static str = "EthereumInboundQueue";
                const EVENT: &'static str = "MessageReceived";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Set OperatingMode"]
            pub struct OperatingModeChanged {
                pub mode: operating_mode_changed::Mode,
            }
            pub mod operating_mode_changed {
                use super::runtime_types;
                pub type Mode = runtime_types::snowbridge_core::operating_mode::BasicOperatingMode;
            }
            impl ::subxt::events::StaticEvent for OperatingModeChanged {
                const PALLET: &'static str = "EthereumInboundQueue";
                const EVENT: &'static str = "OperatingModeChanged";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub mod types {
                use super::runtime_types;
                pub mod nonce {
                    use super::runtime_types;
                    pub type Nonce = ::core::primitive::u64;
                    pub type Param0 = runtime_types::snowbridge_core::ChannelId;
                }
                pub mod operating_mode {
                    use super::runtime_types;
                    pub type OperatingMode =
                        runtime_types::snowbridge_core::operating_mode::BasicOperatingMode;
                }
            }
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " The current nonce for each channel"]
                pub fn nonce_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::nonce::Nonce,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "EthereumInboundQueue",
                        "Nonce",
                        vec![],
                        [
                            208u8, 4u8, 63u8, 50u8, 95u8, 222u8, 128u8, 15u8, 190u8, 173u8, 126u8,
                            81u8, 248u8, 142u8, 186u8, 94u8, 129u8, 239u8, 23u8, 253u8, 188u8,
                            197u8, 28u8, 176u8, 64u8, 129u8, 222u8, 179u8, 15u8, 20u8, 31u8, 137u8,
                        ],
                    )
                }
                #[doc = " The current nonce for each channel"]
                pub fn nonce(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::nonce::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::nonce::Nonce,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "EthereumInboundQueue",
                        "Nonce",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            208u8, 4u8, 63u8, 50u8, 95u8, 222u8, 128u8, 15u8, 190u8, 173u8, 126u8,
                            81u8, 248u8, 142u8, 186u8, 94u8, 129u8, 239u8, 23u8, 253u8, 188u8,
                            197u8, 28u8, 176u8, 64u8, 129u8, 222u8, 179u8, 15u8, 20u8, 31u8, 137u8,
                        ],
                    )
                }
                #[doc = " The current operating mode of the pallet."]
                pub fn operating_mode(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::operating_mode::OperatingMode,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "EthereumInboundQueue",
                        "OperatingMode",
                        vec![],
                        [
                            226u8, 114u8, 220u8, 104u8, 21u8, 248u8, 88u8, 169u8, 44u8, 12u8,
                            166u8, 92u8, 224u8, 190u8, 190u8, 252u8, 80u8, 153u8, 60u8, 222u8,
                            87u8, 166u8, 91u8, 22u8, 22u8, 137u8, 184u8, 158u8, 115u8, 5u8, 12u8,
                            54u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                pub fn gateway_address(&self) -> ::subxt::constants::Address<::subxt::utils::H160> {
                    ::subxt::constants::Address::new_static(
                        "EthereumInboundQueue",
                        "GatewayAddress",
                        [
                            184u8, 103u8, 76u8, 37u8, 218u8, 155u8, 125u8, 78u8, 138u8, 122u8,
                            255u8, 132u8, 124u8, 68u8, 65u8, 163u8, 97u8, 77u8, 80u8, 33u8, 69u8,
                            55u8, 69u8, 230u8, 83u8, 135u8, 254u8, 221u8, 222u8, 177u8, 10u8,
                            189u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod ethereum_outbound_queue {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "The `Error` enum of this pallet."]
        pub type Error = runtime_types::snowbridge_pallet_outbound_queue::pallet::Error;
        #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
        pub type Call = runtime_types::snowbridge_pallet_outbound_queue::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "See [`Pallet::set_operating_mode`]."]
                pub struct SetOperatingMode {
                    pub mode: set_operating_mode::Mode,
                }
                pub mod set_operating_mode {
                    use super::runtime_types;
                    pub type Mode =
                        runtime_types::snowbridge_core::operating_mode::BasicOperatingMode;
                }
                impl ::subxt::blocks::StaticExtrinsic for SetOperatingMode {
                    const PALLET: &'static str = "EthereumOutboundQueue";
                    const CALL: &'static str = "set_operating_mode";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "See [`Pallet::set_operating_mode`]."]
                pub fn set_operating_mode(
                    &self,
                    mode: types::set_operating_mode::Mode,
                ) -> ::subxt::tx::Payload<types::SetOperatingMode> {
                    ::subxt::tx::Payload::new_static(
                        "EthereumOutboundQueue",
                        "set_operating_mode",
                        types::SetOperatingMode { mode },
                        [
                            223u8, 92u8, 198u8, 41u8, 160u8, 232u8, 158u8, 165u8, 141u8, 127u8,
                            165u8, 39u8, 1u8, 81u8, 34u8, 107u8, 211u8, 65u8, 173u8, 65u8, 33u8,
                            35u8, 151u8, 177u8, 237u8, 17u8, 112u8, 142u8, 10u8, 93u8, 157u8, 48u8,
                        ],
                    )
                }
            }
        }
        #[doc = "The `Event` enum of this pallet"]
        pub type Event = runtime_types::snowbridge_pallet_outbound_queue::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Message has been queued and will be processed in the future"]
            pub struct MessageQueued {
                pub id: message_queued::Id,
            }
            pub mod message_queued {
                use super::runtime_types;
                pub type Id = ::subxt::utils::H256;
            }
            impl ::subxt::events::StaticEvent for MessageQueued {
                const PALLET: &'static str = "EthereumOutboundQueue";
                const EVENT: &'static str = "MessageQueued";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Message will be committed at the end of current block. From now on, to track the"]
            #[doc = "progress the message, use the `nonce` of `id`."]
            pub struct MessageAccepted {
                pub id: message_accepted::Id,
                pub nonce: message_accepted::Nonce,
            }
            pub mod message_accepted {
                use super::runtime_types;
                pub type Id = ::subxt::utils::H256;
                pub type Nonce = ::core::primitive::u64;
            }
            impl ::subxt::events::StaticEvent for MessageAccepted {
                const PALLET: &'static str = "EthereumOutboundQueue";
                const EVENT: &'static str = "MessageAccepted";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Some messages have been committed"]
            pub struct MessagesCommitted {
                pub root: messages_committed::Root,
                pub count: messages_committed::Count,
            }
            pub mod messages_committed {
                use super::runtime_types;
                pub type Root = ::subxt::utils::H256;
                pub type Count = ::core::primitive::u64;
            }
            impl ::subxt::events::StaticEvent for MessagesCommitted {
                const PALLET: &'static str = "EthereumOutboundQueue";
                const EVENT: &'static str = "MessagesCommitted";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Set OperatingMode"]
            pub struct OperatingModeChanged {
                pub mode: operating_mode_changed::Mode,
            }
            pub mod operating_mode_changed {
                use super::runtime_types;
                pub type Mode = runtime_types::snowbridge_core::operating_mode::BasicOperatingMode;
            }
            impl ::subxt::events::StaticEvent for OperatingModeChanged {
                const PALLET: &'static str = "EthereumOutboundQueue";
                const EVENT: &'static str = "OperatingModeChanged";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub mod types {
                use super::runtime_types;
                pub mod messages {
                    use super::runtime_types;
                    pub type Messages = ::std::vec::Vec<
                        runtime_types::snowbridge_pallet_outbound_queue::types::CommittedMessage,
                    >;
                }
                pub mod message_leaves {
                    use super::runtime_types;
                    pub type MessageLeaves = ::std::vec::Vec<::subxt::utils::H256>;
                }
                pub mod nonce {
                    use super::runtime_types;
                    pub type Nonce = ::core::primitive::u64;
                    pub type Param0 = runtime_types::snowbridge_core::ChannelId;
                }
                pub mod operating_mode {
                    use super::runtime_types;
                    pub type OperatingMode =
                        runtime_types::snowbridge_core::operating_mode::BasicOperatingMode;
                }
            }
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " Messages to be committed in the current block. This storage value is killed in"]
                #[doc = " `on_initialize`, so should never go into block PoV."]
                #[doc = ""]
                #[doc = " Is never read in the runtime, only by offchain message relayers."]
                #[doc = ""]
                #[doc = " Inspired by the `frame_system::Pallet::Events` storage value"]
                pub fn messages(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::messages::Messages,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "EthereumOutboundQueue",
                        "Messages",
                        vec![],
                        [
                            28u8, 166u8, 176u8, 166u8, 65u8, 88u8, 106u8, 224u8, 217u8, 189u8,
                            47u8, 245u8, 191u8, 26u8, 66u8, 27u8, 74u8, 211u8, 151u8, 231u8, 64u8,
                            28u8, 51u8, 243u8, 123u8, 10u8, 117u8, 158u8, 2u8, 55u8, 75u8, 245u8,
                        ],
                    )
                }
                #[doc = " Hashes of the ABI-encoded messages in the [`Messages`] storage value. Used to generate a"]
                #[doc = " merkle root during `on_finalize`. This storage value is killed in"]
                #[doc = " `on_initialize`, so should never go into block PoV."]
                pub fn message_leaves(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::message_leaves::MessageLeaves,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "EthereumOutboundQueue",
                        "MessageLeaves",
                        vec![],
                        [
                            206u8, 27u8, 108u8, 163u8, 19u8, 149u8, 84u8, 80u8, 138u8, 56u8, 255u8,
                            85u8, 8u8, 155u8, 71u8, 56u8, 166u8, 84u8, 135u8, 136u8, 45u8, 150u8,
                            157u8, 6u8, 0u8, 82u8, 61u8, 45u8, 222u8, 169u8, 46u8, 115u8,
                        ],
                    )
                }
                #[doc = " The current nonce for each message origin"]
                pub fn nonce_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::nonce::Nonce,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "EthereumOutboundQueue",
                        "Nonce",
                        vec![],
                        [
                            208u8, 4u8, 63u8, 50u8, 95u8, 222u8, 128u8, 15u8, 190u8, 173u8, 126u8,
                            81u8, 248u8, 142u8, 186u8, 94u8, 129u8, 239u8, 23u8, 253u8, 188u8,
                            197u8, 28u8, 176u8, 64u8, 129u8, 222u8, 179u8, 15u8, 20u8, 31u8, 137u8,
                        ],
                    )
                }
                #[doc = " The current nonce for each message origin"]
                pub fn nonce(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::nonce::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::nonce::Nonce,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "EthereumOutboundQueue",
                        "Nonce",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            208u8, 4u8, 63u8, 50u8, 95u8, 222u8, 128u8, 15u8, 190u8, 173u8, 126u8,
                            81u8, 248u8, 142u8, 186u8, 94u8, 129u8, 239u8, 23u8, 253u8, 188u8,
                            197u8, 28u8, 176u8, 64u8, 129u8, 222u8, 179u8, 15u8, 20u8, 31u8, 137u8,
                        ],
                    )
                }
                #[doc = " The current operating mode of the pallet."]
                pub fn operating_mode(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::operating_mode::OperatingMode,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "EthereumOutboundQueue",
                        "OperatingMode",
                        vec![],
                        [
                            226u8, 114u8, 220u8, 104u8, 21u8, 248u8, 88u8, 169u8, 44u8, 12u8,
                            166u8, 92u8, 224u8, 190u8, 190u8, 252u8, 80u8, 153u8, 60u8, 222u8,
                            87u8, 166u8, 91u8, 22u8, 22u8, 137u8, 184u8, 158u8, 115u8, 5u8, 12u8,
                            54u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                #[doc = " Number of decimal places in native currency"]
                pub fn decimals(&self) -> ::subxt::constants::Address<::core::primitive::u8> {
                    ::subxt::constants::Address::new_static(
                        "EthereumOutboundQueue",
                        "Decimals",
                        [
                            141u8, 130u8, 11u8, 35u8, 226u8, 114u8, 92u8, 179u8, 168u8, 110u8,
                            28u8, 91u8, 221u8, 64u8, 4u8, 148u8, 201u8, 193u8, 185u8, 66u8, 226u8,
                            114u8, 97u8, 79u8, 62u8, 212u8, 202u8, 114u8, 237u8, 228u8, 183u8,
                            165u8,
                        ],
                    )
                }
                #[doc = " Max bytes in a message payload"]
                pub fn max_message_payload_size(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "EthereumOutboundQueue",
                        "MaxMessagePayloadSize",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " Max number of messages processed per block"]
                pub fn max_messages_per_block(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "EthereumOutboundQueue",
                        "MaxMessagesPerBlock",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod ethereum_beacon_client {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "The `Error` enum of this pallet."]
        pub type Error = runtime_types::snowbridge_pallet_ethereum_client::pallet::Error;
        #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
        pub type Call = runtime_types::snowbridge_pallet_ethereum_client::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "See [`Pallet::force_checkpoint`]."]
                pub struct ForceCheckpoint {
                    pub update: ::std::boxed::Box<force_checkpoint::Update>,
                }
                pub mod force_checkpoint {
                    use super::runtime_types;
                    pub type Update =
                        runtime_types::snowbridge_beacon_primitives::updates::CheckpointUpdate;
                }
                impl ::subxt::blocks::StaticExtrinsic for ForceCheckpoint {
                    const PALLET: &'static str = "EthereumBeaconClient";
                    const CALL: &'static str = "force_checkpoint";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "See [`Pallet::submit`]."]
                pub struct Submit {
                    pub update: ::std::boxed::Box<submit::Update>,
                }
                pub mod submit {
                    use super::runtime_types;
                    pub type Update = runtime_types::snowbridge_beacon_primitives::updates::Update;
                }
                impl ::subxt::blocks::StaticExtrinsic for Submit {
                    const PALLET: &'static str = "EthereumBeaconClient";
                    const CALL: &'static str = "submit";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "See [`Pallet::submit_execution_header`]."]
                pub struct SubmitExecutionHeader {
                    pub update: ::std::boxed::Box<submit_execution_header::Update>,
                }
                pub mod submit_execution_header {
                    use super::runtime_types;
                    pub type Update =
                        runtime_types::snowbridge_beacon_primitives::updates::ExecutionHeaderUpdate;
                }
                impl ::subxt::blocks::StaticExtrinsic for SubmitExecutionHeader {
                    const PALLET: &'static str = "EthereumBeaconClient";
                    const CALL: &'static str = "submit_execution_header";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "See [`Pallet::set_operating_mode`]."]
                pub struct SetOperatingMode {
                    pub mode: set_operating_mode::Mode,
                }
                pub mod set_operating_mode {
                    use super::runtime_types;
                    pub type Mode =
                        runtime_types::snowbridge_core::operating_mode::BasicOperatingMode;
                }
                impl ::subxt::blocks::StaticExtrinsic for SetOperatingMode {
                    const PALLET: &'static str = "EthereumBeaconClient";
                    const CALL: &'static str = "set_operating_mode";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "See [`Pallet::force_checkpoint`]."]
                pub fn force_checkpoint(
                    &self,
                    update: types::force_checkpoint::Update,
                ) -> ::subxt::tx::Payload<types::ForceCheckpoint> {
                    ::subxt::tx::Payload::new_static(
                        "EthereumBeaconClient",
                        "force_checkpoint",
                        types::ForceCheckpoint {
                            update: ::std::boxed::Box::new(update),
                        },
                        [
                            15u8, 219u8, 58u8, 101u8, 62u8, 117u8, 146u8, 143u8, 66u8, 29u8, 124u8,
                            77u8, 163u8, 178u8, 170u8, 250u8, 228u8, 145u8, 118u8, 148u8, 161u8,
                            186u8, 67u8, 148u8, 33u8, 133u8, 147u8, 143u8, 158u8, 184u8, 150u8,
                            76u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::submit`]."]
                pub fn submit(
                    &self,
                    update: types::submit::Update,
                ) -> ::subxt::tx::Payload<types::Submit> {
                    ::subxt::tx::Payload::new_static(
                        "EthereumBeaconClient",
                        "submit",
                        types::Submit {
                            update: ::std::boxed::Box::new(update),
                        },
                        [
                            135u8, 244u8, 145u8, 254u8, 195u8, 245u8, 199u8, 174u8, 179u8, 87u8,
                            45u8, 130u8, 133u8, 221u8, 181u8, 42u8, 164u8, 218u8, 217u8, 99u8,
                            182u8, 179u8, 57u8, 97u8, 244u8, 37u8, 157u8, 190u8, 251u8, 207u8,
                            223u8, 113u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::submit_execution_header`]."]
                pub fn submit_execution_header(
                    &self,
                    update: types::submit_execution_header::Update,
                ) -> ::subxt::tx::Payload<types::SubmitExecutionHeader> {
                    ::subxt::tx::Payload::new_static(
                        "EthereumBeaconClient",
                        "submit_execution_header",
                        types::SubmitExecutionHeader {
                            update: ::std::boxed::Box::new(update),
                        },
                        [
                            38u8, 107u8, 136u8, 21u8, 170u8, 148u8, 57u8, 13u8, 44u8, 144u8, 78u8,
                            99u8, 68u8, 169u8, 68u8, 28u8, 67u8, 52u8, 77u8, 102u8, 105u8, 55u8,
                            186u8, 59u8, 8u8, 34u8, 151u8, 212u8, 200u8, 29u8, 196u8, 232u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::set_operating_mode`]."]
                pub fn set_operating_mode(
                    &self,
                    mode: types::set_operating_mode::Mode,
                ) -> ::subxt::tx::Payload<types::SetOperatingMode> {
                    ::subxt::tx::Payload::new_static(
                        "EthereumBeaconClient",
                        "set_operating_mode",
                        types::SetOperatingMode { mode },
                        [
                            223u8, 92u8, 198u8, 41u8, 160u8, 232u8, 158u8, 165u8, 141u8, 127u8,
                            165u8, 39u8, 1u8, 81u8, 34u8, 107u8, 211u8, 65u8, 173u8, 65u8, 33u8,
                            35u8, 151u8, 177u8, 237u8, 17u8, 112u8, 142u8, 10u8, 93u8, 157u8, 48u8,
                        ],
                    )
                }
            }
        }
        #[doc = "The `Event` enum of this pallet"]
        pub type Event = runtime_types::snowbridge_pallet_ethereum_client::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct BeaconHeaderImported {
                pub block_hash: beacon_header_imported::BlockHash,
                pub slot: beacon_header_imported::Slot,
            }
            pub mod beacon_header_imported {
                use super::runtime_types;
                pub type BlockHash = ::subxt::utils::H256;
                pub type Slot = ::core::primitive::u64;
            }
            impl ::subxt::events::StaticEvent for BeaconHeaderImported {
                const PALLET: &'static str = "EthereumBeaconClient";
                const EVENT: &'static str = "BeaconHeaderImported";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct ExecutionHeaderImported {
                pub block_hash: execution_header_imported::BlockHash,
                pub block_number: execution_header_imported::BlockNumber,
            }
            pub mod execution_header_imported {
                use super::runtime_types;
                pub type BlockHash = ::subxt::utils::H256;
                pub type BlockNumber = ::core::primitive::u64;
            }
            impl ::subxt::events::StaticEvent for ExecutionHeaderImported {
                const PALLET: &'static str = "EthereumBeaconClient";
                const EVENT: &'static str = "ExecutionHeaderImported";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct SyncCommitteeUpdated {
                pub period: sync_committee_updated::Period,
            }
            pub mod sync_committee_updated {
                use super::runtime_types;
                pub type Period = ::core::primitive::u64;
            }
            impl ::subxt::events::StaticEvent for SyncCommitteeUpdated {
                const PALLET: &'static str = "EthereumBeaconClient";
                const EVENT: &'static str = "SyncCommitteeUpdated";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Set OperatingMode"]
            pub struct OperatingModeChanged {
                pub mode: operating_mode_changed::Mode,
            }
            pub mod operating_mode_changed {
                use super::runtime_types;
                pub type Mode = runtime_types::snowbridge_core::operating_mode::BasicOperatingMode;
            }
            impl ::subxt::events::StaticEvent for OperatingModeChanged {
                const PALLET: &'static str = "EthereumBeaconClient";
                const EVENT: &'static str = "OperatingModeChanged";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub mod types {
                use super::runtime_types;
                pub mod initial_checkpoint_root {
                    use super::runtime_types;
                    pub type InitialCheckpointRoot = ::subxt::utils::H256;
                }
                pub mod latest_finalized_block_root {
                    use super::runtime_types;
                    pub type LatestFinalizedBlockRoot = ::subxt::utils::H256;
                }
                pub mod finalized_beacon_state {
                    use super::runtime_types;
                    pub type FinalizedBeaconState =
                        runtime_types::snowbridge_beacon_primitives::types::CompactBeaconState;
                    pub type Param0 = ::subxt::utils::H256;
                }
                pub mod finalized_beacon_state_index {
                    use super::runtime_types;
                    pub type FinalizedBeaconStateIndex = ::core::primitive::u32;
                }
                pub mod finalized_beacon_state_mapping {
                    use super::runtime_types;
                    pub type FinalizedBeaconStateMapping = ::subxt::utils::H256;
                    pub type Param0 = ::core::primitive::u32;
                }
                pub mod validators_root {
                    use super::runtime_types;
                    pub type ValidatorsRoot = ::subxt::utils::H256;
                }
                pub mod current_sync_committee {
                    use super::runtime_types;
                    pub type CurrentSyncCommittee =
                        runtime_types::snowbridge_beacon_primitives::types::SyncCommitteePrepared;
                }
                pub mod next_sync_committee {
                    use super::runtime_types;
                    pub type NextSyncCommittee =
                        runtime_types::snowbridge_beacon_primitives::types::SyncCommitteePrepared;
                }
                pub mod latest_execution_state {
                    use super::runtime_types;
                    pub type LatestExecutionState =
                        runtime_types::snowbridge_beacon_primitives::types::ExecutionHeaderState;
                }
                pub mod execution_headers {
                    use super::runtime_types;
                    pub type ExecutionHeaders =
                        runtime_types::snowbridge_beacon_primitives::types::CompactExecutionHeader;
                    pub type Param0 = ::subxt::utils::H256;
                }
                pub mod execution_header_index {
                    use super::runtime_types;
                    pub type ExecutionHeaderIndex = ::core::primitive::u32;
                }
                pub mod execution_header_mapping {
                    use super::runtime_types;
                    pub type ExecutionHeaderMapping = ::subxt::utils::H256;
                    pub type Param0 = ::core::primitive::u32;
                }
                pub mod operating_mode {
                    use super::runtime_types;
                    pub type OperatingMode =
                        runtime_types::snowbridge_core::operating_mode::BasicOperatingMode;
                }
            }
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " Latest imported checkpoint root"]
                pub fn initial_checkpoint_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::initial_checkpoint_root::InitialCheckpointRoot,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "EthereumBeaconClient",
                        "InitialCheckpointRoot",
                        vec![],
                        [
                            56u8, 223u8, 6u8, 69u8, 82u8, 219u8, 129u8, 146u8, 185u8, 32u8, 235u8,
                            10u8, 220u8, 165u8, 98u8, 226u8, 93u8, 173u8, 66u8, 7u8, 214u8, 157u8,
                            125u8, 21u8, 117u8, 52u8, 237u8, 176u8, 232u8, 217u8, 73u8, 116u8,
                        ],
                    )
                }
                #[doc = " Latest imported finalized block root"]
                pub fn latest_finalized_block_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::latest_finalized_block_root::LatestFinalizedBlockRoot,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "EthereumBeaconClient",
                        "LatestFinalizedBlockRoot",
                        vec![],
                        [
                            227u8, 89u8, 99u8, 8u8, 252u8, 245u8, 244u8, 207u8, 195u8, 120u8,
                            115u8, 52u8, 236u8, 110u8, 122u8, 226u8, 5u8, 194u8, 220u8, 163u8,
                            234u8, 36u8, 34u8, 114u8, 20u8, 151u8, 243u8, 53u8, 255u8, 252u8, 45u8,
                            109u8,
                        ],
                    )
                }
                #[doc = " Beacon state by finalized block root"]
                pub fn finalized_beacon_state_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::finalized_beacon_state::FinalizedBeaconState,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "EthereumBeaconClient",
                        "FinalizedBeaconState",
                        vec![],
                        [
                            157u8, 52u8, 140u8, 74u8, 238u8, 128u8, 194u8, 204u8, 115u8, 254u8,
                            207u8, 40u8, 50u8, 248u8, 162u8, 243u8, 224u8, 119u8, 188u8, 87u8, 1u8,
                            114u8, 102u8, 118u8, 226u8, 24u8, 85u8, 254u8, 148u8, 59u8, 236u8,
                            112u8,
                        ],
                    )
                }
                #[doc = " Beacon state by finalized block root"]
                pub fn finalized_beacon_state(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::finalized_beacon_state::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::finalized_beacon_state::FinalizedBeaconState,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "EthereumBeaconClient",
                        "FinalizedBeaconState",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            157u8, 52u8, 140u8, 74u8, 238u8, 128u8, 194u8, 204u8, 115u8, 254u8,
                            207u8, 40u8, 50u8, 248u8, 162u8, 243u8, 224u8, 119u8, 188u8, 87u8, 1u8,
                            114u8, 102u8, 118u8, 226u8, 24u8, 85u8, 254u8, 148u8, 59u8, 236u8,
                            112u8,
                        ],
                    )
                }
                #[doc = " Finalized Headers: Current position in ring buffer"]
                pub fn finalized_beacon_state_index(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::finalized_beacon_state_index::FinalizedBeaconStateIndex,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "EthereumBeaconClient",
                        "FinalizedBeaconStateIndex",
                        vec![],
                        [
                            162u8, 25u8, 179u8, 182u8, 182u8, 86u8, 200u8, 95u8, 218u8, 198u8,
                            10u8, 138u8, 193u8, 101u8, 120u8, 113u8, 187u8, 25u8, 229u8, 71u8,
                            172u8, 212u8, 205u8, 62u8, 150u8, 87u8, 111u8, 190u8, 183u8, 39u8,
                            190u8, 241u8,
                        ],
                    )
                }
                #[doc = " Finalized Headers: Mapping of ring buffer index to a pruning candidate"]
                pub fn finalized_beacon_state_mapping_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::finalized_beacon_state_mapping::FinalizedBeaconStateMapping,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "EthereumBeaconClient",
                        "FinalizedBeaconStateMapping",
                        vec![],
                        [
                            164u8, 150u8, 120u8, 251u8, 127u8, 46u8, 22u8, 185u8, 2u8, 190u8,
                            217u8, 245u8, 141u8, 116u8, 113u8, 38u8, 39u8, 18u8, 152u8, 107u8,
                            215u8, 56u8, 140u8, 96u8, 14u8, 82u8, 194u8, 242u8, 41u8, 161u8, 112u8,
                            68u8,
                        ],
                    )
                }
                #[doc = " Finalized Headers: Mapping of ring buffer index to a pruning candidate"]
                pub fn finalized_beacon_state_mapping(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::finalized_beacon_state_mapping::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::finalized_beacon_state_mapping::FinalizedBeaconStateMapping,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "EthereumBeaconClient",
                        "FinalizedBeaconStateMapping",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            164u8, 150u8, 120u8, 251u8, 127u8, 46u8, 22u8, 185u8, 2u8, 190u8,
                            217u8, 245u8, 141u8, 116u8, 113u8, 38u8, 39u8, 18u8, 152u8, 107u8,
                            215u8, 56u8, 140u8, 96u8, 14u8, 82u8, 194u8, 242u8, 41u8, 161u8, 112u8,
                            68u8,
                        ],
                    )
                }
                pub fn validators_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::validators_root::ValidatorsRoot,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "EthereumBeaconClient",
                        "ValidatorsRoot",
                        vec![],
                        [
                            134u8, 235u8, 142u8, 51u8, 155u8, 224u8, 110u8, 15u8, 72u8, 218u8,
                            23u8, 215u8, 94u8, 97u8, 145u8, 15u8, 183u8, 229u8, 163u8, 56u8, 249u8,
                            142u8, 57u8, 218u8, 36u8, 131u8, 58u8, 255u8, 164u8, 108u8, 71u8,
                            154u8,
                        ],
                    )
                }
                #[doc = " Sync committee for current period"]
                pub fn current_sync_committee(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::current_sync_committee::CurrentSyncCommittee,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "EthereumBeaconClient",
                        "CurrentSyncCommittee",
                        vec![],
                        [
                            182u8, 115u8, 69u8, 134u8, 246u8, 32u8, 224u8, 232u8, 188u8, 50u8,
                            236u8, 84u8, 8u8, 221u8, 245u8, 10u8, 184u8, 111u8, 230u8, 191u8, 44u8,
                            24u8, 204u8, 11u8, 183u8, 104u8, 177u8, 167u8, 156u8, 44u8, 222u8,
                            238u8,
                        ],
                    )
                }
                #[doc = " Sync committee for next period"]
                pub fn next_sync_committee(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::next_sync_committee::NextSyncCommittee,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "EthereumBeaconClient",
                        "NextSyncCommittee",
                        vec![],
                        [
                            227u8, 156u8, 211u8, 82u8, 230u8, 193u8, 91u8, 149u8, 155u8, 225u8,
                            144u8, 128u8, 25u8, 162u8, 152u8, 214u8, 175u8, 181u8, 193u8, 74u8,
                            13u8, 47u8, 130u8, 72u8, 136u8, 190u8, 139u8, 139u8, 52u8, 136u8, 28u8,
                            218u8,
                        ],
                    )
                }
                #[doc = " Latest imported execution header"]
                pub fn latest_execution_state(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::latest_execution_state::LatestExecutionState,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "EthereumBeaconClient",
                        "LatestExecutionState",
                        vec![],
                        [
                            97u8, 183u8, 93u8, 149u8, 5u8, 250u8, 28u8, 193u8, 190u8, 126u8, 120u8,
                            33u8, 203u8, 147u8, 87u8, 26u8, 166u8, 59u8, 20u8, 225u8, 181u8, 165u8,
                            162u8, 14u8, 72u8, 217u8, 36u8, 35u8, 137u8, 182u8, 48u8, 32u8,
                        ],
                    )
                }
                #[doc = " Execution Headers"]
                pub fn execution_headers_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::execution_headers::ExecutionHeaders,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "EthereumBeaconClient",
                        "ExecutionHeaders",
                        vec![],
                        [
                            97u8, 100u8, 9u8, 162u8, 192u8, 73u8, 22u8, 183u8, 151u8, 17u8, 242u8,
                            144u8, 110u8, 128u8, 191u8, 174u8, 251u8, 181u8, 65u8, 233u8, 146u8,
                            46u8, 228u8, 20u8, 186u8, 41u8, 44u8, 131u8, 64u8, 113u8, 211u8, 54u8,
                        ],
                    )
                }
                #[doc = " Execution Headers"]
                pub fn execution_headers(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::execution_headers::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::execution_headers::ExecutionHeaders,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "EthereumBeaconClient",
                        "ExecutionHeaders",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            97u8, 100u8, 9u8, 162u8, 192u8, 73u8, 22u8, 183u8, 151u8, 17u8, 242u8,
                            144u8, 110u8, 128u8, 191u8, 174u8, 251u8, 181u8, 65u8, 233u8, 146u8,
                            46u8, 228u8, 20u8, 186u8, 41u8, 44u8, 131u8, 64u8, 113u8, 211u8, 54u8,
                        ],
                    )
                }
                #[doc = " Execution Headers: Current position in ring buffer"]
                pub fn execution_header_index(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::execution_header_index::ExecutionHeaderIndex,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "EthereumBeaconClient",
                        "ExecutionHeaderIndex",
                        vec![],
                        [
                            18u8, 41u8, 133u8, 211u8, 177u8, 28u8, 251u8, 213u8, 79u8, 229u8,
                            100u8, 126u8, 6u8, 66u8, 18u8, 99u8, 52u8, 93u8, 198u8, 3u8, 93u8,
                            249u8, 173u8, 229u8, 254u8, 1u8, 139u8, 46u8, 118u8, 22u8, 22u8, 239u8,
                        ],
                    )
                }
                #[doc = " Execution Headers: Mapping of ring buffer index to a pruning candidate"]
                pub fn execution_header_mapping_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::execution_header_mapping::ExecutionHeaderMapping,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "EthereumBeaconClient",
                        "ExecutionHeaderMapping",
                        vec![],
                        [
                            73u8, 135u8, 59u8, 166u8, 240u8, 241u8, 189u8, 38u8, 250u8, 173u8,
                            111u8, 51u8, 247u8, 20u8, 92u8, 160u8, 121u8, 166u8, 103u8, 199u8,
                            152u8, 251u8, 55u8, 121u8, 65u8, 180u8, 163u8, 219u8, 210u8, 46u8,
                            227u8, 252u8,
                        ],
                    )
                }
                #[doc = " Execution Headers: Mapping of ring buffer index to a pruning candidate"]
                pub fn execution_header_mapping(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::execution_header_mapping::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::execution_header_mapping::ExecutionHeaderMapping,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "EthereumBeaconClient",
                        "ExecutionHeaderMapping",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            73u8, 135u8, 59u8, 166u8, 240u8, 241u8, 189u8, 38u8, 250u8, 173u8,
                            111u8, 51u8, 247u8, 20u8, 92u8, 160u8, 121u8, 166u8, 103u8, 199u8,
                            152u8, 251u8, 55u8, 121u8, 65u8, 180u8, 163u8, 219u8, 210u8, 46u8,
                            227u8, 252u8,
                        ],
                    )
                }
                #[doc = " The current operating mode of the pallet."]
                pub fn operating_mode(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::operating_mode::OperatingMode,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "EthereumBeaconClient",
                        "OperatingMode",
                        vec![],
                        [
                            226u8, 114u8, 220u8, 104u8, 21u8, 248u8, 88u8, 169u8, 44u8, 12u8,
                            166u8, 92u8, 224u8, 190u8, 190u8, 252u8, 80u8, 153u8, 60u8, 222u8,
                            87u8, 166u8, 91u8, 22u8, 22u8, 137u8, 184u8, 158u8, 115u8, 5u8, 12u8,
                            54u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                pub fn fork_versions(
                    &self,
                ) -> ::subxt::constants::Address<
                    runtime_types::snowbridge_beacon_primitives::types::ForkVersions,
                > {
                    ::subxt::constants::Address::new_static(
                        "EthereumBeaconClient",
                        "ForkVersions",
                        [
                            9u8, 1u8, 244u8, 214u8, 61u8, 75u8, 52u8, 113u8, 135u8, 42u8, 194u8,
                            2u8, 214u8, 7u8, 89u8, 2u8, 11u8, 39u8, 60u8, 65u8, 62u8, 90u8, 17u8,
                            168u8, 30u8, 223u8, 77u8, 15u8, 14u8, 77u8, 201u8, 117u8,
                        ],
                    )
                }
                #[doc = " Maximum number of execution headers to keep"]
                pub fn max_execution_headers_to_keep(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "EthereumBeaconClient",
                        "MaxExecutionHeadersToKeep",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod ethereum_system {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "The `Error` enum of this pallet."]
        pub type Error = runtime_types::snowbridge_pallet_system::pallet::Error;
        #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
        pub type Call = runtime_types::snowbridge_pallet_system::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "See [`Pallet::upgrade`]."]
                pub struct Upgrade {
                    pub impl_address: upgrade::ImplAddress,
                    pub impl_code_hash: upgrade::ImplCodeHash,
                    pub initializer: upgrade::Initializer,
                }
                pub mod upgrade {
                    use super::runtime_types;
                    pub type ImplAddress = ::subxt::utils::H160;
                    pub type ImplCodeHash = ::subxt::utils::H256;
                    pub type Initializer = ::core::option::Option<
                        runtime_types::snowbridge_core::outbound::v1::Initializer,
                    >;
                }
                impl ::subxt::blocks::StaticExtrinsic for Upgrade {
                    const PALLET: &'static str = "EthereumSystem";
                    const CALL: &'static str = "upgrade";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "See [`Pallet::set_operating_mode`]."]
                pub struct SetOperatingMode {
                    pub mode: set_operating_mode::Mode,
                }
                pub mod set_operating_mode {
                    use super::runtime_types;
                    pub type Mode = runtime_types::snowbridge_core::outbound::v1::OperatingMode;
                }
                impl ::subxt::blocks::StaticExtrinsic for SetOperatingMode {
                    const PALLET: &'static str = "EthereumSystem";
                    const CALL: &'static str = "set_operating_mode";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "See [`Pallet::set_pricing_parameters`]."]
                pub struct SetPricingParameters {
                    pub params: set_pricing_parameters::Params,
                }
                pub mod set_pricing_parameters {
                    use super::runtime_types;
                    pub type Params = runtime_types::snowbridge_core::pricing::PricingParameters<
                        ::core::primitive::u128,
                    >;
                }
                impl ::subxt::blocks::StaticExtrinsic for SetPricingParameters {
                    const PALLET: &'static str = "EthereumSystem";
                    const CALL: &'static str = "set_pricing_parameters";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "See [`Pallet::create_agent`]."]
                pub struct CreateAgent;
                impl ::subxt::blocks::StaticExtrinsic for CreateAgent {
                    const PALLET: &'static str = "EthereumSystem";
                    const CALL: &'static str = "create_agent";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "See [`Pallet::create_channel`]."]
                pub struct CreateChannel {
                    pub mode: create_channel::Mode,
                }
                pub mod create_channel {
                    use super::runtime_types;
                    pub type Mode = runtime_types::snowbridge_core::outbound::v1::OperatingMode;
                }
                impl ::subxt::blocks::StaticExtrinsic for CreateChannel {
                    const PALLET: &'static str = "EthereumSystem";
                    const CALL: &'static str = "create_channel";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "See [`Pallet::update_channel`]."]
                pub struct UpdateChannel {
                    pub mode: update_channel::Mode,
                }
                pub mod update_channel {
                    use super::runtime_types;
                    pub type Mode = runtime_types::snowbridge_core::outbound::v1::OperatingMode;
                }
                impl ::subxt::blocks::StaticExtrinsic for UpdateChannel {
                    const PALLET: &'static str = "EthereumSystem";
                    const CALL: &'static str = "update_channel";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "See [`Pallet::force_update_channel`]."]
                pub struct ForceUpdateChannel {
                    pub channel_id: force_update_channel::ChannelId,
                    pub mode: force_update_channel::Mode,
                }
                pub mod force_update_channel {
                    use super::runtime_types;
                    pub type ChannelId = runtime_types::snowbridge_core::ChannelId;
                    pub type Mode = runtime_types::snowbridge_core::outbound::v1::OperatingMode;
                }
                impl ::subxt::blocks::StaticExtrinsic for ForceUpdateChannel {
                    const PALLET: &'static str = "EthereumSystem";
                    const CALL: &'static str = "force_update_channel";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "See [`Pallet::transfer_native_from_agent`]."]
                pub struct TransferNativeFromAgent {
                    pub recipient: transfer_native_from_agent::Recipient,
                    pub amount: transfer_native_from_agent::Amount,
                }
                pub mod transfer_native_from_agent {
                    use super::runtime_types;
                    pub type Recipient = ::subxt::utils::H160;
                    pub type Amount = ::core::primitive::u128;
                }
                impl ::subxt::blocks::StaticExtrinsic for TransferNativeFromAgent {
                    const PALLET: &'static str = "EthereumSystem";
                    const CALL: &'static str = "transfer_native_from_agent";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "See [`Pallet::force_transfer_native_from_agent`]."]
                pub struct ForceTransferNativeFromAgent {
                    pub location: ::std::boxed::Box<force_transfer_native_from_agent::Location>,
                    pub recipient: force_transfer_native_from_agent::Recipient,
                    pub amount: force_transfer_native_from_agent::Amount,
                }
                pub mod force_transfer_native_from_agent {
                    use super::runtime_types;
                    pub type Location = runtime_types::xcm::VersionedLocation;
                    pub type Recipient = ::subxt::utils::H160;
                    pub type Amount = ::core::primitive::u128;
                }
                impl ::subxt::blocks::StaticExtrinsic for ForceTransferNativeFromAgent {
                    const PALLET: &'static str = "EthereumSystem";
                    const CALL: &'static str = "force_transfer_native_from_agent";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "See [`Pallet::set_token_transfer_fees`]."]
                pub struct SetTokenTransferFees {
                    pub create_asset_xcm: set_token_transfer_fees::CreateAssetXcm,
                    pub transfer_asset_xcm: set_token_transfer_fees::TransferAssetXcm,
                    pub register_token: set_token_transfer_fees::RegisterToken,
                }
                pub mod set_token_transfer_fees {
                    use super::runtime_types;
                    pub type CreateAssetXcm = ::core::primitive::u128;
                    pub type TransferAssetXcm = ::core::primitive::u128;
                    pub type RegisterToken = runtime_types::primitive_types::U256;
                }
                impl ::subxt::blocks::StaticExtrinsic for SetTokenTransferFees {
                    const PALLET: &'static str = "EthereumSystem";
                    const CALL: &'static str = "set_token_transfer_fees";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "See [`Pallet::upgrade`]."]
                pub fn upgrade(
                    &self,
                    impl_address: types::upgrade::ImplAddress,
                    impl_code_hash: types::upgrade::ImplCodeHash,
                    initializer: types::upgrade::Initializer,
                ) -> ::subxt::tx::Payload<types::Upgrade> {
                    ::subxt::tx::Payload::new_static(
                        "EthereumSystem",
                        "upgrade",
                        types::Upgrade {
                            impl_address,
                            impl_code_hash,
                            initializer,
                        },
                        [
                            227u8, 207u8, 15u8, 167u8, 160u8, 202u8, 196u8, 255u8, 150u8, 3u8,
                            211u8, 137u8, 49u8, 80u8, 89u8, 51u8, 157u8, 60u8, 8u8, 14u8, 147u8,
                            243u8, 58u8, 160u8, 108u8, 8u8, 205u8, 46u8, 190u8, 91u8, 3u8, 239u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::set_operating_mode`]."]
                pub fn set_operating_mode(
                    &self,
                    mode: types::set_operating_mode::Mode,
                ) -> ::subxt::tx::Payload<types::SetOperatingMode> {
                    ::subxt::tx::Payload::new_static(
                        "EthereumSystem",
                        "set_operating_mode",
                        types::SetOperatingMode { mode },
                        [
                            59u8, 164u8, 55u8, 173u8, 149u8, 244u8, 49u8, 72u8, 118u8, 243u8, 4u8,
                            19u8, 6u8, 38u8, 144u8, 23u8, 179u8, 167u8, 6u8, 244u8, 8u8, 136u8,
                            149u8, 139u8, 26u8, 157u8, 153u8, 27u8, 4u8, 231u8, 104u8, 50u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::set_pricing_parameters`]."]
                pub fn set_pricing_parameters(
                    &self,
                    params: types::set_pricing_parameters::Params,
                ) -> ::subxt::tx::Payload<types::SetPricingParameters> {
                    ::subxt::tx::Payload::new_static(
                        "EthereumSystem",
                        "set_pricing_parameters",
                        types::SetPricingParameters { params },
                        [
                            71u8, 211u8, 95u8, 195u8, 76u8, 38u8, 45u8, 93u8, 4u8, 243u8, 241u8,
                            57u8, 32u8, 161u8, 101u8, 214u8, 153u8, 80u8, 22u8, 248u8, 11u8, 51u8,
                            93u8, 136u8, 173u8, 79u8, 145u8, 234u8, 0u8, 127u8, 90u8, 231u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::create_agent`]."]
                pub fn create_agent(&self) -> ::subxt::tx::Payload<types::CreateAgent> {
                    ::subxt::tx::Payload::new_static(
                        "EthereumSystem",
                        "create_agent",
                        types::CreateAgent {},
                        [
                            245u8, 176u8, 135u8, 35u8, 113u8, 87u8, 182u8, 187u8, 207u8, 32u8,
                            203u8, 45u8, 211u8, 172u8, 178u8, 11u8, 211u8, 175u8, 216u8, 134u8,
                            61u8, 143u8, 153u8, 55u8, 45u8, 81u8, 86u8, 248u8, 116u8, 59u8, 130u8,
                            214u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::create_channel`]."]
                pub fn create_channel(
                    &self,
                    mode: types::create_channel::Mode,
                ) -> ::subxt::tx::Payload<types::CreateChannel> {
                    ::subxt::tx::Payload::new_static(
                        "EthereumSystem",
                        "create_channel",
                        types::CreateChannel { mode },
                        [
                            120u8, 109u8, 137u8, 128u8, 79u8, 152u8, 16u8, 114u8, 135u8, 14u8,
                            175u8, 122u8, 16u8, 45u8, 227u8, 79u8, 102u8, 124u8, 201u8, 122u8,
                            92u8, 185u8, 234u8, 75u8, 80u8, 122u8, 0u8, 64u8, 144u8, 160u8, 179u8,
                            228u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::update_channel`]."]
                pub fn update_channel(
                    &self,
                    mode: types::update_channel::Mode,
                ) -> ::subxt::tx::Payload<types::UpdateChannel> {
                    ::subxt::tx::Payload::new_static(
                        "EthereumSystem",
                        "update_channel",
                        types::UpdateChannel { mode },
                        [
                            72u8, 35u8, 88u8, 240u8, 35u8, 57u8, 100u8, 189u8, 149u8, 119u8, 126u8,
                            197u8, 71u8, 170u8, 91u8, 100u8, 237u8, 140u8, 162u8, 250u8, 153u8,
                            203u8, 167u8, 66u8, 213u8, 152u8, 206u8, 109u8, 10u8, 107u8, 39u8,
                            251u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::force_update_channel`]."]
                pub fn force_update_channel(
                    &self,
                    channel_id: types::force_update_channel::ChannelId,
                    mode: types::force_update_channel::Mode,
                ) -> ::subxt::tx::Payload<types::ForceUpdateChannel> {
                    ::subxt::tx::Payload::new_static(
                        "EthereumSystem",
                        "force_update_channel",
                        types::ForceUpdateChannel { channel_id, mode },
                        [
                            183u8, 11u8, 236u8, 13u8, 201u8, 231u8, 211u8, 139u8, 175u8, 253u8,
                            192u8, 72u8, 242u8, 28u8, 44u8, 43u8, 182u8, 58u8, 38u8, 106u8, 63u8,
                            13u8, 53u8, 243u8, 125u8, 121u8, 222u8, 128u8, 108u8, 244u8, 75u8,
                            19u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::transfer_native_from_agent`]."]
                pub fn transfer_native_from_agent(
                    &self,
                    recipient: types::transfer_native_from_agent::Recipient,
                    amount: types::transfer_native_from_agent::Amount,
                ) -> ::subxt::tx::Payload<types::TransferNativeFromAgent> {
                    ::subxt::tx::Payload::new_static(
                        "EthereumSystem",
                        "transfer_native_from_agent",
                        types::TransferNativeFromAgent { recipient, amount },
                        [
                            126u8, 4u8, 116u8, 86u8, 77u8, 37u8, 92u8, 214u8, 250u8, 199u8, 105u8,
                            221u8, 133u8, 105u8, 89u8, 176u8, 184u8, 161u8, 104u8, 250u8, 29u8,
                            147u8, 87u8, 207u8, 22u8, 60u8, 142u8, 249u8, 87u8, 23u8, 104u8, 222u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::force_transfer_native_from_agent`]."]
                pub fn force_transfer_native_from_agent(
                    &self,
                    location: types::force_transfer_native_from_agent::Location,
                    recipient: types::force_transfer_native_from_agent::Recipient,
                    amount: types::force_transfer_native_from_agent::Amount,
                ) -> ::subxt::tx::Payload<types::ForceTransferNativeFromAgent> {
                    ::subxt::tx::Payload::new_static(
                        "EthereumSystem",
                        "force_transfer_native_from_agent",
                        types::ForceTransferNativeFromAgent {
                            location: ::std::boxed::Box::new(location),
                            recipient,
                            amount,
                        },
                        [
                            94u8, 220u8, 52u8, 65u8, 17u8, 109u8, 146u8, 194u8, 5u8, 172u8, 200u8,
                            110u8, 202u8, 122u8, 164u8, 209u8, 14u8, 187u8, 11u8, 7u8, 153u8, 92u8,
                            48u8, 152u8, 247u8, 49u8, 149u8, 33u8, 250u8, 213u8, 14u8, 94u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::set_token_transfer_fees`]."]
                pub fn set_token_transfer_fees(
                    &self,
                    create_asset_xcm: types::set_token_transfer_fees::CreateAssetXcm,
                    transfer_asset_xcm: types::set_token_transfer_fees::TransferAssetXcm,
                    register_token: types::set_token_transfer_fees::RegisterToken,
                ) -> ::subxt::tx::Payload<types::SetTokenTransferFees> {
                    ::subxt::tx::Payload::new_static(
                        "EthereumSystem",
                        "set_token_transfer_fees",
                        types::SetTokenTransferFees {
                            create_asset_xcm,
                            transfer_asset_xcm,
                            register_token,
                        },
                        [
                            119u8, 246u8, 191u8, 56u8, 254u8, 190u8, 73u8, 167u8, 96u8, 29u8,
                            213u8, 65u8, 46u8, 240u8, 146u8, 37u8, 225u8, 90u8, 1u8, 19u8, 237u8,
                            183u8, 78u8, 6u8, 75u8, 202u8, 10u8, 118u8, 194u8, 119u8, 88u8, 227u8,
                        ],
                    )
                }
            }
        }
        #[doc = "The `Event` enum of this pallet"]
        pub type Event = runtime_types::snowbridge_pallet_system::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "An Upgrade message was sent to the Gateway"]
            pub struct Upgrade {
                pub impl_address: upgrade::ImplAddress,
                pub impl_code_hash: upgrade::ImplCodeHash,
                pub initializer_params_hash: upgrade::InitializerParamsHash,
            }
            pub mod upgrade {
                use super::runtime_types;
                pub type ImplAddress = ::subxt::utils::H160;
                pub type ImplCodeHash = ::subxt::utils::H256;
                pub type InitializerParamsHash = ::core::option::Option<::subxt::utils::H256>;
            }
            impl ::subxt::events::StaticEvent for Upgrade {
                const PALLET: &'static str = "EthereumSystem";
                const EVENT: &'static str = "Upgrade";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "An CreateAgent message was sent to the Gateway"]
            pub struct CreateAgent {
                pub location: ::std::boxed::Box<create_agent::Location>,
                pub agent_id: create_agent::AgentId,
            }
            pub mod create_agent {
                use super::runtime_types;
                pub type Location = runtime_types::staging_xcm::v4::location::Location;
                pub type AgentId = ::subxt::utils::H256;
            }
            impl ::subxt::events::StaticEvent for CreateAgent {
                const PALLET: &'static str = "EthereumSystem";
                const EVENT: &'static str = "CreateAgent";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "An CreateChannel message was sent to the Gateway"]
            pub struct CreateChannel {
                pub channel_id: create_channel::ChannelId,
                pub agent_id: create_channel::AgentId,
            }
            pub mod create_channel {
                use super::runtime_types;
                pub type ChannelId = runtime_types::snowbridge_core::ChannelId;
                pub type AgentId = ::subxt::utils::H256;
            }
            impl ::subxt::events::StaticEvent for CreateChannel {
                const PALLET: &'static str = "EthereumSystem";
                const EVENT: &'static str = "CreateChannel";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "An UpdateChannel message was sent to the Gateway"]
            pub struct UpdateChannel {
                pub channel_id: update_channel::ChannelId,
                pub mode: update_channel::Mode,
            }
            pub mod update_channel {
                use super::runtime_types;
                pub type ChannelId = runtime_types::snowbridge_core::ChannelId;
                pub type Mode = runtime_types::snowbridge_core::outbound::v1::OperatingMode;
            }
            impl ::subxt::events::StaticEvent for UpdateChannel {
                const PALLET: &'static str = "EthereumSystem";
                const EVENT: &'static str = "UpdateChannel";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "An SetOperatingMode message was sent to the Gateway"]
            pub struct SetOperatingMode {
                pub mode: set_operating_mode::Mode,
            }
            pub mod set_operating_mode {
                use super::runtime_types;
                pub type Mode = runtime_types::snowbridge_core::outbound::v1::OperatingMode;
            }
            impl ::subxt::events::StaticEvent for SetOperatingMode {
                const PALLET: &'static str = "EthereumSystem";
                const EVENT: &'static str = "SetOperatingMode";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "An TransferNativeFromAgent message was sent to the Gateway"]
            pub struct TransferNativeFromAgent {
                pub agent_id: transfer_native_from_agent::AgentId,
                pub recipient: transfer_native_from_agent::Recipient,
                pub amount: transfer_native_from_agent::Amount,
            }
            pub mod transfer_native_from_agent {
                use super::runtime_types;
                pub type AgentId = ::subxt::utils::H256;
                pub type Recipient = ::subxt::utils::H160;
                pub type Amount = ::core::primitive::u128;
            }
            impl ::subxt::events::StaticEvent for TransferNativeFromAgent {
                const PALLET: &'static str = "EthereumSystem";
                const EVENT: &'static str = "TransferNativeFromAgent";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A SetTokenTransferFees message was sent to the Gateway"]
            pub struct SetTokenTransferFees {
                pub create_asset_xcm: set_token_transfer_fees::CreateAssetXcm,
                pub transfer_asset_xcm: set_token_transfer_fees::TransferAssetXcm,
                pub register_token: set_token_transfer_fees::RegisterToken,
            }
            pub mod set_token_transfer_fees {
                use super::runtime_types;
                pub type CreateAssetXcm = ::core::primitive::u128;
                pub type TransferAssetXcm = ::core::primitive::u128;
                pub type RegisterToken = runtime_types::primitive_types::U256;
            }
            impl ::subxt::events::StaticEvent for SetTokenTransferFees {
                const PALLET: &'static str = "EthereumSystem";
                const EVENT: &'static str = "SetTokenTransferFees";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct PricingParametersChanged {
                pub params: pricing_parameters_changed::Params,
            }
            pub mod pricing_parameters_changed {
                use super::runtime_types;
                pub type Params = runtime_types::snowbridge_core::pricing::PricingParameters<
                    ::core::primitive::u128,
                >;
            }
            impl ::subxt::events::StaticEvent for PricingParametersChanged {
                const PALLET: &'static str = "EthereumSystem";
                const EVENT: &'static str = "PricingParametersChanged";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub mod types {
                use super::runtime_types;
                pub mod agents {
                    use super::runtime_types;
                    pub type Agents = ();
                    pub type Param0 = ::subxt::utils::H256;
                }
                pub mod channels {
                    use super::runtime_types;
                    pub type Channels = runtime_types::snowbridge_core::Channel;
                    pub type Param0 = runtime_types::snowbridge_core::ChannelId;
                }
                pub mod pricing_parameters {
                    use super::runtime_types;
                    pub type PricingParameters =
                        runtime_types::snowbridge_core::pricing::PricingParameters<
                            ::core::primitive::u128,
                        >;
                }
            }
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " The set of registered agents"]
                pub fn agents_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::agents::Agents,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "EthereumSystem",
                        "Agents",
                        vec![],
                        [
                            231u8, 181u8, 160u8, 2u8, 166u8, 97u8, 230u8, 125u8, 103u8, 195u8,
                            34u8, 20u8, 152u8, 20u8, 219u8, 247u8, 193u8, 205u8, 94u8, 1u8, 24u8,
                            86u8, 171u8, 173u8, 99u8, 180u8, 221u8, 158u8, 187u8, 183u8, 131u8,
                            239u8,
                        ],
                    )
                }
                #[doc = " The set of registered agents"]
                pub fn agents(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::agents::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::agents::Agents,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "EthereumSystem",
                        "Agents",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            231u8, 181u8, 160u8, 2u8, 166u8, 97u8, 230u8, 125u8, 103u8, 195u8,
                            34u8, 20u8, 152u8, 20u8, 219u8, 247u8, 193u8, 205u8, 94u8, 1u8, 24u8,
                            86u8, 171u8, 173u8, 99u8, 180u8, 221u8, 158u8, 187u8, 183u8, 131u8,
                            239u8,
                        ],
                    )
                }
                #[doc = " The set of registered channels"]
                pub fn channels_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::channels::Channels,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "EthereumSystem",
                        "Channels",
                        vec![],
                        [
                            214u8, 118u8, 5u8, 13u8, 113u8, 196u8, 53u8, 239u8, 77u8, 181u8, 149u8,
                            67u8, 163u8, 99u8, 185u8, 250u8, 177u8, 132u8, 215u8, 31u8, 96u8, 36u8,
                            7u8, 227u8, 77u8, 255u8, 2u8, 210u8, 157u8, 47u8, 200u8, 237u8,
                        ],
                    )
                }
                #[doc = " The set of registered channels"]
                pub fn channels(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::channels::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::channels::Channels,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "EthereumSystem",
                        "Channels",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            214u8, 118u8, 5u8, 13u8, 113u8, 196u8, 53u8, 239u8, 77u8, 181u8, 149u8,
                            67u8, 163u8, 99u8, 185u8, 250u8, 177u8, 132u8, 215u8, 31u8, 96u8, 36u8,
                            7u8, 227u8, 77u8, 255u8, 2u8, 210u8, 157u8, 47u8, 200u8, 237u8,
                        ],
                    )
                }
                pub fn pricing_parameters(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::pricing_parameters::PricingParameters,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "EthereumSystem",
                        "PricingParameters",
                        vec![],
                        [
                            237u8, 251u8, 195u8, 154u8, 44u8, 10u8, 250u8, 48u8, 242u8, 120u8,
                            19u8, 250u8, 187u8, 212u8, 106u8, 62u8, 137u8, 205u8, 76u8, 245u8,
                            28u8, 71u8, 195u8, 98u8, 138u8, 147u8, 38u8, 234u8, 170u8, 127u8, 77u8,
                            120u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                #[doc = " TreasuryAccount to collect fees"]
                pub fn treasury_account(
                    &self,
                ) -> ::subxt::constants::Address<::subxt::utils::AccountId32> {
                    ::subxt::constants::Address::new_static(
                        "EthereumSystem",
                        "TreasuryAccount",
                        [
                            115u8, 233u8, 13u8, 223u8, 88u8, 20u8, 202u8, 139u8, 153u8, 28u8,
                            155u8, 157u8, 224u8, 66u8, 3u8, 250u8, 23u8, 53u8, 88u8, 168u8, 211u8,
                            204u8, 122u8, 166u8, 248u8, 23u8, 174u8, 225u8, 99u8, 108u8, 89u8,
                            135u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod message_queue {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "The `Error` enum of this pallet."]
        pub type Error = runtime_types::pallet_message_queue::pallet::Error;
        #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
        pub type Call = runtime_types::pallet_message_queue::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "See [`Pallet::reap_page`]."]
                pub struct ReapPage {
                    pub message_origin: reap_page::MessageOrigin,
                    pub page_index: reap_page::PageIndex,
                }
                pub mod reap_page {
                    use super::runtime_types;
                    pub type MessageOrigin =
                        runtime_types::bridge_hub_common::message_queue::AggregateMessageOrigin;
                    pub type PageIndex = ::core::primitive::u32;
                }
                impl ::subxt::blocks::StaticExtrinsic for ReapPage {
                    const PALLET: &'static str = "MessageQueue";
                    const CALL: &'static str = "reap_page";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "See [`Pallet::execute_overweight`]."]
                pub struct ExecuteOverweight {
                    pub message_origin: execute_overweight::MessageOrigin,
                    pub page: execute_overweight::Page,
                    pub index: execute_overweight::Index,
                    pub weight_limit: execute_overweight::WeightLimit,
                }
                pub mod execute_overweight {
                    use super::runtime_types;
                    pub type MessageOrigin =
                        runtime_types::bridge_hub_common::message_queue::AggregateMessageOrigin;
                    pub type Page = ::core::primitive::u32;
                    pub type Index = ::core::primitive::u32;
                    pub type WeightLimit = runtime_types::sp_weights::weight_v2::Weight;
                }
                impl ::subxt::blocks::StaticExtrinsic for ExecuteOverweight {
                    const PALLET: &'static str = "MessageQueue";
                    const CALL: &'static str = "execute_overweight";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "See [`Pallet::reap_page`]."]
                pub fn reap_page(
                    &self,
                    message_origin: types::reap_page::MessageOrigin,
                    page_index: types::reap_page::PageIndex,
                ) -> ::subxt::tx::Payload<types::ReapPage> {
                    ::subxt::tx::Payload::new_static(
                        "MessageQueue",
                        "reap_page",
                        types::ReapPage {
                            message_origin,
                            page_index,
                        },
                        [
                            81u8, 252u8, 148u8, 219u8, 18u8, 100u8, 36u8, 69u8, 99u8, 63u8, 9u8,
                            176u8, 220u8, 236u8, 57u8, 154u8, 198u8, 16u8, 246u8, 11u8, 225u8,
                            248u8, 221u8, 132u8, 149u8, 219u8, 108u8, 127u8, 75u8, 24u8, 142u8,
                            109u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::execute_overweight`]."]
                pub fn execute_overweight(
                    &self,
                    message_origin: types::execute_overweight::MessageOrigin,
                    page: types::execute_overweight::Page,
                    index: types::execute_overweight::Index,
                    weight_limit: types::execute_overweight::WeightLimit,
                ) -> ::subxt::tx::Payload<types::ExecuteOverweight> {
                    ::subxt::tx::Payload::new_static(
                        "MessageQueue",
                        "execute_overweight",
                        types::ExecuteOverweight {
                            message_origin,
                            page,
                            index,
                            weight_limit,
                        },
                        [
                            0u8, 91u8, 131u8, 157u8, 153u8, 152u8, 38u8, 217u8, 59u8, 10u8, 25u8,
                            167u8, 172u8, 78u8, 192u8, 152u8, 185u8, 214u8, 46u8, 56u8, 158u8,
                            37u8, 158u8, 69u8, 243u8, 224u8, 127u8, 95u8, 122u8, 161u8, 236u8,
                            37u8,
                        ],
                    )
                }
            }
        }
        #[doc = "The `Event` enum of this pallet"]
        pub type Event = runtime_types::pallet_message_queue::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Message discarded due to an error in the `MessageProcessor` (usually a format error)."]
            pub struct ProcessingFailed {
                pub id: processing_failed::Id,
                pub origin: processing_failed::Origin,
                pub error: processing_failed::Error,
            }
            pub mod processing_failed {
                use super::runtime_types;
                pub type Id = ::subxt::utils::H256;
                pub type Origin =
                    runtime_types::bridge_hub_common::message_queue::AggregateMessageOrigin;
                pub type Error =
                    runtime_types::frame_support::traits::messages::ProcessMessageError;
            }
            impl ::subxt::events::StaticEvent for ProcessingFailed {
                const PALLET: &'static str = "MessageQueue";
                const EVENT: &'static str = "ProcessingFailed";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Message is processed."]
            pub struct Processed {
                pub id: processed::Id,
                pub origin: processed::Origin,
                pub weight_used: processed::WeightUsed,
                pub success: processed::Success,
            }
            pub mod processed {
                use super::runtime_types;
                pub type Id = ::subxt::utils::H256;
                pub type Origin =
                    runtime_types::bridge_hub_common::message_queue::AggregateMessageOrigin;
                pub type WeightUsed = runtime_types::sp_weights::weight_v2::Weight;
                pub type Success = ::core::primitive::bool;
            }
            impl ::subxt::events::StaticEvent for Processed {
                const PALLET: &'static str = "MessageQueue";
                const EVENT: &'static str = "Processed";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Message placed in overweight queue."]
            pub struct OverweightEnqueued {
                pub id: overweight_enqueued::Id,
                pub origin: overweight_enqueued::Origin,
                pub page_index: overweight_enqueued::PageIndex,
                pub message_index: overweight_enqueued::MessageIndex,
            }
            pub mod overweight_enqueued {
                use super::runtime_types;
                pub type Id = [::core::primitive::u8; 32usize];
                pub type Origin =
                    runtime_types::bridge_hub_common::message_queue::AggregateMessageOrigin;
                pub type PageIndex = ::core::primitive::u32;
                pub type MessageIndex = ::core::primitive::u32;
            }
            impl ::subxt::events::StaticEvent for OverweightEnqueued {
                const PALLET: &'static str = "MessageQueue";
                const EVENT: &'static str = "OverweightEnqueued";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "This page was reaped."]
            pub struct PageReaped {
                pub origin: page_reaped::Origin,
                pub index: page_reaped::Index,
            }
            pub mod page_reaped {
                use super::runtime_types;
                pub type Origin =
                    runtime_types::bridge_hub_common::message_queue::AggregateMessageOrigin;
                pub type Index = ::core::primitive::u32;
            }
            impl ::subxt::events::StaticEvent for PageReaped {
                const PALLET: &'static str = "MessageQueue";
                const EVENT: &'static str = "PageReaped";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub mod types {
                use super::runtime_types;
                pub mod book_state_for {
                    use super::runtime_types;
                    pub type BookStateFor = runtime_types::pallet_message_queue::BookState<
                        runtime_types::bridge_hub_common::message_queue::AggregateMessageOrigin,
                    >;
                    pub type Param0 =
                        runtime_types::bridge_hub_common::message_queue::AggregateMessageOrigin;
                }
                pub mod service_head {
                    use super::runtime_types;
                    pub type ServiceHead =
                        runtime_types::bridge_hub_common::message_queue::AggregateMessageOrigin;
                }
                pub mod pages {
                    use super::runtime_types;
                    pub type Pages =
                        runtime_types::pallet_message_queue::Page<::core::primitive::u32>;
                    pub type Param0 =
                        runtime_types::bridge_hub_common::message_queue::AggregateMessageOrigin;
                    pub type Param1 = ::core::primitive::u32;
                }
            }
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " The index of the first and last (non-empty) pages."]
                pub fn book_state_for_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::book_state_for::BookStateFor,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "MessageQueue",
                        "BookStateFor",
                        vec![],
                        [
                            181u8, 176u8, 174u8, 148u8, 180u8, 153u8, 8u8, 244u8, 254u8, 54u8,
                            202u8, 190u8, 88u8, 46u8, 164u8, 106u8, 152u8, 150u8, 48u8, 240u8,
                            235u8, 58u8, 66u8, 76u8, 35u8, 36u8, 228u8, 92u8, 200u8, 179u8, 221u8,
                            75u8,
                        ],
                    )
                }
                #[doc = " The index of the first and last (non-empty) pages."]
                pub fn book_state_for(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::book_state_for::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::book_state_for::BookStateFor,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "MessageQueue",
                        "BookStateFor",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            181u8, 176u8, 174u8, 148u8, 180u8, 153u8, 8u8, 244u8, 254u8, 54u8,
                            202u8, 190u8, 88u8, 46u8, 164u8, 106u8, 152u8, 150u8, 48u8, 240u8,
                            235u8, 58u8, 66u8, 76u8, 35u8, 36u8, 228u8, 92u8, 200u8, 179u8, 221u8,
                            75u8,
                        ],
                    )
                }
                #[doc = " The origin at which we should begin servicing."]
                pub fn service_head(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::service_head::ServiceHead,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "MessageQueue",
                        "ServiceHead",
                        vec![],
                        [
                            222u8, 186u8, 99u8, 200u8, 255u8, 152u8, 166u8, 56u8, 237u8, 185u8,
                            21u8, 233u8, 243u8, 17u8, 138u8, 16u8, 56u8, 67u8, 190u8, 239u8, 248u8,
                            131u8, 213u8, 153u8, 51u8, 212u8, 79u8, 196u8, 65u8, 62u8, 233u8, 13u8,
                        ],
                    )
                }
                #[doc = " The map of page indices to pages."]
                pub fn pages_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::pages::Pages,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "MessageQueue",
                        "Pages",
                        vec![],
                        [
                            223u8, 58u8, 253u8, 206u8, 249u8, 58u8, 196u8, 89u8, 17u8, 166u8,
                            254u8, 53u8, 198u8, 215u8, 173u8, 91u8, 172u8, 28u8, 30u8, 171u8, 31u8,
                            42u8, 112u8, 17u8, 9u8, 48u8, 104u8, 212u8, 32u8, 56u8, 232u8, 56u8,
                        ],
                    )
                }
                #[doc = " The map of page indices to pages."]
                pub fn pages_iter1(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::pages::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::pages::Pages,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "MessageQueue",
                        "Pages",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            223u8, 58u8, 253u8, 206u8, 249u8, 58u8, 196u8, 89u8, 17u8, 166u8,
                            254u8, 53u8, 198u8, 215u8, 173u8, 91u8, 172u8, 28u8, 30u8, 171u8, 31u8,
                            42u8, 112u8, 17u8, 9u8, 48u8, 104u8, 212u8, 32u8, 56u8, 232u8, 56u8,
                        ],
                    )
                }
                #[doc = " The map of page indices to pages."]
                pub fn pages(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::pages::Param0>,
                    _1: impl ::std::borrow::Borrow<types::pages::Param1>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::pages::Pages,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "MessageQueue",
                        "Pages",
                        vec![
                            ::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
                            ::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
                        ],
                        [
                            223u8, 58u8, 253u8, 206u8, 249u8, 58u8, 196u8, 89u8, 17u8, 166u8,
                            254u8, 53u8, 198u8, 215u8, 173u8, 91u8, 172u8, 28u8, 30u8, 171u8, 31u8,
                            42u8, 112u8, 17u8, 9u8, 48u8, 104u8, 212u8, 32u8, 56u8, 232u8, 56u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                #[doc = " The size of the page; this implies the maximum message size which can be sent."]
                #[doc = ""]
                #[doc = " A good value depends on the expected message sizes, their weights, the weight that is"]
                #[doc = " available for processing them and the maximal needed message size. The maximal message"]
                #[doc = " size is slightly lower than this as defined by [`MaxMessageLenOf`]."]
                pub fn heap_size(&self) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "MessageQueue",
                        "HeapSize",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " The maximum number of stale pages (i.e. of overweight messages) allowed before culling"]
                #[doc = " can happen. Once there are more stale pages than this, then historical pages may be"]
                #[doc = " dropped, even if they contain unprocessed overweight messages."]
                pub fn max_stale(&self) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "MessageQueue",
                        "MaxStale",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " The amount of weight (if any) which should be provided to the message queue for"]
                #[doc = " servicing enqueued items."]
                #[doc = ""]
                #[doc = " This may be legitimately `None` in the case that you will call"]
                #[doc = " `ServiceQueues::service_queues` manually."]
                pub fn service_weight(
                    &self,
                ) -> ::subxt::constants::Address<
                    ::core::option::Option<runtime_types::sp_weights::weight_v2::Weight>,
                > {
                    ::subxt::constants::Address::new_static(
                        "MessageQueue",
                        "ServiceWeight",
                        [
                            204u8, 140u8, 63u8, 167u8, 49u8, 8u8, 148u8, 163u8, 190u8, 224u8, 15u8,
                            103u8, 86u8, 153u8, 248u8, 117u8, 223u8, 117u8, 210u8, 80u8, 205u8,
                            155u8, 40u8, 11u8, 59u8, 63u8, 129u8, 156u8, 17u8, 83u8, 177u8, 250u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod runtime_types {
        use super::runtime_types;
        pub mod bounded_collections {
            use super::runtime_types;
            pub mod bounded_btree_set {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct BoundedBTreeSet<_0>(pub ::std::vec::Vec<_0>);
            }
            pub mod bounded_vec {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct BoundedVec<_0>(pub ::std::vec::Vec<_0>);
            }
            pub mod weak_bounded_vec {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct WeakBoundedVec<_0>(pub ::std::vec::Vec<_0>);
            }
        }
        pub mod bp_header_chain {
            use super::runtime_types;
            pub mod justification {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct GrandpaJustification<_0> {
                    pub round: ::core::primitive::u64,
                    pub commit: runtime_types::finality_grandpa::Commit<
                        ::subxt::utils::H256,
                        ::core::primitive::u32,
                        runtime_types::sp_consensus_grandpa::app::Signature,
                        runtime_types::sp_consensus_grandpa::app::Public,
                    >,
                    pub votes_ancestries: ::std::vec::Vec<_0>,
                }
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct AuthoritySet {
                pub authorities: ::std::vec::Vec<(
                    runtime_types::sp_consensus_grandpa::app::Public,
                    ::core::primitive::u64,
                )>,
                pub set_id: ::core::primitive::u64,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub enum HeaderChainError {
                #[codec(index = 0)]
                UnknownHeader,
                #[codec(index = 1)]
                StorageProof(runtime_types::bp_runtime::storage_proof::Error),
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct HeaderFinalityInfo<_0, _1> {
                pub finality_proof: _0,
                pub new_verification_context: ::core::option::Option<_1>,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct InitializationData<_0> {
                pub header: ::std::boxed::Box<
                    runtime_types::sp_runtime::generic::header::Header<::core::primitive::u32>,
                >,
                pub authority_list: ::std::vec::Vec<(
                    runtime_types::sp_consensus_grandpa::app::Public,
                    ::core::primitive::u64,
                )>,
                pub set_id: ::core::primitive::u64,
                pub operating_mode: runtime_types::bp_runtime::BasicOperatingMode,
                #[codec(skip)]
                pub __ignore: ::core::marker::PhantomData<_0>,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct StoredHeaderData<_0, _1> {
                pub number: _0,
                pub state_root: _1,
            }
        }
        pub mod bp_messages {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct DeliveredMessages {
                pub begin: ::core::primitive::u64,
                pub end: ::core::primitive::u64,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct InboundLaneData<_0> {
                pub relayers: ::std::vec::Vec<runtime_types::bp_messages::UnrewardedRelayer<_0>>,
                pub last_confirmed_nonce: ::core::primitive::u64,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct InboundMessageDetails {
                pub dispatch_weight: runtime_types::sp_weights::weight_v2::Weight,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct LaneId(pub [::core::primitive::u8; 4usize]);
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct MessageKey {
                pub lane_id: runtime_types::bp_messages::LaneId,
                pub nonce: ::core::primitive::u64,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub enum MessagesOperatingMode {
                #[codec(index = 0)]
                Basic(runtime_types::bp_runtime::BasicOperatingMode),
                #[codec(index = 1)]
                RejectingOutboundMessages,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct OutboundLaneData {
                pub oldest_unpruned_nonce: ::core::primitive::u64,
                pub latest_received_nonce: ::core::primitive::u64,
                pub latest_generated_nonce: ::core::primitive::u64,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct OutboundMessageDetails {
                pub nonce: ::core::primitive::u64,
                pub dispatch_weight: runtime_types::sp_weights::weight_v2::Weight,
                pub size: ::core::primitive::u32,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub enum ReceivalResult<_0> {
                #[codec(index = 0)]
                Dispatched(runtime_types::bp_runtime::messages::MessageDispatchResult<_0>),
                #[codec(index = 1)]
                InvalidNonce,
                #[codec(index = 2)]
                TooManyUnrewardedRelayers,
                #[codec(index = 3)]
                TooManyUnconfirmedMessages,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct ReceivedMessages<_0> {
                pub lane: runtime_types::bp_messages::LaneId,
                pub receive_results: ::std::vec::Vec<(
                    ::core::primitive::u64,
                    runtime_types::bp_messages::ReceivalResult<_0>,
                )>,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct UnrewardedRelayer<_0> {
                pub relayer: _0,
                pub messages: runtime_types::bp_messages::DeliveredMessages,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct UnrewardedRelayersState {
                pub unrewarded_relayer_entries: ::core::primitive::u64,
                pub messages_in_oldest_entry: ::core::primitive::u64,
                pub total_messages: ::core::primitive::u64,
                pub last_delivered_nonce: ::core::primitive::u64,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub enum VerificationError {
                #[codec(index = 0)]
                EmptyMessageProof,
                #[codec(index = 1)]
                HeaderChain(runtime_types::bp_header_chain::HeaderChainError),
                #[codec(index = 2)]
                InboundLaneStorage(runtime_types::bp_runtime::storage_proof::Error),
                #[codec(index = 3)]
                InvalidMessageWeight,
                #[codec(index = 4)]
                MessagesCountMismatch,
                #[codec(index = 5)]
                MessageStorage(runtime_types::bp_runtime::storage_proof::Error),
                #[codec(index = 6)]
                MessageTooLarge,
                #[codec(index = 7)]
                OutboundLaneStorage(runtime_types::bp_runtime::storage_proof::Error),
                #[codec(index = 8)]
                StorageProof(runtime_types::bp_runtime::storage_proof::Error),
                #[codec(index = 9)]
                Other,
            }
        }
        pub mod bp_parachains {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct BestParaHeadHash {
                pub at_relay_block_number: ::core::primitive::u32,
                pub head_hash: ::subxt::utils::H256,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct ParaInfo {
                pub best_head_hash: runtime_types::bp_parachains::BestParaHeadHash,
                pub next_imported_hash_position: ::core::primitive::u32,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct ParaStoredHeaderData(pub ::std::vec::Vec<::core::primitive::u8>);
        }
        pub mod bp_polkadot_core {
            use super::runtime_types;
            pub mod parachains {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ParaHeadsProof {
                    pub storage_proof: ::std::vec::Vec<::std::vec::Vec<::core::primitive::u8>>,
                }
                #[derive(
                    :: subxt :: ext :: codec :: CompactAs,
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ParaId(pub ::core::primitive::u32);
            }
        }
        pub mod bp_relayers {
            use super::runtime_types;
            pub mod registration {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Registration<_0, _1> {
                    pub valid_till: _0,
                    pub stake: _1,
                }
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub enum RewardsAccountOwner {
                #[codec(index = 0)]
                ThisChain,
                #[codec(index = 1)]
                BridgedChain,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct RewardsAccountParams {
                pub lane_id: runtime_types::bp_messages::LaneId,
                pub bridged_chain_id: [::core::primitive::u8; 4usize],
                pub owner: runtime_types::bp_relayers::RewardsAccountOwner,
            }
        }
        pub mod bp_runtime {
            use super::runtime_types;
            pub mod messages {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct MessageDispatchResult<_0> {
                    pub unspent_weight: runtime_types::sp_weights::weight_v2::Weight,
                    pub dispatch_level_result: _0,
                }
            }
            pub mod storage_proof {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum Error {
                    #[codec(index = 0)]
                    DuplicateNodesInProof,
                    #[codec(index = 1)]
                    UnusedNodesInTheProof,
                    #[codec(index = 2)]
                    StorageRootMismatch,
                    #[codec(index = 3)]
                    StorageValueUnavailable,
                    #[codec(index = 4)]
                    StorageValueEmpty,
                    #[codec(index = 5)]
                    StorageValueDecodeFailed(runtime_types::bp_runtime::StrippableError),
                }
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub enum BasicOperatingMode {
                #[codec(index = 0)]
                Normal,
                #[codec(index = 1)]
                Halted,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct HeaderId<_0, _1>(pub _1, pub _0);
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub enum OwnedBridgeModuleError {
                #[codec(index = 0)]
                Halted,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct StrippableError;
        }
        pub mod bridge_hub_common {
            use super::runtime_types;
            pub mod message_queue {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum AggregateMessageOrigin {
                    #[codec(index = 0)]
                    Here,
                    #[codec(index = 1)]
                    Parent,
                    #[codec(index = 2)]
                    Sibling(runtime_types::polkadot_parachain_primitives::primitives::Id),
                    #[codec(index = 3)]
                    Snowbridge(runtime_types::snowbridge_core::ChannelId),
                }
            }
        }
        pub mod bridge_hub_rococo_runtime {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct BridgeRejectObsoleteHeadersAndMessages;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub enum OriginCaller {
                #[codec(index = 0)]
                system(
                    runtime_types::frame_support::dispatch::RawOrigin<::subxt::utils::AccountId32>,
                ),
                #[codec(index = 31)]
                PolkadotXcm(runtime_types::pallet_xcm::pallet::Origin),
                #[codec(index = 32)]
                CumulusXcm(runtime_types::cumulus_pallet_xcm::pallet::Origin),
                #[codec(index = 3)]
                Void(runtime_types::sp_core::Void),
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Runtime;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub enum RuntimeCall {
                #[codec(index = 0)]
                System(runtime_types::frame_system::pallet::Call),
                #[codec(index = 1)]
                ParachainSystem(runtime_types::cumulus_pallet_parachain_system::pallet::Call),
                #[codec(index = 2)]
                Timestamp(runtime_types::pallet_timestamp::pallet::Call),
                #[codec(index = 3)]
                ParachainInfo(runtime_types::staging_parachain_info::pallet::Call),
                #[codec(index = 10)]
                Balances(runtime_types::pallet_balances::pallet::Call),
                #[codec(index = 21)]
                CollatorSelection(runtime_types::pallet_collator_selection::pallet::Call),
                #[codec(index = 22)]
                Session(runtime_types::pallet_session::pallet::Call),
                #[codec(index = 30)]
                XcmpQueue(runtime_types::cumulus_pallet_xcmp_queue::pallet::Call),
                #[codec(index = 31)]
                PolkadotXcm(runtime_types::pallet_xcm::pallet::Call),
                #[codec(index = 32)]
                CumulusXcm(runtime_types::cumulus_pallet_xcm::pallet::Call),
                #[codec(index = 40)]
                Utility(runtime_types::pallet_utility::pallet::Call),
                #[codec(index = 36)]
                Multisig(runtime_types::pallet_multisig::pallet::Call),
                #[codec(index = 47)]
                BridgeRelayers(runtime_types::pallet_bridge_relayers::pallet::Call),
                #[codec(index = 48)]
                BridgeWestendGrandpa(runtime_types::pallet_bridge_grandpa::pallet::Call),
                #[codec(index = 49)]
                BridgeWestendParachains(runtime_types::pallet_bridge_parachains::pallet::Call),
                #[codec(index = 51)]
                BridgeWestendMessages(runtime_types::pallet_bridge_messages::pallet::Call),
                #[codec(index = 60)]
                BridgePolkadotBulletinGrandpa(runtime_types::pallet_bridge_grandpa::pallet::Call2),
                #[codec(index = 61)]
                BridgePolkadotBulletinMessages(
                    runtime_types::pallet_bridge_messages::pallet::Call2,
                ),
                #[codec(index = 80)]
                EthereumInboundQueue(runtime_types::snowbridge_pallet_inbound_queue::pallet::Call),
                #[codec(index = 81)]
                EthereumOutboundQueue(
                    runtime_types::snowbridge_pallet_outbound_queue::pallet::Call,
                ),
                #[codec(index = 82)]
                EthereumBeaconClient(
                    runtime_types::snowbridge_pallet_ethereum_client::pallet::Call,
                ),
                #[codec(index = 83)]
                EthereumSystem(runtime_types::snowbridge_pallet_system::pallet::Call),
                #[codec(index = 250)]
                MessageQueue(runtime_types::pallet_message_queue::pallet::Call),
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub enum RuntimeError {
                #[codec(index = 0)]
                System(runtime_types::frame_system::pallet::Error),
                #[codec(index = 1)]
                ParachainSystem(runtime_types::cumulus_pallet_parachain_system::pallet::Error),
                #[codec(index = 10)]
                Balances(runtime_types::pallet_balances::pallet::Error),
                #[codec(index = 21)]
                CollatorSelection(runtime_types::pallet_collator_selection::pallet::Error),
                #[codec(index = 22)]
                Session(runtime_types::pallet_session::pallet::Error),
                #[codec(index = 30)]
                XcmpQueue(runtime_types::cumulus_pallet_xcmp_queue::pallet::Error),
                #[codec(index = 31)]
                PolkadotXcm(runtime_types::pallet_xcm::pallet::Error),
                #[codec(index = 40)]
                Utility(runtime_types::pallet_utility::pallet::Error),
                #[codec(index = 36)]
                Multisig(runtime_types::pallet_multisig::pallet::Error),
                #[codec(index = 47)]
                BridgeRelayers(runtime_types::pallet_bridge_relayers::pallet::Error),
                #[codec(index = 48)]
                BridgeWestendGrandpa(runtime_types::pallet_bridge_grandpa::pallet::Error),
                #[codec(index = 49)]
                BridgeWestendParachains(runtime_types::pallet_bridge_parachains::pallet::Error),
                #[codec(index = 51)]
                BridgeWestendMessages(runtime_types::pallet_bridge_messages::pallet::Error),
                #[codec(index = 60)]
                BridgePolkadotBulletinGrandpa(runtime_types::pallet_bridge_grandpa::pallet::Error2),
                #[codec(index = 61)]
                BridgePolkadotBulletinMessages(
                    runtime_types::pallet_bridge_messages::pallet::Error2,
                ),
                #[codec(index = 80)]
                EthereumInboundQueue(runtime_types::snowbridge_pallet_inbound_queue::pallet::Error),
                #[codec(index = 81)]
                EthereumOutboundQueue(
                    runtime_types::snowbridge_pallet_outbound_queue::pallet::Error,
                ),
                #[codec(index = 82)]
                EthereumBeaconClient(
                    runtime_types::snowbridge_pallet_ethereum_client::pallet::Error,
                ),
                #[codec(index = 83)]
                EthereumSystem(runtime_types::snowbridge_pallet_system::pallet::Error),
                #[codec(index = 250)]
                MessageQueue(runtime_types::pallet_message_queue::pallet::Error),
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub enum RuntimeEvent {
                #[codec(index = 0)]
                System(runtime_types::frame_system::pallet::Event),
                #[codec(index = 1)]
                ParachainSystem(runtime_types::cumulus_pallet_parachain_system::pallet::Event),
                #[codec(index = 10)]
                Balances(runtime_types::pallet_balances::pallet::Event),
                #[codec(index = 11)]
                TransactionPayment(runtime_types::pallet_transaction_payment::pallet::Event),
                #[codec(index = 21)]
                CollatorSelection(runtime_types::pallet_collator_selection::pallet::Event),
                #[codec(index = 22)]
                Session(runtime_types::pallet_session::pallet::Event),
                #[codec(index = 30)]
                XcmpQueue(runtime_types::cumulus_pallet_xcmp_queue::pallet::Event),
                #[codec(index = 31)]
                PolkadotXcm(runtime_types::pallet_xcm::pallet::Event),
                #[codec(index = 32)]
                CumulusXcm(runtime_types::cumulus_pallet_xcm::pallet::Event),
                #[codec(index = 40)]
                Utility(runtime_types::pallet_utility::pallet::Event),
                #[codec(index = 36)]
                Multisig(runtime_types::pallet_multisig::pallet::Event),
                #[codec(index = 47)]
                BridgeRelayers(runtime_types::pallet_bridge_relayers::pallet::Event),
                #[codec(index = 48)]
                BridgeWestendGrandpa(runtime_types::pallet_bridge_grandpa::pallet::Event),
                #[codec(index = 49)]
                BridgeWestendParachains(runtime_types::pallet_bridge_parachains::pallet::Event),
                #[codec(index = 51)]
                BridgeWestendMessages(runtime_types::pallet_bridge_messages::pallet::Event),
                #[codec(index = 60)]
                BridgePolkadotBulletinGrandpa(runtime_types::pallet_bridge_grandpa::pallet::Event2),
                #[codec(index = 61)]
                BridgePolkadotBulletinMessages(
                    runtime_types::pallet_bridge_messages::pallet::Event2,
                ),
                #[codec(index = 80)]
                EthereumInboundQueue(runtime_types::snowbridge_pallet_inbound_queue::pallet::Event),
                #[codec(index = 81)]
                EthereumOutboundQueue(
                    runtime_types::snowbridge_pallet_outbound_queue::pallet::Event,
                ),
                #[codec(index = 82)]
                EthereumBeaconClient(
                    runtime_types::snowbridge_pallet_ethereum_client::pallet::Event,
                ),
                #[codec(index = 83)]
                EthereumSystem(runtime_types::snowbridge_pallet_system::pallet::Event),
                #[codec(index = 250)]
                MessageQueue(runtime_types::pallet_message_queue::pallet::Event),
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub enum RuntimeHoldReason {}
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct SessionKeys {
                pub aura: runtime_types::sp_consensus_aura::sr25519::app_sr25519::Public,
            }
        }
        pub mod bridge_runtime_common {
            use super::runtime_types;
            pub mod messages {
                use super::runtime_types;
                pub mod source {
                    use super::runtime_types;
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        :: subxt :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: codec)]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub struct FromBridgedChainMessagesDeliveryProof<_0> {
                        pub bridged_header_hash: _0,
                        pub storage_proof: ::std::vec::Vec<::std::vec::Vec<::core::primitive::u8>>,
                        pub lane: runtime_types::bp_messages::LaneId,
                    }
                }
                pub mod target {
                    use super::runtime_types;
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        :: subxt :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: codec)]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub struct FromBridgedChainMessagesProof<_0> {
                        pub bridged_header_hash: _0,
                        pub storage_proof: ::std::vec::Vec<::std::vec::Vec<::core::primitive::u8>>,
                        pub lane: runtime_types::bp_messages::LaneId,
                        pub nonces_start: ::core::primitive::u64,
                        pub nonces_end: ::core::primitive::u64,
                    }
                }
            }
            pub mod messages_xcm_extension {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum XcmBlobMessageDispatchResult {
                    #[codec(index = 0)]
                    InvalidPayload,
                    #[codec(index = 1)]
                    Dispatched,
                    #[codec(index = 2)]
                    NotDispatched,
                }
            }
            pub mod refund_relayer_extension {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct RefundBridgedGrandpaMessages;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct RefundBridgedParachainMessages;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct RefundSignedExtensionAdapter<_0>(pub _0);
            }
        }
        pub mod cumulus_pallet_parachain_system {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
                pub enum Call {
                    # [codec (index = 0)] # [doc = "See [`Pallet::set_validation_data`]."] set_validation_data { data : runtime_types :: cumulus_primitives_parachain_inherent :: ParachainInherentData , } , # [codec (index = 1)] # [doc = "See [`Pallet::sudo_send_upward_message`]."] sudo_send_upward_message { message : :: std :: vec :: Vec < :: core :: primitive :: u8 > , } , # [codec (index = 2)] # [doc = "See [`Pallet::authorize_upgrade`]."] authorize_upgrade { code_hash : :: subxt :: utils :: H256 , check_version : :: core :: primitive :: bool , } , # [codec (index = 3)] # [doc = "See [`Pallet::enact_authorized_upgrade`]."] enact_authorized_upgrade { code : :: std :: vec :: Vec < :: core :: primitive :: u8 > , } , }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "The `Error` enum of this pallet."]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "Attempt to upgrade validation function while existing upgrade pending."]
                    OverlappingUpgrades,
                    #[codec(index = 1)]
                    #[doc = "Polkadot currently prohibits this parachain from upgrading its validation function."]
                    ProhibitedByPolkadot,
                    #[codec(index = 2)]
                    #[doc = "The supplied validation function has compiled into a blob larger than Polkadot is"]
                    #[doc = "willing to run."]
                    TooBig,
                    #[codec(index = 3)]
                    #[doc = "The inherent which supplies the validation data did not run this block."]
                    ValidationDataNotAvailable,
                    #[codec(index = 4)]
                    #[doc = "The inherent which supplies the host configuration did not run this block."]
                    HostConfigurationNotAvailable,
                    #[codec(index = 5)]
                    #[doc = "No validation function upgrade is currently scheduled."]
                    NotScheduled,
                    #[codec(index = 6)]
                    #[doc = "No code upgrade has been authorized."]
                    NothingAuthorized,
                    #[codec(index = 7)]
                    #[doc = "The given code upgrade has not been authorized."]
                    Unauthorized,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "The `Event` enum of this pallet"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "The validation function has been scheduled to apply."]
                    ValidationFunctionStored,
                    #[codec(index = 1)]
                    #[doc = "The validation function was applied as of the contained relay chain block number."]
                    ValidationFunctionApplied {
                        relay_chain_block_num: ::core::primitive::u32,
                    },
                    #[codec(index = 2)]
                    #[doc = "The relay-chain aborted the upgrade process."]
                    ValidationFunctionDiscarded,
                    #[codec(index = 3)]
                    #[doc = "Some downward messages have been received and will be processed."]
                    DownwardMessagesReceived { count: ::core::primitive::u32 },
                    #[codec(index = 4)]
                    #[doc = "Downward messages were processed using the given weight."]
                    DownwardMessagesProcessed {
                        weight_used: runtime_types::sp_weights::weight_v2::Weight,
                        dmq_head: ::subxt::utils::H256,
                    },
                    #[codec(index = 5)]
                    #[doc = "An upward message was sent to the relay chain."]
                    UpwardMessageSent {
                        message_hash: ::core::option::Option<[::core::primitive::u8; 32usize]>,
                    },
                }
            }
            pub mod relay_state_snapshot {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct MessagingStateSnapshot { pub dmq_mqc_head : :: subxt :: utils :: H256 , pub relay_dispatch_queue_remaining_capacity : runtime_types :: cumulus_pallet_parachain_system :: relay_state_snapshot :: RelayDispatchQueueRemainingCapacity , pub ingress_channels : :: std :: vec :: Vec < (runtime_types :: polkadot_parachain_primitives :: primitives :: Id , runtime_types :: polkadot_primitives :: v6 :: AbridgedHrmpChannel ,) > , pub egress_channels : :: std :: vec :: Vec < (runtime_types :: polkadot_parachain_primitives :: primitives :: Id , runtime_types :: polkadot_primitives :: v6 :: AbridgedHrmpChannel ,) > , }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct RelayDispatchQueueRemainingCapacity {
                    pub remaining_count: ::core::primitive::u32,
                    pub remaining_size: ::core::primitive::u32,
                }
            }
            pub mod unincluded_segment {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Ancestor < _0 > { pub used_bandwidth : runtime_types :: cumulus_pallet_parachain_system :: unincluded_segment :: UsedBandwidth , pub para_head_hash : :: core :: option :: Option < _0 > , pub consumed_go_ahead_signal : :: core :: option :: Option < runtime_types :: polkadot_primitives :: v6 :: UpgradeGoAhead > , }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct HrmpChannelUpdate {
                    pub msg_count: ::core::primitive::u32,
                    pub total_bytes: ::core::primitive::u32,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SegmentTracker < _0 > { pub used_bandwidth : runtime_types :: cumulus_pallet_parachain_system :: unincluded_segment :: UsedBandwidth , pub hrmp_watermark : :: core :: option :: Option < :: core :: primitive :: u32 > , pub consumed_go_ahead_signal : :: core :: option :: Option < runtime_types :: polkadot_primitives :: v6 :: UpgradeGoAhead > , # [codec (skip)] pub __ignore : :: core :: marker :: PhantomData < _0 > }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct UsedBandwidth { pub ump_msg_count : :: core :: primitive :: u32 , pub ump_total_bytes : :: core :: primitive :: u32 , pub hrmp_outgoing : :: subxt :: utils :: KeyedVec < runtime_types :: polkadot_parachain_primitives :: primitives :: Id , runtime_types :: cumulus_pallet_parachain_system :: unincluded_segment :: HrmpChannelUpdate > , }
            }
        }
        pub mod cumulus_pallet_xcm {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
                pub enum Call {}
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "The `Event` enum of this pallet"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "Downward message is invalid XCM."]
                    #[doc = "\\[ id \\]"]
                    InvalidFormat([::core::primitive::u8; 32usize]),
                    #[codec(index = 1)]
                    #[doc = "Downward message is unsupported version of XCM."]
                    #[doc = "\\[ id \\]"]
                    UnsupportedVersion([::core::primitive::u8; 32usize]),
                    #[codec(index = 2)]
                    #[doc = "Downward message executed with the given outcome."]
                    #[doc = "\\[ id, outcome \\]"]
                    ExecutedDownward(
                        [::core::primitive::u8; 32usize],
                        runtime_types::staging_xcm::v4::traits::Outcome,
                    ),
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum Origin {
                    #[codec(index = 0)]
                    Relay,
                    #[codec(index = 1)]
                    SiblingParachain(runtime_types::polkadot_parachain_primitives::primitives::Id),
                }
            }
        }
        pub mod cumulus_pallet_xcmp_queue {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
                pub enum Call {
                    #[codec(index = 1)]
                    #[doc = "See [`Pallet::suspend_xcm_execution`]."]
                    suspend_xcm_execution,
                    #[codec(index = 2)]
                    #[doc = "See [`Pallet::resume_xcm_execution`]."]
                    resume_xcm_execution,
                    #[codec(index = 3)]
                    #[doc = "See [`Pallet::update_suspend_threshold`]."]
                    update_suspend_threshold { new: ::core::primitive::u32 },
                    #[codec(index = 4)]
                    #[doc = "See [`Pallet::update_drop_threshold`]."]
                    update_drop_threshold { new: ::core::primitive::u32 },
                    #[codec(index = 5)]
                    #[doc = "See [`Pallet::update_resume_threshold`]."]
                    update_resume_threshold { new: ::core::primitive::u32 },
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "The `Error` enum of this pallet."]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "Setting the queue config failed since one of its values was invalid."]
                    BadQueueConfig,
                    #[codec(index = 1)]
                    #[doc = "The execution is already suspended."]
                    AlreadySuspended,
                    #[codec(index = 2)]
                    #[doc = "The execution is already resumed."]
                    AlreadyResumed,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "The `Event` enum of this pallet"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "An HRMP message was sent to a sibling parachain."]
                    XcmpMessageSent {
                        message_hash: [::core::primitive::u8; 32usize],
                    },
                }
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct OutboundChannelDetails {
                pub recipient: runtime_types::polkadot_parachain_primitives::primitives::Id,
                pub state: runtime_types::cumulus_pallet_xcmp_queue::OutboundState,
                pub signals_exist: ::core::primitive::bool,
                pub first_index: ::core::primitive::u16,
                pub last_index: ::core::primitive::u16,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub enum OutboundState {
                #[codec(index = 0)]
                Ok,
                #[codec(index = 1)]
                Suspended,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct QueueConfigData {
                pub suspend_threshold: ::core::primitive::u32,
                pub drop_threshold: ::core::primitive::u32,
                pub resume_threshold: ::core::primitive::u32,
            }
        }
        pub mod cumulus_primitives_core {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct CollationInfo {
                pub upward_messages: ::std::vec::Vec<::std::vec::Vec<::core::primitive::u8>>,
                pub horizontal_messages: ::std::vec::Vec<
                    runtime_types::polkadot_core_primitives::OutboundHrmpMessage<
                        runtime_types::polkadot_parachain_primitives::primitives::Id,
                    >,
                >,
                pub new_validation_code: ::core::option::Option<
                    runtime_types::polkadot_parachain_primitives::primitives::ValidationCode,
                >,
                pub processed_downward_messages: ::core::primitive::u32,
                pub hrmp_watermark: ::core::primitive::u32,
                pub head_data: runtime_types::polkadot_parachain_primitives::primitives::HeadData,
            }
        }
        pub mod cumulus_primitives_parachain_inherent {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct MessageQueueChain(pub ::subxt::utils::H256);
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct ParachainInherentData {
                pub validation_data:
                    runtime_types::polkadot_primitives::v6::PersistedValidationData<
                        ::subxt::utils::H256,
                        ::core::primitive::u32,
                    >,
                pub relay_chain_state: runtime_types::sp_trie::storage_proof::StorageProof,
                pub downward_messages: ::std::vec::Vec<
                    runtime_types::polkadot_core_primitives::InboundDownwardMessage<
                        ::core::primitive::u32,
                    >,
                >,
                pub horizontal_messages: ::subxt::utils::KeyedVec<
                    runtime_types::polkadot_parachain_primitives::primitives::Id,
                    ::std::vec::Vec<
                        runtime_types::polkadot_core_primitives::InboundHrmpMessage<
                            ::core::primitive::u32,
                        >,
                    >,
                >,
            }
        }
        pub mod finality_grandpa {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Commit<_0, _1, _2, _3> {
                pub target_hash: _0,
                pub target_number: _1,
                pub precommits: ::std::vec::Vec<
                    runtime_types::finality_grandpa::SignedPrecommit<_0, _1, _2, _3>,
                >,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Precommit<_0, _1> {
                pub target_hash: _0,
                pub target_number: _1,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct SignedPrecommit<_0, _1, _2, _3> {
                pub precommit: runtime_types::finality_grandpa::Precommit<_0, _1>,
                pub signature: _2,
                pub id: _3,
            }
        }
        pub mod frame_support {
            use super::runtime_types;
            pub mod dispatch {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum DispatchClass {
                    #[codec(index = 0)]
                    Normal,
                    #[codec(index = 1)]
                    Operational,
                    #[codec(index = 2)]
                    Mandatory,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct DispatchInfo {
                    pub weight: runtime_types::sp_weights::weight_v2::Weight,
                    pub class: runtime_types::frame_support::dispatch::DispatchClass,
                    pub pays_fee: runtime_types::frame_support::dispatch::Pays,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum Pays {
                    #[codec(index = 0)]
                    Yes,
                    #[codec(index = 1)]
                    No,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct PerDispatchClass<_0> {
                    pub normal: _0,
                    pub operational: _0,
                    pub mandatory: _0,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum RawOrigin<_0> {
                    #[codec(index = 0)]
                    Root,
                    #[codec(index = 1)]
                    Signed(_0),
                    #[codec(index = 2)]
                    None,
                }
            }
            pub mod traits {
                use super::runtime_types;
                pub mod messages {
                    use super::runtime_types;
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        :: subxt :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: codec)]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub enum ProcessMessageError {
                        #[codec(index = 0)]
                        BadFormat,
                        #[codec(index = 1)]
                        Corrupt,
                        #[codec(index = 2)]
                        Unsupported,
                        #[codec(index = 3)]
                        Overweight(runtime_types::sp_weights::weight_v2::Weight),
                        #[codec(index = 4)]
                        Yield,
                    }
                }
                pub mod tokens {
                    use super::runtime_types;
                    pub mod misc {
                        use super::runtime_types;
                        #[derive(
                            :: subxt :: ext :: codec :: Decode,
                            :: subxt :: ext :: codec :: Encode,
                            :: subxt :: ext :: scale_decode :: DecodeAsType,
                            :: subxt :: ext :: scale_encode :: EncodeAsType,
                            Debug,
                        )]
                        # [codec (crate = :: subxt :: ext :: codec)]
                        #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                        #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                        pub enum BalanceStatus {
                            #[codec(index = 0)]
                            Free,
                            #[codec(index = 1)]
                            Reserved,
                        }
                    }
                }
            }
        }
        pub mod frame_system {
            use super::runtime_types;
            pub mod extensions {
                use super::runtime_types;
                pub mod check_genesis {
                    use super::runtime_types;
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        :: subxt :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: codec)]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub struct CheckGenesis;
                }
                pub mod check_mortality {
                    use super::runtime_types;
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        :: subxt :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: codec)]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub struct CheckMortality(pub runtime_types::sp_runtime::generic::era::Era);
                }
                pub mod check_non_zero_sender {
                    use super::runtime_types;
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        :: subxt :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: codec)]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub struct CheckNonZeroSender;
                }
                pub mod check_nonce {
                    use super::runtime_types;
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        :: subxt :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: codec)]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub struct CheckNonce(#[codec(compact)] pub ::core::primitive::u32);
                }
                pub mod check_spec_version {
                    use super::runtime_types;
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        :: subxt :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: codec)]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub struct CheckSpecVersion;
                }
                pub mod check_tx_version {
                    use super::runtime_types;
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        :: subxt :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: codec)]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub struct CheckTxVersion;
                }
                pub mod check_weight {
                    use super::runtime_types;
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        :: subxt :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: codec)]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub struct CheckWeight;
                }
            }
            pub mod limits {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct BlockLength {
                    pub max: runtime_types::frame_support::dispatch::PerDispatchClass<
                        ::core::primitive::u32,
                    >,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct BlockWeights {
                    pub base_block: runtime_types::sp_weights::weight_v2::Weight,
                    pub max_block: runtime_types::sp_weights::weight_v2::Weight,
                    pub per_class: runtime_types::frame_support::dispatch::PerDispatchClass<
                        runtime_types::frame_system::limits::WeightsPerClass,
                    >,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct WeightsPerClass {
                    pub base_extrinsic: runtime_types::sp_weights::weight_v2::Weight,
                    pub max_extrinsic:
                        ::core::option::Option<runtime_types::sp_weights::weight_v2::Weight>,
                    pub max_total:
                        ::core::option::Option<runtime_types::sp_weights::weight_v2::Weight>,
                    pub reserved:
                        ::core::option::Option<runtime_types::sp_weights::weight_v2::Weight>,
                }
            }
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "See [`Pallet::remark`]."]
                    remark {
                        remark: ::std::vec::Vec<::core::primitive::u8>,
                    },
                    #[codec(index = 1)]
                    #[doc = "See [`Pallet::set_heap_pages`]."]
                    set_heap_pages { pages: ::core::primitive::u64 },
                    #[codec(index = 2)]
                    #[doc = "See [`Pallet::set_code`]."]
                    set_code {
                        code: ::std::vec::Vec<::core::primitive::u8>,
                    },
                    #[codec(index = 3)]
                    #[doc = "See [`Pallet::set_code_without_checks`]."]
                    set_code_without_checks {
                        code: ::std::vec::Vec<::core::primitive::u8>,
                    },
                    #[codec(index = 4)]
                    #[doc = "See [`Pallet::set_storage`]."]
                    set_storage {
                        items: ::std::vec::Vec<(
                            ::std::vec::Vec<::core::primitive::u8>,
                            ::std::vec::Vec<::core::primitive::u8>,
                        )>,
                    },
                    #[codec(index = 5)]
                    #[doc = "See [`Pallet::kill_storage`]."]
                    kill_storage {
                        keys: ::std::vec::Vec<::std::vec::Vec<::core::primitive::u8>>,
                    },
                    #[codec(index = 6)]
                    #[doc = "See [`Pallet::kill_prefix`]."]
                    kill_prefix {
                        prefix: ::std::vec::Vec<::core::primitive::u8>,
                        subkeys: ::core::primitive::u32,
                    },
                    #[codec(index = 7)]
                    #[doc = "See [`Pallet::remark_with_event`]."]
                    remark_with_event {
                        remark: ::std::vec::Vec<::core::primitive::u8>,
                    },
                    #[codec(index = 9)]
                    #[doc = "See [`Pallet::authorize_upgrade`]."]
                    authorize_upgrade { code_hash: ::subxt::utils::H256 },
                    #[codec(index = 10)]
                    #[doc = "See [`Pallet::authorize_upgrade_without_checks`]."]
                    authorize_upgrade_without_checks { code_hash: ::subxt::utils::H256 },
                    #[codec(index = 11)]
                    #[doc = "See [`Pallet::apply_authorized_upgrade`]."]
                    apply_authorized_upgrade {
                        code: ::std::vec::Vec<::core::primitive::u8>,
                    },
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Error for the System pallet"]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "The name of specification does not match between the current runtime"]
                    #[doc = "and the new runtime."]
                    InvalidSpecName,
                    #[codec(index = 1)]
                    #[doc = "The specification version is not allowed to decrease between the current runtime"]
                    #[doc = "and the new runtime."]
                    SpecVersionNeedsToIncrease,
                    #[codec(index = 2)]
                    #[doc = "Failed to extract the runtime version from the new runtime."]
                    #[doc = ""]
                    #[doc = "Either calling `Core_version` or decoding `RuntimeVersion` failed."]
                    FailedToExtractRuntimeVersion,
                    #[codec(index = 3)]
                    #[doc = "Suicide called when the account has non-default composite data."]
                    NonDefaultComposite,
                    #[codec(index = 4)]
                    #[doc = "There is a non-zero reference count preventing the account from being purged."]
                    NonZeroRefCount,
                    #[codec(index = 5)]
                    #[doc = "The origin filter prevent the call to be dispatched."]
                    CallFiltered,
                    #[codec(index = 6)]
                    #[doc = "No upgrade authorized."]
                    NothingAuthorized,
                    #[codec(index = 7)]
                    #[doc = "The submitted code is not authorized."]
                    Unauthorized,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Event for the System pallet."]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "An extrinsic completed successfully."]
                    ExtrinsicSuccess {
                        dispatch_info: runtime_types::frame_support::dispatch::DispatchInfo,
                    },
                    #[codec(index = 1)]
                    #[doc = "An extrinsic failed."]
                    ExtrinsicFailed {
                        dispatch_error: runtime_types::sp_runtime::DispatchError,
                        dispatch_info: runtime_types::frame_support::dispatch::DispatchInfo,
                    },
                    #[codec(index = 2)]
                    #[doc = "`:code` was updated."]
                    CodeUpdated,
                    #[codec(index = 3)]
                    #[doc = "A new account was created."]
                    NewAccount {
                        account: ::subxt::utils::AccountId32,
                    },
                    #[codec(index = 4)]
                    #[doc = "An account was reaped."]
                    KilledAccount {
                        account: ::subxt::utils::AccountId32,
                    },
                    #[codec(index = 5)]
                    #[doc = "On on-chain remark happened."]
                    Remarked {
                        sender: ::subxt::utils::AccountId32,
                        hash: ::subxt::utils::H256,
                    },
                    #[codec(index = 6)]
                    #[doc = "An upgrade was authorized."]
                    UpgradeAuthorized {
                        code_hash: ::subxt::utils::H256,
                        check_version: ::core::primitive::bool,
                    },
                }
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct AccountInfo<_0, _1> {
                pub nonce: _0,
                pub consumers: ::core::primitive::u32,
                pub providers: ::core::primitive::u32,
                pub sufficients: ::core::primitive::u32,
                pub data: _1,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct CodeUpgradeAuthorization {
                pub code_hash: ::subxt::utils::H256,
                pub check_version: ::core::primitive::bool,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct EventRecord<_0, _1> {
                pub phase: runtime_types::frame_system::Phase,
                pub event: _0,
                pub topics: ::std::vec::Vec<_1>,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct LastRuntimeUpgradeInfo {
                #[codec(compact)]
                pub spec_version: ::core::primitive::u32,
                pub spec_name: ::std::string::String,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub enum Phase {
                #[codec(index = 0)]
                ApplyExtrinsic(::core::primitive::u32),
                #[codec(index = 1)]
                Finalization,
                #[codec(index = 2)]
                Initialization,
            }
        }
        pub mod pallet_balances {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "See [`Pallet::transfer_allow_death`]."]
                    transfer_allow_death {
                        dest: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                        #[codec(compact)]
                        value: ::core::primitive::u128,
                    },
                    #[codec(index = 2)]
                    #[doc = "See [`Pallet::force_transfer`]."]
                    force_transfer {
                        source: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                        dest: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                        #[codec(compact)]
                        value: ::core::primitive::u128,
                    },
                    #[codec(index = 3)]
                    #[doc = "See [`Pallet::transfer_keep_alive`]."]
                    transfer_keep_alive {
                        dest: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                        #[codec(compact)]
                        value: ::core::primitive::u128,
                    },
                    #[codec(index = 4)]
                    #[doc = "See [`Pallet::transfer_all`]."]
                    transfer_all {
                        dest: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                        keep_alive: ::core::primitive::bool,
                    },
                    #[codec(index = 5)]
                    #[doc = "See [`Pallet::force_unreserve`]."]
                    force_unreserve {
                        who: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 6)]
                    #[doc = "See [`Pallet::upgrade_accounts`]."]
                    upgrade_accounts {
                        who: ::std::vec::Vec<::subxt::utils::AccountId32>,
                    },
                    #[codec(index = 8)]
                    #[doc = "See [`Pallet::force_set_balance`]."]
                    force_set_balance {
                        who: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                        #[codec(compact)]
                        new_free: ::core::primitive::u128,
                    },
                    #[codec(index = 9)]
                    #[doc = "See [`Pallet::force_adjust_total_issuance`]."]
                    force_adjust_total_issuance {
                        direction: runtime_types::pallet_balances::types::AdjustmentDirection,
                        #[codec(compact)]
                        delta: ::core::primitive::u128,
                    },
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "The `Error` enum of this pallet."]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "Vesting balance too high to send value."]
                    VestingBalance,
                    #[codec(index = 1)]
                    #[doc = "Account liquidity restrictions prevent withdrawal."]
                    LiquidityRestrictions,
                    #[codec(index = 2)]
                    #[doc = "Balance too low to send value."]
                    InsufficientBalance,
                    #[codec(index = 3)]
                    #[doc = "Value too low to create account due to existential deposit."]
                    ExistentialDeposit,
                    #[codec(index = 4)]
                    #[doc = "Transfer/payment would kill account."]
                    Expendability,
                    #[codec(index = 5)]
                    #[doc = "A vesting schedule already exists for this account."]
                    ExistingVestingSchedule,
                    #[codec(index = 6)]
                    #[doc = "Beneficiary account must pre-exist."]
                    DeadAccount,
                    #[codec(index = 7)]
                    #[doc = "Number of named reserves exceed `MaxReserves`."]
                    TooManyReserves,
                    #[codec(index = 8)]
                    #[doc = "Number of holds exceed `VariantCountOf<T::RuntimeHoldReason>`."]
                    TooManyHolds,
                    #[codec(index = 9)]
                    #[doc = "Number of freezes exceed `MaxFreezes`."]
                    TooManyFreezes,
                    #[codec(index = 10)]
                    #[doc = "The issuance cannot be modified since it is already deactivated."]
                    IssuanceDeactivated,
                    #[codec(index = 11)]
                    #[doc = "The delta cannot be zero."]
                    DeltaZero,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "The `Event` enum of this pallet"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "An account was created with some free balance."]
                    Endowed {
                        account: ::subxt::utils::AccountId32,
                        free_balance: ::core::primitive::u128,
                    },
                    #[codec(index = 1)]
                    #[doc = "An account was removed whose balance was non-zero but below ExistentialDeposit,"]
                    #[doc = "resulting in an outright loss."]
                    DustLost {
                        account: ::subxt::utils::AccountId32,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 2)]
                    #[doc = "Transfer succeeded."]
                    Transfer {
                        from: ::subxt::utils::AccountId32,
                        to: ::subxt::utils::AccountId32,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 3)]
                    #[doc = "A balance was set by root."]
                    BalanceSet {
                        who: ::subxt::utils::AccountId32,
                        free: ::core::primitive::u128,
                    },
                    #[codec(index = 4)]
                    #[doc = "Some balance was reserved (moved from free to reserved)."]
                    Reserved {
                        who: ::subxt::utils::AccountId32,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 5)]
                    #[doc = "Some balance was unreserved (moved from reserved to free)."]
                    Unreserved {
                        who: ::subxt::utils::AccountId32,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 6)]
                    #[doc = "Some balance was moved from the reserve of the first account to the second account."]
                    #[doc = "Final argument indicates the destination balance type."]
                    ReserveRepatriated {
                        from: ::subxt::utils::AccountId32,
                        to: ::subxt::utils::AccountId32,
                        amount: ::core::primitive::u128,
                        destination_status:
                            runtime_types::frame_support::traits::tokens::misc::BalanceStatus,
                    },
                    #[codec(index = 7)]
                    #[doc = "Some amount was deposited (e.g. for transaction fees)."]
                    Deposit {
                        who: ::subxt::utils::AccountId32,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 8)]
                    #[doc = "Some amount was withdrawn from the account (e.g. for transaction fees)."]
                    Withdraw {
                        who: ::subxt::utils::AccountId32,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 9)]
                    #[doc = "Some amount was removed from the account (e.g. for misbehavior)."]
                    Slashed {
                        who: ::subxt::utils::AccountId32,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 10)]
                    #[doc = "Some amount was minted into an account."]
                    Minted {
                        who: ::subxt::utils::AccountId32,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 11)]
                    #[doc = "Some amount was burned from an account."]
                    Burned {
                        who: ::subxt::utils::AccountId32,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 12)]
                    #[doc = "Some amount was suspended from an account (it can be restored later)."]
                    Suspended {
                        who: ::subxt::utils::AccountId32,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 13)]
                    #[doc = "Some amount was restored into an account."]
                    Restored {
                        who: ::subxt::utils::AccountId32,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 14)]
                    #[doc = "An account was upgraded."]
                    Upgraded { who: ::subxt::utils::AccountId32 },
                    #[codec(index = 15)]
                    #[doc = "Total issuance was increased by `amount`, creating a credit to be balanced."]
                    Issued { amount: ::core::primitive::u128 },
                    #[codec(index = 16)]
                    #[doc = "Total issuance was decreased by `amount`, creating a debt to be balanced."]
                    Rescinded { amount: ::core::primitive::u128 },
                    #[codec(index = 17)]
                    #[doc = "Some balance was locked."]
                    Locked {
                        who: ::subxt::utils::AccountId32,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 18)]
                    #[doc = "Some balance was unlocked."]
                    Unlocked {
                        who: ::subxt::utils::AccountId32,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 19)]
                    #[doc = "Some balance was frozen."]
                    Frozen {
                        who: ::subxt::utils::AccountId32,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 20)]
                    #[doc = "Some balance was thawed."]
                    Thawed {
                        who: ::subxt::utils::AccountId32,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 21)]
                    #[doc = "The `TotalIssuance` was forcefully changed."]
                    TotalIssuanceForced {
                        old: ::core::primitive::u128,
                        new: ::core::primitive::u128,
                    },
                }
            }
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct AccountData<_0> {
                    pub free: _0,
                    pub reserved: _0,
                    pub frozen: _0,
                    pub flags: runtime_types::pallet_balances::types::ExtraFlags,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum AdjustmentDirection {
                    #[codec(index = 0)]
                    Increase,
                    #[codec(index = 1)]
                    Decrease,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct BalanceLock<_0> {
                    pub id: [::core::primitive::u8; 8usize],
                    pub amount: _0,
                    pub reasons: runtime_types::pallet_balances::types::Reasons,
                }
                #[derive(
                    :: subxt :: ext :: codec :: CompactAs,
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ExtraFlags(pub ::core::primitive::u128);
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct IdAmount<_0, _1> {
                    pub id: _0,
                    pub amount: _1,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum Reasons {
                    #[codec(index = 0)]
                    Fee,
                    #[codec(index = 1)]
                    Misc,
                    #[codec(index = 2)]
                    All,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ReserveData<_0, _1> {
                    pub id: _0,
                    pub amount: _1,
                }
            }
        }
        pub mod pallet_bridge_grandpa {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "See [`Pallet::submit_finality_proof`]."]
                    submit_finality_proof {
                        finality_target: ::std::boxed::Box<
                            runtime_types::sp_runtime::generic::header::Header<
                                ::core::primitive::u32,
                            >,
                        >,
                        justification:
                            runtime_types::bp_header_chain::justification::GrandpaJustification<
                                runtime_types::sp_runtime::generic::header::Header<
                                    ::core::primitive::u32,
                                >,
                            >,
                    },
                    #[codec(index = 1)]
                    #[doc = "See [`Pallet::initialize`]."]
                    initialize {
                        init_data: runtime_types::bp_header_chain::InitializationData<
                            runtime_types::sp_runtime::generic::header::Header<
                                ::core::primitive::u32,
                            >,
                        >,
                    },
                    #[codec(index = 2)]
                    #[doc = "See [`Pallet::set_owner`]."]
                    set_owner {
                        new_owner: ::core::option::Option<::subxt::utils::AccountId32>,
                    },
                    #[codec(index = 3)]
                    #[doc = "See [`Pallet::set_operating_mode`]."]
                    set_operating_mode {
                        operating_mode: runtime_types::bp_runtime::BasicOperatingMode,
                    },
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
                pub enum Call2 {
                    #[codec(index = 0)]
                    #[doc = "See [`Pallet::submit_finality_proof`]."]
                    submit_finality_proof {
                        finality_target: ::std::boxed::Box<
                            runtime_types::sp_runtime::generic::header::Header<
                                ::core::primitive::u32,
                            >,
                        >,
                        justification:
                            runtime_types::bp_header_chain::justification::GrandpaJustification<
                                runtime_types::sp_runtime::generic::header::Header<
                                    ::core::primitive::u32,
                                >,
                            >,
                    },
                    #[codec(index = 1)]
                    #[doc = "See [`Pallet::initialize`]."]
                    initialize {
                        init_data: runtime_types::bp_header_chain::InitializationData<
                            runtime_types::sp_runtime::generic::header::Header<
                                ::core::primitive::u32,
                            >,
                        >,
                    },
                    #[codec(index = 2)]
                    #[doc = "See [`Pallet::set_owner`]."]
                    set_owner {
                        new_owner: ::core::option::Option<::subxt::utils::AccountId32>,
                    },
                    #[codec(index = 3)]
                    #[doc = "See [`Pallet::set_operating_mode`]."]
                    set_operating_mode {
                        operating_mode: runtime_types::bp_runtime::BasicOperatingMode,
                    },
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "The `Error` enum of this pallet."]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "The given justification is invalid for the given header."]
                    InvalidJustification,
                    #[codec(index = 1)]
                    #[doc = "The authority set from the underlying header chain is invalid."]
                    InvalidAuthoritySet,
                    #[codec(index = 2)]
                    #[doc = "The header being imported is older than the best finalized header known to the pallet."]
                    OldHeader,
                    #[codec(index = 3)]
                    #[doc = "The scheduled authority set change found in the header is unsupported by the pallet."]
                    #[doc = ""]
                    #[doc = "This is the case for non-standard (e.g forced) authority set changes."]
                    UnsupportedScheduledChange,
                    #[codec(index = 4)]
                    #[doc = "The pallet is not yet initialized."]
                    NotInitialized,
                    #[codec(index = 5)]
                    #[doc = "The pallet has already been initialized."]
                    AlreadyInitialized,
                    #[codec(index = 6)]
                    #[doc = "Too many authorities in the set."]
                    TooManyAuthoritiesInSet,
                    #[codec(index = 7)]
                    #[doc = "Error generated by the `OwnedBridgeModule` trait."]
                    BridgeModule(runtime_types::bp_runtime::OwnedBridgeModuleError),
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "The `Error` enum of this pallet."]
                pub enum Error2 {
                    #[codec(index = 0)]
                    #[doc = "The given justification is invalid for the given header."]
                    InvalidJustification,
                    #[codec(index = 1)]
                    #[doc = "The authority set from the underlying header chain is invalid."]
                    InvalidAuthoritySet,
                    #[codec(index = 2)]
                    #[doc = "The header being imported is older than the best finalized header known to the pallet."]
                    OldHeader,
                    #[codec(index = 3)]
                    #[doc = "The scheduled authority set change found in the header is unsupported by the pallet."]
                    #[doc = ""]
                    #[doc = "This is the case for non-standard (e.g forced) authority set changes."]
                    UnsupportedScheduledChange,
                    #[codec(index = 4)]
                    #[doc = "The pallet is not yet initialized."]
                    NotInitialized,
                    #[codec(index = 5)]
                    #[doc = "The pallet has already been initialized."]
                    AlreadyInitialized,
                    #[codec(index = 6)]
                    #[doc = "Too many authorities in the set."]
                    TooManyAuthoritiesInSet,
                    #[codec(index = 7)]
                    #[doc = "Error generated by the `OwnedBridgeModule` trait."]
                    BridgeModule(runtime_types::bp_runtime::OwnedBridgeModuleError),
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "The `Event` enum of this pallet"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "Best finalized chain header has been updated to the header with given number and hash."]
                    UpdatedBestFinalizedHeader {
                        number: ::core::primitive::u32,
                        hash: ::subxt::utils::H256,
                        grandpa_info: runtime_types::bp_header_chain::HeaderFinalityInfo<
                            runtime_types::bp_header_chain::justification::GrandpaJustification<
                                runtime_types::sp_runtime::generic::header::Header<
                                    ::core::primitive::u32,
                                >,
                            >,
                            runtime_types::bp_header_chain::AuthoritySet,
                        >,
                    },
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "The `Event` enum of this pallet"]
                pub enum Event2 {
                    #[codec(index = 0)]
                    #[doc = "Best finalized chain header has been updated to the header with given number and hash."]
                    UpdatedBestFinalizedHeader {
                        number: ::core::primitive::u32,
                        hash: ::subxt::utils::H256,
                        grandpa_info: runtime_types::bp_header_chain::HeaderFinalityInfo<
                            runtime_types::bp_header_chain::justification::GrandpaJustification<
                                runtime_types::sp_runtime::generic::header::Header<
                                    ::core::primitive::u32,
                                >,
                            >,
                            runtime_types::bp_header_chain::AuthoritySet,
                        >,
                    },
                }
            }
            pub mod storage_types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct StoredAuthoritySet {
                    pub authorities: runtime_types::bounded_collections::bounded_vec::BoundedVec<(
                        runtime_types::sp_consensus_grandpa::app::Public,
                        ::core::primitive::u64,
                    )>,
                    pub set_id: ::core::primitive::u64,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct StoredAuthoritySet2 {
                    pub authorities: runtime_types::bounded_collections::bounded_vec::BoundedVec<(
                        runtime_types::sp_consensus_grandpa::app::Public,
                        ::core::primitive::u64,
                    )>,
                    pub set_id: ::core::primitive::u64,
                }
            }
        }
        pub mod pallet_bridge_messages {
            use super::runtime_types;
            pub mod outbound_lane {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum ReceivalConfirmationError {
                    #[codec(index = 0)]
                    FailedToConfirmFutureMessages,
                    #[codec(index = 1)]
                    EmptyUnrewardedRelayerEntry,
                    #[codec(index = 2)]
                    NonConsecutiveUnrewardedRelayerEntries,
                    #[codec(index = 3)]
                    TryingToConfirmMoreMessagesThanExpected,
                }
            }
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
                pub enum Call {
                    # [codec (index = 0)] # [doc = "See [`Pallet::set_owner`]."] set_owner { new_owner : :: core :: option :: Option < :: subxt :: utils :: AccountId32 > , } , # [codec (index = 1)] # [doc = "See [`Pallet::set_operating_mode`]."] set_operating_mode { operating_mode : runtime_types :: bp_messages :: MessagesOperatingMode , } , # [codec (index = 2)] # [doc = "See [`Pallet::receive_messages_proof`]."] receive_messages_proof { relayer_id_at_bridged_chain : :: subxt :: utils :: AccountId32 , proof : runtime_types :: bridge_runtime_common :: messages :: target :: FromBridgedChainMessagesProof < :: subxt :: utils :: H256 > , messages_count : :: core :: primitive :: u32 , dispatch_weight : runtime_types :: sp_weights :: weight_v2 :: Weight , } , # [codec (index = 3)] # [doc = "See [`Pallet::receive_messages_delivery_proof`]."] receive_messages_delivery_proof { proof : runtime_types :: bridge_runtime_common :: messages :: source :: FromBridgedChainMessagesDeliveryProof < :: subxt :: utils :: H256 > , relayers_state : runtime_types :: bp_messages :: UnrewardedRelayersState , } , }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
                pub enum Call2 {
                    # [codec (index = 0)] # [doc = "See [`Pallet::set_owner`]."] set_owner { new_owner : :: core :: option :: Option < :: subxt :: utils :: AccountId32 > , } , # [codec (index = 1)] # [doc = "See [`Pallet::set_operating_mode`]."] set_operating_mode { operating_mode : runtime_types :: bp_messages :: MessagesOperatingMode , } , # [codec (index = 2)] # [doc = "See [`Pallet::receive_messages_proof`]."] receive_messages_proof { relayer_id_at_bridged_chain : :: subxt :: utils :: AccountId32 , proof : runtime_types :: bridge_runtime_common :: messages :: target :: FromBridgedChainMessagesProof < :: subxt :: utils :: H256 > , messages_count : :: core :: primitive :: u32 , dispatch_weight : runtime_types :: sp_weights :: weight_v2 :: Weight , } , # [codec (index = 3)] # [doc = "See [`Pallet::receive_messages_delivery_proof`]."] receive_messages_delivery_proof { proof : runtime_types :: bridge_runtime_common :: messages :: source :: FromBridgedChainMessagesDeliveryProof < :: subxt :: utils :: H256 > , relayers_state : runtime_types :: bp_messages :: UnrewardedRelayersState , } , }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "The `Error` enum of this pallet."]
                pub enum Error {
                    # [codec (index = 0)] # [doc = "Pallet is not in Normal operating mode."] NotOperatingNormally , # [codec (index = 1)] # [doc = "The outbound lane is inactive."] InactiveOutboundLane , # [codec (index = 2)] # [doc = "The inbound message dispatcher is inactive."] MessageDispatchInactive , # [codec (index = 3)] # [doc = "Message has been treated as invalid by chain verifier."] MessageRejectedByChainVerifier (runtime_types :: bp_messages :: VerificationError ,) , # [codec (index = 4)] # [doc = "Message has been treated as invalid by the pallet logic."] MessageRejectedByPallet (runtime_types :: bp_messages :: VerificationError ,) , # [codec (index = 5)] # [doc = "Submitter has failed to pay fee for delivering and dispatching messages."] FailedToWithdrawMessageFee , # [codec (index = 6)] # [doc = "The transaction brings too many messages."] TooManyMessagesInTheProof , # [codec (index = 7)] # [doc = "Invalid messages has been submitted."] InvalidMessagesProof , # [codec (index = 8)] # [doc = "Invalid messages delivery proof has been submitted."] InvalidMessagesDeliveryProof , # [codec (index = 9)] # [doc = "The relayer has declared invalid unrewarded relayers state in the"] # [doc = "`receive_messages_delivery_proof` call."] InvalidUnrewardedRelayersState , # [codec (index = 10)] # [doc = "The cumulative dispatch weight, passed by relayer is not enough to cover dispatch"] # [doc = "of all bundled messages."] InsufficientDispatchWeight , # [codec (index = 11)] # [doc = "The message someone is trying to work with (i.e. increase fee) is not yet sent."] MessageIsNotYetSent , # [codec (index = 12)] # [doc = "Error confirming messages receival."] ReceivalConfirmation (runtime_types :: pallet_bridge_messages :: outbound_lane :: ReceivalConfirmationError ,) , # [codec (index = 13)] # [doc = "Error generated by the `OwnedBridgeModule` trait."] BridgeModule (runtime_types :: bp_runtime :: OwnedBridgeModuleError ,) , }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "The `Error` enum of this pallet."]
                pub enum Error2 {
                    # [codec (index = 0)] # [doc = "Pallet is not in Normal operating mode."] NotOperatingNormally , # [codec (index = 1)] # [doc = "The outbound lane is inactive."] InactiveOutboundLane , # [codec (index = 2)] # [doc = "The inbound message dispatcher is inactive."] MessageDispatchInactive , # [codec (index = 3)] # [doc = "Message has been treated as invalid by chain verifier."] MessageRejectedByChainVerifier (runtime_types :: bp_messages :: VerificationError ,) , # [codec (index = 4)] # [doc = "Message has been treated as invalid by the pallet logic."] MessageRejectedByPallet (runtime_types :: bp_messages :: VerificationError ,) , # [codec (index = 5)] # [doc = "Submitter has failed to pay fee for delivering and dispatching messages."] FailedToWithdrawMessageFee , # [codec (index = 6)] # [doc = "The transaction brings too many messages."] TooManyMessagesInTheProof , # [codec (index = 7)] # [doc = "Invalid messages has been submitted."] InvalidMessagesProof , # [codec (index = 8)] # [doc = "Invalid messages delivery proof has been submitted."] InvalidMessagesDeliveryProof , # [codec (index = 9)] # [doc = "The relayer has declared invalid unrewarded relayers state in the"] # [doc = "`receive_messages_delivery_proof` call."] InvalidUnrewardedRelayersState , # [codec (index = 10)] # [doc = "The cumulative dispatch weight, passed by relayer is not enough to cover dispatch"] # [doc = "of all bundled messages."] InsufficientDispatchWeight , # [codec (index = 11)] # [doc = "The message someone is trying to work with (i.e. increase fee) is not yet sent."] MessageIsNotYetSent , # [codec (index = 12)] # [doc = "Error confirming messages receival."] ReceivalConfirmation (runtime_types :: pallet_bridge_messages :: outbound_lane :: ReceivalConfirmationError ,) , # [codec (index = 13)] # [doc = "Error generated by the `OwnedBridgeModule` trait."] BridgeModule (runtime_types :: bp_runtime :: OwnedBridgeModuleError ,) , }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "The `Event` enum of this pallet"]
                pub enum Event {
                    # [codec (index = 0)] # [doc = "Message has been accepted and is waiting to be delivered."] MessageAccepted { lane_id : runtime_types :: bp_messages :: LaneId , nonce : :: core :: primitive :: u64 , } , # [codec (index = 1)] # [doc = "Messages have been received from the bridged chain."] MessagesReceived (:: std :: vec :: Vec < runtime_types :: bp_messages :: ReceivedMessages < runtime_types :: bridge_runtime_common :: messages_xcm_extension :: XcmBlobMessageDispatchResult > > ,) , # [codec (index = 2)] # [doc = "Messages in the inclusive range have been delivered to the bridged chain."] MessagesDelivered { lane_id : runtime_types :: bp_messages :: LaneId , messages : runtime_types :: bp_messages :: DeliveredMessages , } , }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "The `Event` enum of this pallet"]
                pub enum Event2 {
                    # [codec (index = 0)] # [doc = "Message has been accepted and is waiting to be delivered."] MessageAccepted { lane_id : runtime_types :: bp_messages :: LaneId , nonce : :: core :: primitive :: u64 , } , # [codec (index = 1)] # [doc = "Messages have been received from the bridged chain."] MessagesReceived (:: std :: vec :: Vec < runtime_types :: bp_messages :: ReceivedMessages < runtime_types :: bridge_runtime_common :: messages_xcm_extension :: XcmBlobMessageDispatchResult > > ,) , # [codec (index = 2)] # [doc = "Messages in the inclusive range have been delivered to the bridged chain."] MessagesDelivered { lane_id : runtime_types :: bp_messages :: LaneId , messages : runtime_types :: bp_messages :: DeliveredMessages , } , }
            }
        }
        pub mod pallet_bridge_parachains {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "See [`Pallet::submit_parachain_heads`]."]
                    submit_parachain_heads {
                        at_relay_block: (::core::primitive::u32, ::subxt::utils::H256),
                        parachains: ::std::vec::Vec<(
                            runtime_types::bp_polkadot_core::parachains::ParaId,
                            ::subxt::utils::H256,
                        )>,
                        parachain_heads_proof:
                            runtime_types::bp_polkadot_core::parachains::ParaHeadsProof,
                    },
                    #[codec(index = 1)]
                    #[doc = "See [`Pallet::set_owner`]."]
                    set_owner {
                        new_owner: ::core::option::Option<::subxt::utils::AccountId32>,
                    },
                    #[codec(index = 2)]
                    #[doc = "See [`Pallet::set_operating_mode`]."]
                    set_operating_mode {
                        operating_mode: runtime_types::bp_runtime::BasicOperatingMode,
                    },
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "The `Error` enum of this pallet."]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "Relay chain block hash is unknown to us."]
                    UnknownRelayChainBlock,
                    #[codec(index = 1)]
                    #[doc = "The number of stored relay block is different from what the relayer has provided."]
                    InvalidRelayChainBlockNumber,
                    #[codec(index = 2)]
                    #[doc = "Parachain heads storage proof is invalid."]
                    HeaderChainStorageProof(runtime_types::bp_header_chain::HeaderChainError),
                    #[codec(index = 3)]
                    #[doc = "Error generated by the `OwnedBridgeModule` trait."]
                    BridgeModule(runtime_types::bp_runtime::OwnedBridgeModuleError),
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "The `Event` enum of this pallet"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "The caller has provided head of parachain that the pallet is not configured to track."]
                    UntrackedParachainRejected {
                        parachain: runtime_types::bp_polkadot_core::parachains::ParaId,
                    },
                    #[codec(index = 1)]
                    #[doc = "The caller has declared that he has provided given parachain head, but it is missing"]
                    #[doc = "from the storage proof."]
                    MissingParachainHead {
                        parachain: runtime_types::bp_polkadot_core::parachains::ParaId,
                    },
                    #[codec(index = 2)]
                    #[doc = "The caller has provided parachain head hash that is not matching the hash read from the"]
                    #[doc = "storage proof."]
                    IncorrectParachainHeadHash {
                        parachain: runtime_types::bp_polkadot_core::parachains::ParaId,
                        parachain_head_hash: ::subxt::utils::H256,
                        actual_parachain_head_hash: ::subxt::utils::H256,
                    },
                    #[codec(index = 3)]
                    #[doc = "The caller has provided obsolete parachain head, which is already known to the pallet."]
                    RejectedObsoleteParachainHead {
                        parachain: runtime_types::bp_polkadot_core::parachains::ParaId,
                        parachain_head_hash: ::subxt::utils::H256,
                    },
                    #[codec(index = 4)]
                    #[doc = "The caller has provided parachain head that exceeds the maximal configured head size."]
                    RejectedLargeParachainHead {
                        parachain: runtime_types::bp_polkadot_core::parachains::ParaId,
                        parachain_head_hash: ::subxt::utils::H256,
                        parachain_head_size: ::core::primitive::u32,
                    },
                    #[codec(index = 5)]
                    #[doc = "Parachain head has been updated."]
                    UpdatedParachainHead {
                        parachain: runtime_types::bp_polkadot_core::parachains::ParaId,
                        parachain_head_hash: ::subxt::utils::H256,
                    },
                }
            }
        }
        pub mod pallet_bridge_relayers {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "See [`Pallet::claim_rewards`]."]
                    claim_rewards {
                        rewards_account_params: runtime_types::bp_relayers::RewardsAccountParams,
                    },
                    #[codec(index = 1)]
                    #[doc = "See [`Pallet::register`]."]
                    register { valid_till: ::core::primitive::u32 },
                    #[codec(index = 2)]
                    #[doc = "See [`Pallet::deregister`]."]
                    deregister,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "The `Error` enum of this pallet."]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "No reward can be claimed by given relayer."]
                    NoRewardForRelayer,
                    #[codec(index = 1)]
                    #[doc = "Reward payment procedure has failed."]
                    FailedToPayReward,
                    #[codec(index = 2)]
                    #[doc = "The relayer has tried to register for past block or registration lease"]
                    #[doc = "is too short."]
                    InvalidRegistrationLease,
                    #[codec(index = 3)]
                    #[doc = "New registration lease is less than the previous one."]
                    CannotReduceRegistrationLease,
                    #[codec(index = 4)]
                    #[doc = "Failed to reserve enough funds on relayer account."]
                    FailedToReserve,
                    #[codec(index = 5)]
                    #[doc = "Failed to `unreserve` enough funds on relayer account."]
                    FailedToUnreserve,
                    #[codec(index = 6)]
                    #[doc = "Cannot `deregister` if not registered."]
                    NotRegistered,
                    #[codec(index = 7)]
                    #[doc = "Failed to `deregister` relayer, because lease is still active."]
                    RegistrationIsStillActive,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "The `Event` enum of this pallet"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "Relayer reward has been registered and may be claimed later."]
                    RewardRegistered {
                        relayer: ::subxt::utils::AccountId32,
                        rewards_account_params: runtime_types::bp_relayers::RewardsAccountParams,
                        reward: ::core::primitive::u128,
                    },
                    #[codec(index = 1)]
                    #[doc = "Reward has been paid to the relayer."]
                    RewardPaid {
                        relayer: ::subxt::utils::AccountId32,
                        rewards_account_params: runtime_types::bp_relayers::RewardsAccountParams,
                        reward: ::core::primitive::u128,
                    },
                    #[codec(index = 2)]
                    #[doc = "Relayer registration has been added or updated."]
                    RegistrationUpdated {
                        relayer: ::subxt::utils::AccountId32,
                        registration: runtime_types::bp_relayers::registration::Registration<
                            ::core::primitive::u32,
                            ::core::primitive::u128,
                        >,
                    },
                    #[codec(index = 3)]
                    #[doc = "Relayer has been `deregistered`."]
                    Deregistered {
                        relayer: ::subxt::utils::AccountId32,
                    },
                    #[codec(index = 4)]
                    #[doc = "Relayer has been slashed and `deregistered`."]
                    SlashedAndDeregistered {
                        relayer: ::subxt::utils::AccountId32,
                        registration: runtime_types::bp_relayers::registration::Registration<
                            ::core::primitive::u32,
                            ::core::primitive::u128,
                        >,
                    },
                }
            }
        }
        pub mod pallet_collator_selection {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "See [`Pallet::set_invulnerables`]."]
                    set_invulnerables {
                        new: ::std::vec::Vec<::subxt::utils::AccountId32>,
                    },
                    #[codec(index = 1)]
                    #[doc = "See [`Pallet::set_desired_candidates`]."]
                    set_desired_candidates { max: ::core::primitive::u32 },
                    #[codec(index = 2)]
                    #[doc = "See [`Pallet::set_candidacy_bond`]."]
                    set_candidacy_bond { bond: ::core::primitive::u128 },
                    #[codec(index = 3)]
                    #[doc = "See [`Pallet::register_as_candidate`]."]
                    register_as_candidate,
                    #[codec(index = 4)]
                    #[doc = "See [`Pallet::leave_intent`]."]
                    leave_intent,
                    #[codec(index = 5)]
                    #[doc = "See [`Pallet::add_invulnerable`]."]
                    add_invulnerable { who: ::subxt::utils::AccountId32 },
                    #[codec(index = 6)]
                    #[doc = "See [`Pallet::remove_invulnerable`]."]
                    remove_invulnerable { who: ::subxt::utils::AccountId32 },
                    #[codec(index = 7)]
                    #[doc = "See [`Pallet::update_bond`]."]
                    update_bond {
                        new_deposit: ::core::primitive::u128,
                    },
                    #[codec(index = 8)]
                    #[doc = "See [`Pallet::take_candidate_slot`]."]
                    take_candidate_slot {
                        deposit: ::core::primitive::u128,
                        target: ::subxt::utils::AccountId32,
                    },
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct CandidateInfo<_0, _1> {
                    pub who: _0,
                    pub deposit: _1,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "The `Error` enum of this pallet."]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "The pallet has too many candidates."]
                    TooManyCandidates,
                    #[codec(index = 1)]
                    #[doc = "Leaving would result in too few candidates."]
                    TooFewEligibleCollators,
                    #[codec(index = 2)]
                    #[doc = "Account is already a candidate."]
                    AlreadyCandidate,
                    #[codec(index = 3)]
                    #[doc = "Account is not a candidate."]
                    NotCandidate,
                    #[codec(index = 4)]
                    #[doc = "There are too many Invulnerables."]
                    TooManyInvulnerables,
                    #[codec(index = 5)]
                    #[doc = "Account is already an Invulnerable."]
                    AlreadyInvulnerable,
                    #[codec(index = 6)]
                    #[doc = "Account is not an Invulnerable."]
                    NotInvulnerable,
                    #[codec(index = 7)]
                    #[doc = "Account has no associated validator ID."]
                    NoAssociatedValidatorId,
                    #[codec(index = 8)]
                    #[doc = "Validator ID is not yet registered."]
                    ValidatorNotRegistered,
                    #[codec(index = 9)]
                    #[doc = "Could not insert in the candidate list."]
                    InsertToCandidateListFailed,
                    #[codec(index = 10)]
                    #[doc = "Could not remove from the candidate list."]
                    RemoveFromCandidateListFailed,
                    #[codec(index = 11)]
                    #[doc = "New deposit amount would be below the minimum candidacy bond."]
                    DepositTooLow,
                    #[codec(index = 12)]
                    #[doc = "Could not update the candidate list."]
                    UpdateCandidateListFailed,
                    #[codec(index = 13)]
                    #[doc = "Deposit amount is too low to take the target's slot in the candidate list."]
                    InsufficientBond,
                    #[codec(index = 14)]
                    #[doc = "The target account to be replaced in the candidate list is not a candidate."]
                    TargetIsNotCandidate,
                    #[codec(index = 15)]
                    #[doc = "The updated deposit amount is equal to the amount already reserved."]
                    IdenticalDeposit,
                    #[codec(index = 16)]
                    #[doc = "Cannot lower candidacy bond while occupying a future collator slot in the list."]
                    InvalidUnreserve,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "The `Event` enum of this pallet"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "New Invulnerables were set."]
                    NewInvulnerables {
                        invulnerables: ::std::vec::Vec<::subxt::utils::AccountId32>,
                    },
                    #[codec(index = 1)]
                    #[doc = "A new Invulnerable was added."]
                    InvulnerableAdded {
                        account_id: ::subxt::utils::AccountId32,
                    },
                    #[codec(index = 2)]
                    #[doc = "An Invulnerable was removed."]
                    InvulnerableRemoved {
                        account_id: ::subxt::utils::AccountId32,
                    },
                    #[codec(index = 3)]
                    #[doc = "The number of desired candidates was set."]
                    NewDesiredCandidates {
                        desired_candidates: ::core::primitive::u32,
                    },
                    #[codec(index = 4)]
                    #[doc = "The candidacy bond was set."]
                    NewCandidacyBond {
                        bond_amount: ::core::primitive::u128,
                    },
                    #[codec(index = 5)]
                    #[doc = "A new candidate joined."]
                    CandidateAdded {
                        account_id: ::subxt::utils::AccountId32,
                        deposit: ::core::primitive::u128,
                    },
                    #[codec(index = 6)]
                    #[doc = "Bond of a candidate updated."]
                    CandidateBondUpdated {
                        account_id: ::subxt::utils::AccountId32,
                        deposit: ::core::primitive::u128,
                    },
                    #[codec(index = 7)]
                    #[doc = "A candidate was removed."]
                    CandidateRemoved {
                        account_id: ::subxt::utils::AccountId32,
                    },
                    #[codec(index = 8)]
                    #[doc = "An account was replaced in the candidate list by another one."]
                    CandidateReplaced {
                        old: ::subxt::utils::AccountId32,
                        new: ::subxt::utils::AccountId32,
                        deposit: ::core::primitive::u128,
                    },
                    #[codec(index = 9)]
                    #[doc = "An account was unable to be added to the Invulnerables because they did not have keys"]
                    #[doc = "registered. Other Invulnerables may have been set."]
                    InvalidInvulnerableSkipped {
                        account_id: ::subxt::utils::AccountId32,
                    },
                }
            }
        }
        pub mod pallet_message_queue {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "See [`Pallet::reap_page`]."]
                    reap_page {
                        message_origin:
                            runtime_types::bridge_hub_common::message_queue::AggregateMessageOrigin,
                        page_index: ::core::primitive::u32,
                    },
                    #[codec(index = 1)]
                    #[doc = "See [`Pallet::execute_overweight`]."]
                    execute_overweight {
                        message_origin:
                            runtime_types::bridge_hub_common::message_queue::AggregateMessageOrigin,
                        page: ::core::primitive::u32,
                        index: ::core::primitive::u32,
                        weight_limit: runtime_types::sp_weights::weight_v2::Weight,
                    },
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "The `Error` enum of this pallet."]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "Page is not reapable because it has items remaining to be processed and is not old"]
                    #[doc = "enough."]
                    NotReapable,
                    #[codec(index = 1)]
                    #[doc = "Page to be reaped does not exist."]
                    NoPage,
                    #[codec(index = 2)]
                    #[doc = "The referenced message could not be found."]
                    NoMessage,
                    #[codec(index = 3)]
                    #[doc = "The message was already processed and cannot be processed again."]
                    AlreadyProcessed,
                    #[codec(index = 4)]
                    #[doc = "The message is queued for future execution."]
                    Queued,
                    #[codec(index = 5)]
                    #[doc = "There is temporarily not enough weight to continue servicing messages."]
                    InsufficientWeight,
                    #[codec(index = 6)]
                    #[doc = "This message is temporarily unprocessable."]
                    #[doc = ""]
                    #[doc = "Such errors are expected, but not guaranteed, to resolve themselves eventually through"]
                    #[doc = "retrying."]
                    TemporarilyUnprocessable,
                    #[codec(index = 7)]
                    #[doc = "The queue is paused and no message can be executed from it."]
                    #[doc = ""]
                    #[doc = "This can change at any time and may resolve in the future by re-trying."]
                    QueuePaused,
                    #[codec(index = 8)]
                    #[doc = "Another call is in progress and needs to finish before this call can happen."]
                    RecursiveDisallowed,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "The `Event` enum of this pallet"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "Message discarded due to an error in the `MessageProcessor` (usually a format error)."]
                    ProcessingFailed {
                        id: ::subxt::utils::H256,
                        origin:
                            runtime_types::bridge_hub_common::message_queue::AggregateMessageOrigin,
                        error: runtime_types::frame_support::traits::messages::ProcessMessageError,
                    },
                    #[codec(index = 1)]
                    #[doc = "Message is processed."]
                    Processed {
                        id: ::subxt::utils::H256,
                        origin:
                            runtime_types::bridge_hub_common::message_queue::AggregateMessageOrigin,
                        weight_used: runtime_types::sp_weights::weight_v2::Weight,
                        success: ::core::primitive::bool,
                    },
                    #[codec(index = 2)]
                    #[doc = "Message placed in overweight queue."]
                    OverweightEnqueued {
                        id: [::core::primitive::u8; 32usize],
                        origin:
                            runtime_types::bridge_hub_common::message_queue::AggregateMessageOrigin,
                        page_index: ::core::primitive::u32,
                        message_index: ::core::primitive::u32,
                    },
                    #[codec(index = 3)]
                    #[doc = "This page was reaped."]
                    PageReaped {
                        origin:
                            runtime_types::bridge_hub_common::message_queue::AggregateMessageOrigin,
                        index: ::core::primitive::u32,
                    },
                }
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct BookState<_0> {
                pub begin: ::core::primitive::u32,
                pub end: ::core::primitive::u32,
                pub count: ::core::primitive::u32,
                pub ready_neighbours:
                    ::core::option::Option<runtime_types::pallet_message_queue::Neighbours<_0>>,
                pub message_count: ::core::primitive::u64,
                pub size: ::core::primitive::u64,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Neighbours<_0> {
                pub prev: _0,
                pub next: _0,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Page<_0> {
                pub remaining: _0,
                pub remaining_size: _0,
                pub first_index: _0,
                pub first: _0,
                pub last: _0,
                pub heap: runtime_types::bounded_collections::bounded_vec::BoundedVec<
                    ::core::primitive::u8,
                >,
            }
        }
        pub mod pallet_multisig {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "See [`Pallet::as_multi_threshold_1`]."]
                    as_multi_threshold_1 {
                        other_signatories: ::std::vec::Vec<::subxt::utils::AccountId32>,
                        call: ::std::boxed::Box<
                            runtime_types::bridge_hub_rococo_runtime::RuntimeCall,
                        >,
                    },
                    #[codec(index = 1)]
                    #[doc = "See [`Pallet::as_multi`]."]
                    as_multi {
                        threshold: ::core::primitive::u16,
                        other_signatories: ::std::vec::Vec<::subxt::utils::AccountId32>,
                        maybe_timepoint: ::core::option::Option<
                            runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>,
                        >,
                        call: ::std::boxed::Box<
                            runtime_types::bridge_hub_rococo_runtime::RuntimeCall,
                        >,
                        max_weight: runtime_types::sp_weights::weight_v2::Weight,
                    },
                    #[codec(index = 2)]
                    #[doc = "See [`Pallet::approve_as_multi`]."]
                    approve_as_multi {
                        threshold: ::core::primitive::u16,
                        other_signatories: ::std::vec::Vec<::subxt::utils::AccountId32>,
                        maybe_timepoint: ::core::option::Option<
                            runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>,
                        >,
                        call_hash: [::core::primitive::u8; 32usize],
                        max_weight: runtime_types::sp_weights::weight_v2::Weight,
                    },
                    #[codec(index = 3)]
                    #[doc = "See [`Pallet::cancel_as_multi`]."]
                    cancel_as_multi {
                        threshold: ::core::primitive::u16,
                        other_signatories: ::std::vec::Vec<::subxt::utils::AccountId32>,
                        timepoint:
                            runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>,
                        call_hash: [::core::primitive::u8; 32usize],
                    },
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "The `Error` enum of this pallet."]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "Threshold must be 2 or greater."]
                    MinimumThreshold,
                    #[codec(index = 1)]
                    #[doc = "Call is already approved by this signatory."]
                    AlreadyApproved,
                    #[codec(index = 2)]
                    #[doc = "Call doesn't need any (more) approvals."]
                    NoApprovalsNeeded,
                    #[codec(index = 3)]
                    #[doc = "There are too few signatories in the list."]
                    TooFewSignatories,
                    #[codec(index = 4)]
                    #[doc = "There are too many signatories in the list."]
                    TooManySignatories,
                    #[codec(index = 5)]
                    #[doc = "The signatories were provided out of order; they should be ordered."]
                    SignatoriesOutOfOrder,
                    #[codec(index = 6)]
                    #[doc = "The sender was contained in the other signatories; it shouldn't be."]
                    SenderInSignatories,
                    #[codec(index = 7)]
                    #[doc = "Multisig operation not found when attempting to cancel."]
                    NotFound,
                    #[codec(index = 8)]
                    #[doc = "Only the account that originally created the multisig is able to cancel it."]
                    NotOwner,
                    #[codec(index = 9)]
                    #[doc = "No timepoint was given, yet the multisig operation is already underway."]
                    NoTimepoint,
                    #[codec(index = 10)]
                    #[doc = "A different timepoint was given to the multisig operation that is underway."]
                    WrongTimepoint,
                    #[codec(index = 11)]
                    #[doc = "A timepoint was given, yet no multisig operation is underway."]
                    UnexpectedTimepoint,
                    #[codec(index = 12)]
                    #[doc = "The maximum weight information provided was too low."]
                    MaxWeightTooLow,
                    #[codec(index = 13)]
                    #[doc = "The data to be stored is already stored."]
                    AlreadyStored,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "The `Event` enum of this pallet"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "A new multisig operation has begun."]
                    NewMultisig {
                        approving: ::subxt::utils::AccountId32,
                        multisig: ::subxt::utils::AccountId32,
                        call_hash: [::core::primitive::u8; 32usize],
                    },
                    #[codec(index = 1)]
                    #[doc = "A multisig operation has been approved by someone."]
                    MultisigApproval {
                        approving: ::subxt::utils::AccountId32,
                        timepoint:
                            runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>,
                        multisig: ::subxt::utils::AccountId32,
                        call_hash: [::core::primitive::u8; 32usize],
                    },
                    #[codec(index = 2)]
                    #[doc = "A multisig operation has been executed."]
                    MultisigExecuted {
                        approving: ::subxt::utils::AccountId32,
                        timepoint:
                            runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>,
                        multisig: ::subxt::utils::AccountId32,
                        call_hash: [::core::primitive::u8; 32usize],
                        result:
                            ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
                    },
                    #[codec(index = 3)]
                    #[doc = "A multisig operation has been cancelled."]
                    MultisigCancelled {
                        cancelling: ::subxt::utils::AccountId32,
                        timepoint:
                            runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>,
                        multisig: ::subxt::utils::AccountId32,
                        call_hash: [::core::primitive::u8; 32usize],
                    },
                }
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Multisig<_0, _1, _2> {
                pub when: runtime_types::pallet_multisig::Timepoint<_0>,
                pub deposit: _1,
                pub depositor: _2,
                pub approvals: runtime_types::bounded_collections::bounded_vec::BoundedVec<_2>,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Timepoint<_0> {
                pub height: _0,
                pub index: ::core::primitive::u32,
            }
        }
        pub mod pallet_session {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "See [`Pallet::set_keys`]."]
                    set_keys {
                        keys: runtime_types::bridge_hub_rococo_runtime::SessionKeys,
                        proof: ::std::vec::Vec<::core::primitive::u8>,
                    },
                    #[codec(index = 1)]
                    #[doc = "See [`Pallet::purge_keys`]."]
                    purge_keys,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Error for the session pallet."]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "Invalid ownership proof."]
                    InvalidProof,
                    #[codec(index = 1)]
                    #[doc = "No associated validator ID for account."]
                    NoAssociatedValidatorId,
                    #[codec(index = 2)]
                    #[doc = "Registered duplicate key."]
                    DuplicatedKey,
                    #[codec(index = 3)]
                    #[doc = "No keys are associated with this account."]
                    NoKeys,
                    #[codec(index = 4)]
                    #[doc = "Key setting account is not live, so it's impossible to associate keys."]
                    NoAccount,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "The `Event` enum of this pallet"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "New session has happened. Note that the argument is the session index, not the"]
                    #[doc = "block number as the type might suggest."]
                    NewSession {
                        session_index: ::core::primitive::u32,
                    },
                }
            }
        }
        pub mod pallet_timestamp {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "See [`Pallet::set`]."]
                    set {
                        #[codec(compact)]
                        now: ::core::primitive::u64,
                    },
                }
            }
        }
        pub mod pallet_transaction_payment {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "The `Event` enum of this pallet"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "A transaction fee `actual_fee`, of which `tip` was added to the minimum inclusion fee,"]
                    #[doc = "has been paid by `who`."]
                    TransactionFeePaid {
                        who: ::subxt::utils::AccountId32,
                        actual_fee: ::core::primitive::u128,
                        tip: ::core::primitive::u128,
                    },
                }
            }
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct FeeDetails<_0> {
                    pub inclusion_fee: ::core::option::Option<
                        runtime_types::pallet_transaction_payment::types::InclusionFee<_0>,
                    >,
                    pub tip: _0,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct InclusionFee<_0> {
                    pub base_fee: _0,
                    pub len_fee: _0,
                    pub adjusted_weight_fee: _0,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct RuntimeDispatchInfo<_0, _1> {
                    pub weight: _1,
                    pub class: runtime_types::frame_support::dispatch::DispatchClass,
                    pub partial_fee: _0,
                }
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct ChargeTransactionPayment(#[codec(compact)] pub ::core::primitive::u128);
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub enum Releases {
                #[codec(index = 0)]
                V1Ancient,
                #[codec(index = 1)]
                V2,
            }
        }
        pub mod pallet_utility {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "See [`Pallet::batch`]."]
                    batch {
                        calls:
                            ::std::vec::Vec<runtime_types::bridge_hub_rococo_runtime::RuntimeCall>,
                    },
                    #[codec(index = 1)]
                    #[doc = "See [`Pallet::as_derivative`]."]
                    as_derivative {
                        index: ::core::primitive::u16,
                        call: ::std::boxed::Box<
                            runtime_types::bridge_hub_rococo_runtime::RuntimeCall,
                        >,
                    },
                    #[codec(index = 2)]
                    #[doc = "See [`Pallet::batch_all`]."]
                    batch_all {
                        calls:
                            ::std::vec::Vec<runtime_types::bridge_hub_rococo_runtime::RuntimeCall>,
                    },
                    #[codec(index = 3)]
                    #[doc = "See [`Pallet::dispatch_as`]."]
                    dispatch_as {
                        as_origin: ::std::boxed::Box<
                            runtime_types::bridge_hub_rococo_runtime::OriginCaller,
                        >,
                        call: ::std::boxed::Box<
                            runtime_types::bridge_hub_rococo_runtime::RuntimeCall,
                        >,
                    },
                    #[codec(index = 4)]
                    #[doc = "See [`Pallet::force_batch`]."]
                    force_batch {
                        calls:
                            ::std::vec::Vec<runtime_types::bridge_hub_rococo_runtime::RuntimeCall>,
                    },
                    #[codec(index = 5)]
                    #[doc = "See [`Pallet::with_weight`]."]
                    with_weight {
                        call: ::std::boxed::Box<
                            runtime_types::bridge_hub_rococo_runtime::RuntimeCall,
                        >,
                        weight: runtime_types::sp_weights::weight_v2::Weight,
                    },
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "The `Error` enum of this pallet."]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "Too many calls batched."]
                    TooManyCalls,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "The `Event` enum of this pallet"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "Batch of dispatches did not complete fully. Index of first failing dispatch given, as"]
                    #[doc = "well as the error."]
                    BatchInterrupted {
                        index: ::core::primitive::u32,
                        error: runtime_types::sp_runtime::DispatchError,
                    },
                    #[codec(index = 1)]
                    #[doc = "Batch of dispatches completed fully with no error."]
                    BatchCompleted,
                    #[codec(index = 2)]
                    #[doc = "Batch of dispatches completed but has errors."]
                    BatchCompletedWithErrors,
                    #[codec(index = 3)]
                    #[doc = "A single item within a Batch of dispatches has completed with no error."]
                    ItemCompleted,
                    #[codec(index = 4)]
                    #[doc = "A single item within a Batch of dispatches has completed with error."]
                    ItemFailed {
                        error: runtime_types::sp_runtime::DispatchError,
                    },
                    #[codec(index = 5)]
                    #[doc = "A call was dispatched."]
                    DispatchedAs {
                        result:
                            ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
                    },
                }
            }
        }
        pub mod pallet_xcm {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "See [`Pallet::send`]."]
                    send {
                        dest: ::std::boxed::Box<runtime_types::xcm::VersionedLocation>,
                        message: ::std::boxed::Box<runtime_types::xcm::VersionedXcm>,
                    },
                    #[codec(index = 1)]
                    #[doc = "See [`Pallet::teleport_assets`]."]
                    teleport_assets {
                        dest: ::std::boxed::Box<runtime_types::xcm::VersionedLocation>,
                        beneficiary: ::std::boxed::Box<runtime_types::xcm::VersionedLocation>,
                        assets: ::std::boxed::Box<runtime_types::xcm::VersionedAssets>,
                        fee_asset_item: ::core::primitive::u32,
                    },
                    #[codec(index = 2)]
                    #[doc = "See [`Pallet::reserve_transfer_assets`]."]
                    reserve_transfer_assets {
                        dest: ::std::boxed::Box<runtime_types::xcm::VersionedLocation>,
                        beneficiary: ::std::boxed::Box<runtime_types::xcm::VersionedLocation>,
                        assets: ::std::boxed::Box<runtime_types::xcm::VersionedAssets>,
                        fee_asset_item: ::core::primitive::u32,
                    },
                    #[codec(index = 3)]
                    #[doc = "See [`Pallet::execute`]."]
                    execute {
                        message: ::std::boxed::Box<runtime_types::xcm::VersionedXcm2>,
                        max_weight: runtime_types::sp_weights::weight_v2::Weight,
                    },
                    #[codec(index = 4)]
                    #[doc = "See [`Pallet::force_xcm_version`]."]
                    force_xcm_version {
                        location:
                            ::std::boxed::Box<runtime_types::staging_xcm::v4::location::Location>,
                        version: ::core::primitive::u32,
                    },
                    #[codec(index = 5)]
                    #[doc = "See [`Pallet::force_default_xcm_version`]."]
                    force_default_xcm_version {
                        maybe_xcm_version: ::core::option::Option<::core::primitive::u32>,
                    },
                    #[codec(index = 6)]
                    #[doc = "See [`Pallet::force_subscribe_version_notify`]."]
                    force_subscribe_version_notify {
                        location: ::std::boxed::Box<runtime_types::xcm::VersionedLocation>,
                    },
                    #[codec(index = 7)]
                    #[doc = "See [`Pallet::force_unsubscribe_version_notify`]."]
                    force_unsubscribe_version_notify {
                        location: ::std::boxed::Box<runtime_types::xcm::VersionedLocation>,
                    },
                    #[codec(index = 8)]
                    #[doc = "See [`Pallet::limited_reserve_transfer_assets`]."]
                    limited_reserve_transfer_assets {
                        dest: ::std::boxed::Box<runtime_types::xcm::VersionedLocation>,
                        beneficiary: ::std::boxed::Box<runtime_types::xcm::VersionedLocation>,
                        assets: ::std::boxed::Box<runtime_types::xcm::VersionedAssets>,
                        fee_asset_item: ::core::primitive::u32,
                        weight_limit: runtime_types::xcm::v3::WeightLimit,
                    },
                    #[codec(index = 9)]
                    #[doc = "See [`Pallet::limited_teleport_assets`]."]
                    limited_teleport_assets {
                        dest: ::std::boxed::Box<runtime_types::xcm::VersionedLocation>,
                        beneficiary: ::std::boxed::Box<runtime_types::xcm::VersionedLocation>,
                        assets: ::std::boxed::Box<runtime_types::xcm::VersionedAssets>,
                        fee_asset_item: ::core::primitive::u32,
                        weight_limit: runtime_types::xcm::v3::WeightLimit,
                    },
                    #[codec(index = 10)]
                    #[doc = "See [`Pallet::force_suspension`]."]
                    force_suspension { suspended: ::core::primitive::bool },
                    #[codec(index = 11)]
                    #[doc = "See [`Pallet::transfer_assets`]."]
                    transfer_assets {
                        dest: ::std::boxed::Box<runtime_types::xcm::VersionedLocation>,
                        beneficiary: ::std::boxed::Box<runtime_types::xcm::VersionedLocation>,
                        assets: ::std::boxed::Box<runtime_types::xcm::VersionedAssets>,
                        fee_asset_item: ::core::primitive::u32,
                        weight_limit: runtime_types::xcm::v3::WeightLimit,
                    },
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "The `Error` enum of this pallet."]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "The desired destination was unreachable, generally because there is a no way of routing"]
                    #[doc = "to it."]
                    Unreachable,
                    #[codec(index = 1)]
                    #[doc = "There was some other issue (i.e. not to do with routing) in sending the message."]
                    #[doc = "Perhaps a lack of space for buffering the message."]
                    SendFailure,
                    #[codec(index = 2)]
                    #[doc = "The message execution fails the filter."]
                    Filtered,
                    #[codec(index = 3)]
                    #[doc = "The message's weight could not be determined."]
                    UnweighableMessage,
                    #[codec(index = 4)]
                    #[doc = "The destination `Location` provided cannot be inverted."]
                    DestinationNotInvertible,
                    #[codec(index = 5)]
                    #[doc = "The assets to be sent are empty."]
                    Empty,
                    #[codec(index = 6)]
                    #[doc = "Could not re-anchor the assets to declare the fees for the destination chain."]
                    CannotReanchor,
                    #[codec(index = 7)]
                    #[doc = "Too many assets have been attempted for transfer."]
                    TooManyAssets,
                    #[codec(index = 8)]
                    #[doc = "Origin is invalid for sending."]
                    InvalidOrigin,
                    #[codec(index = 9)]
                    #[doc = "The version of the `Versioned` value used is not able to be interpreted."]
                    BadVersion,
                    #[codec(index = 10)]
                    #[doc = "The given location could not be used (e.g. because it cannot be expressed in the"]
                    #[doc = "desired version of XCM)."]
                    BadLocation,
                    #[codec(index = 11)]
                    #[doc = "The referenced subscription could not be found."]
                    NoSubscription,
                    #[codec(index = 12)]
                    #[doc = "The location is invalid since it already has a subscription from us."]
                    AlreadySubscribed,
                    #[codec(index = 13)]
                    #[doc = "Could not check-out the assets for teleportation to the destination chain."]
                    CannotCheckOutTeleport,
                    #[codec(index = 14)]
                    #[doc = "The owner does not own (all) of the asset that they wish to do the operation on."]
                    LowBalance,
                    #[codec(index = 15)]
                    #[doc = "The asset owner has too many locks on the asset."]
                    TooManyLocks,
                    #[codec(index = 16)]
                    #[doc = "The given account is not an identifiable sovereign account for any location."]
                    AccountNotSovereign,
                    #[codec(index = 17)]
                    #[doc = "The operation required fees to be paid which the initiator could not meet."]
                    FeesNotMet,
                    #[codec(index = 18)]
                    #[doc = "A remote lock with the corresponding data could not be found."]
                    LockNotFound,
                    #[codec(index = 19)]
                    #[doc = "The unlock operation cannot succeed because there are still consumers of the lock."]
                    InUse,
                    #[codec(index = 20)]
                    #[doc = "Invalid non-concrete asset."]
                    InvalidAssetNotConcrete,
                    #[codec(index = 21)]
                    #[doc = "Invalid asset, reserve chain could not be determined for it."]
                    InvalidAssetUnknownReserve,
                    #[codec(index = 22)]
                    #[doc = "Invalid asset, do not support remote asset reserves with different fees reserves."]
                    InvalidAssetUnsupportedReserve,
                    #[codec(index = 23)]
                    #[doc = "Too many assets with different reserve locations have been attempted for transfer."]
                    TooManyReserves,
                    #[codec(index = 24)]
                    #[doc = "Local XCM execution incomplete."]
                    LocalExecutionIncomplete,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "The `Event` enum of this pallet"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "Execution of an XCM message was attempted."]
                    Attempted {
                        outcome: runtime_types::staging_xcm::v4::traits::Outcome,
                    },
                    #[codec(index = 1)]
                    #[doc = "A XCM message was sent."]
                    Sent {
                        origin: runtime_types::staging_xcm::v4::location::Location,
                        destination: runtime_types::staging_xcm::v4::location::Location,
                        message: runtime_types::staging_xcm::v4::Xcm,
                        message_id: [::core::primitive::u8; 32usize],
                    },
                    #[codec(index = 2)]
                    #[doc = "Query response received which does not match a registered query. This may be because a"]
                    #[doc = "matching query was never registered, it may be because it is a duplicate response, or"]
                    #[doc = "because the query timed out."]
                    UnexpectedResponse {
                        origin: runtime_types::staging_xcm::v4::location::Location,
                        query_id: ::core::primitive::u64,
                    },
                    #[codec(index = 3)]
                    #[doc = "Query response has been received and is ready for taking with `take_response`. There is"]
                    #[doc = "no registered notification call."]
                    ResponseReady {
                        query_id: ::core::primitive::u64,
                        response: runtime_types::staging_xcm::v4::Response,
                    },
                    #[codec(index = 4)]
                    #[doc = "Query response has been received and query is removed. The registered notification has"]
                    #[doc = "been dispatched and executed successfully."]
                    Notified {
                        query_id: ::core::primitive::u64,
                        pallet_index: ::core::primitive::u8,
                        call_index: ::core::primitive::u8,
                    },
                    #[codec(index = 5)]
                    #[doc = "Query response has been received and query is removed. The registered notification"]
                    #[doc = "could not be dispatched because the dispatch weight is greater than the maximum weight"]
                    #[doc = "originally budgeted by this runtime for the query result."]
                    NotifyOverweight {
                        query_id: ::core::primitive::u64,
                        pallet_index: ::core::primitive::u8,
                        call_index: ::core::primitive::u8,
                        actual_weight: runtime_types::sp_weights::weight_v2::Weight,
                        max_budgeted_weight: runtime_types::sp_weights::weight_v2::Weight,
                    },
                    #[codec(index = 6)]
                    #[doc = "Query response has been received and query is removed. There was a general error with"]
                    #[doc = "dispatching the notification call."]
                    NotifyDispatchError {
                        query_id: ::core::primitive::u64,
                        pallet_index: ::core::primitive::u8,
                        call_index: ::core::primitive::u8,
                    },
                    #[codec(index = 7)]
                    #[doc = "Query response has been received and query is removed. The dispatch was unable to be"]
                    #[doc = "decoded into a `Call`; this might be due to dispatch function having a signature which"]
                    #[doc = "is not `(origin, QueryId, Response)`."]
                    NotifyDecodeFailed {
                        query_id: ::core::primitive::u64,
                        pallet_index: ::core::primitive::u8,
                        call_index: ::core::primitive::u8,
                    },
                    #[codec(index = 8)]
                    #[doc = "Expected query response has been received but the origin location of the response does"]
                    #[doc = "not match that expected. The query remains registered for a later, valid, response to"]
                    #[doc = "be received and acted upon."]
                    InvalidResponder {
                        origin: runtime_types::staging_xcm::v4::location::Location,
                        query_id: ::core::primitive::u64,
                        expected_location: ::core::option::Option<
                            runtime_types::staging_xcm::v4::location::Location,
                        >,
                    },
                    #[codec(index = 9)]
                    #[doc = "Expected query response has been received but the expected origin location placed in"]
                    #[doc = "storage by this runtime previously cannot be decoded. The query remains registered."]
                    #[doc = ""]
                    #[doc = "This is unexpected (since a location placed in storage in a previously executing"]
                    #[doc = "runtime should be readable prior to query timeout) and dangerous since the possibly"]
                    #[doc = "valid response will be dropped. Manual governance intervention is probably going to be"]
                    #[doc = "needed."]
                    InvalidResponderVersion {
                        origin: runtime_types::staging_xcm::v4::location::Location,
                        query_id: ::core::primitive::u64,
                    },
                    #[codec(index = 10)]
                    #[doc = "Received query response has been read and removed."]
                    ResponseTaken { query_id: ::core::primitive::u64 },
                    #[codec(index = 11)]
                    #[doc = "Some assets have been placed in an asset trap."]
                    AssetsTrapped {
                        hash: ::subxt::utils::H256,
                        origin: runtime_types::staging_xcm::v4::location::Location,
                        assets: runtime_types::xcm::VersionedAssets,
                    },
                    #[codec(index = 12)]
                    #[doc = "An XCM version change notification message has been attempted to be sent."]
                    #[doc = ""]
                    #[doc = "The cost of sending it (borne by the chain) is included."]
                    VersionChangeNotified {
                        destination: runtime_types::staging_xcm::v4::location::Location,
                        result: ::core::primitive::u32,
                        cost: runtime_types::staging_xcm::v4::asset::Assets,
                        message_id: [::core::primitive::u8; 32usize],
                    },
                    #[codec(index = 13)]
                    #[doc = "The supported version of a location has been changed. This might be through an"]
                    #[doc = "automatic notification or a manual intervention."]
                    SupportedVersionChanged {
                        location: runtime_types::staging_xcm::v4::location::Location,
                        version: ::core::primitive::u32,
                    },
                    #[codec(index = 14)]
                    #[doc = "A given location which had a version change subscription was dropped owing to an error"]
                    #[doc = "sending the notification to it."]
                    NotifyTargetSendFail {
                        location: runtime_types::staging_xcm::v4::location::Location,
                        query_id: ::core::primitive::u64,
                        error: runtime_types::xcm::v3::traits::Error,
                    },
                    #[codec(index = 15)]
                    #[doc = "A given location which had a version change subscription was dropped owing to an error"]
                    #[doc = "migrating the location to our new XCM format."]
                    NotifyTargetMigrationFail {
                        location: runtime_types::xcm::VersionedLocation,
                        query_id: ::core::primitive::u64,
                    },
                    #[codec(index = 16)]
                    #[doc = "Expected query response has been received but the expected querier location placed in"]
                    #[doc = "storage by this runtime previously cannot be decoded. The query remains registered."]
                    #[doc = ""]
                    #[doc = "This is unexpected (since a location placed in storage in a previously executing"]
                    #[doc = "runtime should be readable prior to query timeout) and dangerous since the possibly"]
                    #[doc = "valid response will be dropped. Manual governance intervention is probably going to be"]
                    #[doc = "needed."]
                    InvalidQuerierVersion {
                        origin: runtime_types::staging_xcm::v4::location::Location,
                        query_id: ::core::primitive::u64,
                    },
                    #[codec(index = 17)]
                    #[doc = "Expected query response has been received but the querier location of the response does"]
                    #[doc = "not match the expected. The query remains registered for a later, valid, response to"]
                    #[doc = "be received and acted upon."]
                    InvalidQuerier {
                        origin: runtime_types::staging_xcm::v4::location::Location,
                        query_id: ::core::primitive::u64,
                        expected_querier: runtime_types::staging_xcm::v4::location::Location,
                        maybe_actual_querier: ::core::option::Option<
                            runtime_types::staging_xcm::v4::location::Location,
                        >,
                    },
                    #[codec(index = 18)]
                    #[doc = "A remote has requested XCM version change notification from us and we have honored it."]
                    #[doc = "A version information message is sent to them and its cost is included."]
                    VersionNotifyStarted {
                        destination: runtime_types::staging_xcm::v4::location::Location,
                        cost: runtime_types::staging_xcm::v4::asset::Assets,
                        message_id: [::core::primitive::u8; 32usize],
                    },
                    #[codec(index = 19)]
                    #[doc = "We have requested that a remote chain send us XCM version change notifications."]
                    VersionNotifyRequested {
                        destination: runtime_types::staging_xcm::v4::location::Location,
                        cost: runtime_types::staging_xcm::v4::asset::Assets,
                        message_id: [::core::primitive::u8; 32usize],
                    },
                    #[codec(index = 20)]
                    #[doc = "We have requested that a remote chain stops sending us XCM version change"]
                    #[doc = "notifications."]
                    VersionNotifyUnrequested {
                        destination: runtime_types::staging_xcm::v4::location::Location,
                        cost: runtime_types::staging_xcm::v4::asset::Assets,
                        message_id: [::core::primitive::u8; 32usize],
                    },
                    #[codec(index = 21)]
                    #[doc = "Fees were paid from a location for an operation (often for using `SendXcm`)."]
                    FeesPaid {
                        paying: runtime_types::staging_xcm::v4::location::Location,
                        fees: runtime_types::staging_xcm::v4::asset::Assets,
                    },
                    #[codec(index = 22)]
                    #[doc = "Some assets have been claimed from an asset trap"]
                    AssetsClaimed {
                        hash: ::subxt::utils::H256,
                        origin: runtime_types::staging_xcm::v4::location::Location,
                        assets: runtime_types::xcm::VersionedAssets,
                    },
                    #[codec(index = 23)]
                    #[doc = "A XCM version migration finished."]
                    VersionMigrationFinished { version: ::core::primitive::u32 },
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum Origin {
                    #[codec(index = 0)]
                    Xcm(runtime_types::staging_xcm::v4::location::Location),
                    #[codec(index = 1)]
                    Response(runtime_types::staging_xcm::v4::location::Location),
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum QueryStatus<_0> {
                    #[codec(index = 0)]
                    Pending {
                        responder: runtime_types::xcm::VersionedLocation,
                        maybe_match_querier:
                            ::core::option::Option<runtime_types::xcm::VersionedLocation>,
                        maybe_notify:
                            ::core::option::Option<(::core::primitive::u8, ::core::primitive::u8)>,
                        timeout: _0,
                    },
                    #[codec(index = 1)]
                    VersionNotifier {
                        origin: runtime_types::xcm::VersionedLocation,
                        is_active: ::core::primitive::bool,
                    },
                    #[codec(index = 2)]
                    Ready {
                        response: runtime_types::xcm::VersionedResponse,
                        at: _0,
                    },
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct RemoteLockedFungibleRecord<_0> {
                    pub amount: ::core::primitive::u128,
                    pub owner: runtime_types::xcm::VersionedLocation,
                    pub locker: runtime_types::xcm::VersionedLocation,
                    pub consumers: runtime_types::bounded_collections::bounded_vec::BoundedVec<(
                        _0,
                        ::core::primitive::u128,
                    )>,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum VersionMigrationStage {
                    #[codec(index = 0)]
                    MigrateSupportedVersion,
                    #[codec(index = 1)]
                    MigrateVersionNotifiers,
                    #[codec(index = 2)]
                    NotifyCurrentTargets(
                        ::core::option::Option<::std::vec::Vec<::core::primitive::u8>>,
                    ),
                    #[codec(index = 3)]
                    MigrateAndNotifyOldTargets,
                }
            }
        }
        pub mod polkadot_core_primitives {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct InboundDownwardMessage<_0> {
                pub sent_at: _0,
                pub msg: ::std::vec::Vec<::core::primitive::u8>,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct InboundHrmpMessage<_0> {
                pub sent_at: _0,
                pub data: ::std::vec::Vec<::core::primitive::u8>,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct OutboundHrmpMessage<_0> {
                pub recipient: _0,
                pub data: ::std::vec::Vec<::core::primitive::u8>,
            }
        }
        pub mod polkadot_parachain_primitives {
            use super::runtime_types;
            pub mod primitives {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct HeadData(pub ::std::vec::Vec<::core::primitive::u8>);
                #[derive(
                    :: subxt :: ext :: codec :: CompactAs,
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Id(pub ::core::primitive::u32);
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ValidationCode(pub ::std::vec::Vec<::core::primitive::u8>);
            }
        }
        pub mod polkadot_primitives {
            use super::runtime_types;
            pub mod v6 {
                use super::runtime_types;
                pub mod async_backing {
                    use super::runtime_types;
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        :: subxt :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: codec)]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub struct AsyncBackingParams {
                        pub max_candidate_depth: ::core::primitive::u32,
                        pub allowed_ancestry_len: ::core::primitive::u32,
                    }
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct AbridgedHostConfiguration {
                    pub max_code_size: ::core::primitive::u32,
                    pub max_head_data_size: ::core::primitive::u32,
                    pub max_upward_queue_count: ::core::primitive::u32,
                    pub max_upward_queue_size: ::core::primitive::u32,
                    pub max_upward_message_size: ::core::primitive::u32,
                    pub max_upward_message_num_per_candidate: ::core::primitive::u32,
                    pub hrmp_max_message_num_per_candidate: ::core::primitive::u32,
                    pub validation_upgrade_cooldown: ::core::primitive::u32,
                    pub validation_upgrade_delay: ::core::primitive::u32,
                    pub async_backing_params:
                        runtime_types::polkadot_primitives::v6::async_backing::AsyncBackingParams,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct AbridgedHrmpChannel {
                    pub max_capacity: ::core::primitive::u32,
                    pub max_total_size: ::core::primitive::u32,
                    pub max_message_size: ::core::primitive::u32,
                    pub msg_count: ::core::primitive::u32,
                    pub total_size: ::core::primitive::u32,
                    pub mqc_head: ::core::option::Option<::subxt::utils::H256>,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct PersistedValidationData<_0, _1> {
                    pub parent_head:
                        runtime_types::polkadot_parachain_primitives::primitives::HeadData,
                    pub relay_parent_number: _1,
                    pub relay_parent_storage_root: _0,
                    pub max_pov_size: ::core::primitive::u32,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum UpgradeGoAhead {
                    #[codec(index = 0)]
                    Abort,
                    #[codec(index = 1)]
                    GoAhead,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum UpgradeRestriction {
                    #[codec(index = 0)]
                    Present,
                }
            }
        }
        pub mod primitive_types {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct U256(pub [::core::primitive::u64; 4usize]);
        }
        pub mod snowbridge_amcl {
            use super::runtime_types;
            pub mod bls381 {
                use super::runtime_types;
                pub mod big {
                    use super::runtime_types;
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        :: subxt :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: codec)]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub struct Big {
                        pub w: [::core::primitive::i32; 14usize],
                    }
                }
                pub mod ecp {
                    use super::runtime_types;
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        :: subxt :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: codec)]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub struct ECP {
                        pub x: runtime_types::snowbridge_amcl::bls381::fp::FP,
                        pub y: runtime_types::snowbridge_amcl::bls381::fp::FP,
                        pub z: runtime_types::snowbridge_amcl::bls381::fp::FP,
                    }
                }
                pub mod fp {
                    use super::runtime_types;
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        :: subxt :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: codec)]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub struct FP {
                        pub x: runtime_types::snowbridge_amcl::bls381::big::Big,
                        pub xes: ::core::primitive::i32,
                    }
                }
            }
        }
        pub mod snowbridge_beacon_primitives {
            use super::runtime_types;
            pub mod bls {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum BlsError {
                    #[codec(index = 0)]
                    InvalidSignature,
                    #[codec(index = 1)]
                    InvalidPublicKey,
                    #[codec(index = 2)]
                    InvalidAggregatePublicKeys,
                    #[codec(index = 3)]
                    SignatureVerificationFailed,
                }
            }
            pub mod types {
                use super::runtime_types;
                pub mod deneb {
                    use super::runtime_types;
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        :: subxt :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: codec)]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub struct ExecutionPayloadHeader {
                        pub parent_hash: ::subxt::utils::H256,
                        pub fee_recipient: ::subxt::utils::H160,
                        pub state_root: ::subxt::utils::H256,
                        pub receipts_root: ::subxt::utils::H256,
                        pub logs_bloom: ::std::vec::Vec<::core::primitive::u8>,
                        pub prev_randao: ::subxt::utils::H256,
                        pub block_number: ::core::primitive::u64,
                        pub gas_limit: ::core::primitive::u64,
                        pub gas_used: ::core::primitive::u64,
                        pub timestamp: ::core::primitive::u64,
                        pub extra_data: ::std::vec::Vec<::core::primitive::u8>,
                        pub base_fee_per_gas: runtime_types::primitive_types::U256,
                        pub block_hash: ::subxt::utils::H256,
                        pub transactions_root: ::subxt::utils::H256,
                        pub withdrawals_root: ::subxt::utils::H256,
                        pub blob_gas_used: ::core::primitive::u64,
                        pub excess_blob_gas: ::core::primitive::u64,
                    }
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct BeaconHeader {
                    pub slot: ::core::primitive::u64,
                    pub proposer_index: ::core::primitive::u64,
                    pub parent_root: ::subxt::utils::H256,
                    pub state_root: ::subxt::utils::H256,
                    pub body_root: ::subxt::utils::H256,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct CompactBeaconState {
                    #[codec(compact)]
                    pub slot: ::core::primitive::u64,
                    pub block_roots_root: ::subxt::utils::H256,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct CompactExecutionHeader {
                    pub parent_hash: ::subxt::utils::H256,
                    #[codec(compact)]
                    pub block_number: ::core::primitive::u64,
                    pub state_root: ::subxt::utils::H256,
                    pub receipts_root: ::subxt::utils::H256,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ExecutionHeaderState {
                    pub beacon_block_root: ::subxt::utils::H256,
                    pub beacon_slot: ::core::primitive::u64,
                    pub block_hash: ::subxt::utils::H256,
                    pub block_number: ::core::primitive::u64,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ExecutionPayloadHeader {
                    pub parent_hash: ::subxt::utils::H256,
                    pub fee_recipient: ::subxt::utils::H160,
                    pub state_root: ::subxt::utils::H256,
                    pub receipts_root: ::subxt::utils::H256,
                    pub logs_bloom: ::std::vec::Vec<::core::primitive::u8>,
                    pub prev_randao: ::subxt::utils::H256,
                    pub block_number: ::core::primitive::u64,
                    pub gas_limit: ::core::primitive::u64,
                    pub gas_used: ::core::primitive::u64,
                    pub timestamp: ::core::primitive::u64,
                    pub extra_data: ::std::vec::Vec<::core::primitive::u8>,
                    pub base_fee_per_gas: runtime_types::primitive_types::U256,
                    pub block_hash: ::subxt::utils::H256,
                    pub transactions_root: ::subxt::utils::H256,
                    pub withdrawals_root: ::subxt::utils::H256,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Fork {
                    pub version: [::core::primitive::u8; 4usize],
                    pub epoch: ::core::primitive::u64,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ForkVersions {
                    pub genesis: runtime_types::snowbridge_beacon_primitives::types::Fork,
                    pub altair: runtime_types::snowbridge_beacon_primitives::types::Fork,
                    pub bellatrix: runtime_types::snowbridge_beacon_primitives::types::Fork,
                    pub capella: runtime_types::snowbridge_beacon_primitives::types::Fork,
                    pub deneb: runtime_types::snowbridge_beacon_primitives::types::Fork,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct PublicKey(pub [::core::primitive::u8; 48usize]);
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Signature(pub [::core::primitive::u8; 96usize]);
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SyncAggregate {
                    pub sync_committee_bits: [::core::primitive::u8; 64usize],
                    pub sync_committee_signature:
                        runtime_types::snowbridge_beacon_primitives::types::Signature,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SyncCommittee {
                    pub pubkeys:
                        [runtime_types::snowbridge_beacon_primitives::types::PublicKey; 512usize],
                    pub aggregate_pubkey:
                        runtime_types::snowbridge_beacon_primitives::types::PublicKey,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SyncCommitteePrepared {
                    pub root: ::subxt::utils::H256,
                    pub pubkeys: ::std::boxed::Box<
                        [runtime_types::snowbridge_milagro_bls::keys::PublicKey; 512usize],
                    >,
                    pub aggregate_pubkey: runtime_types::snowbridge_milagro_bls::keys::PublicKey,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum VersionedExecutionPayloadHeader {
                    # [codec (index = 0)] Capella (runtime_types :: snowbridge_beacon_primitives :: types :: ExecutionPayloadHeader ,) , # [codec (index = 1)] Deneb (runtime_types :: snowbridge_beacon_primitives :: types :: deneb :: ExecutionPayloadHeader ,) , }
            }
            pub mod updates {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct AncestryProof {
                    pub header_branch: ::std::vec::Vec<::subxt::utils::H256>,
                    pub finalized_block_root: ::subxt::utils::H256,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct CheckpointUpdate {
                    pub header: runtime_types::snowbridge_beacon_primitives::types::BeaconHeader,
                    pub current_sync_committee:
                        runtime_types::snowbridge_beacon_primitives::types::SyncCommittee,
                    pub current_sync_committee_branch: ::std::vec::Vec<::subxt::utils::H256>,
                    pub validators_root: ::subxt::utils::H256,
                    pub block_roots_root: ::subxt::utils::H256,
                    pub block_roots_branch: ::std::vec::Vec<::subxt::utils::H256>,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ExecutionHeaderUpdate { pub header : runtime_types :: snowbridge_beacon_primitives :: types :: BeaconHeader , pub ancestry_proof : :: core :: option :: Option < runtime_types :: snowbridge_beacon_primitives :: updates :: AncestryProof > , pub execution_header : runtime_types :: snowbridge_beacon_primitives :: types :: VersionedExecutionPayloadHeader , pub execution_branch : :: std :: vec :: Vec < :: subxt :: utils :: H256 > , }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct NextSyncCommitteeUpdate {
                    pub next_sync_committee:
                        runtime_types::snowbridge_beacon_primitives::types::SyncCommittee,
                    pub next_sync_committee_branch: ::std::vec::Vec<::subxt::utils::H256>,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Update { pub attested_header : runtime_types :: snowbridge_beacon_primitives :: types :: BeaconHeader , pub sync_aggregate : runtime_types :: snowbridge_beacon_primitives :: types :: SyncAggregate , pub signature_slot : :: core :: primitive :: u64 , pub next_sync_committee_update : :: core :: option :: Option < runtime_types :: snowbridge_beacon_primitives :: updates :: NextSyncCommitteeUpdate > , pub finalized_header : runtime_types :: snowbridge_beacon_primitives :: types :: BeaconHeader , pub finality_branch : :: std :: vec :: Vec < :: subxt :: utils :: H256 > , pub block_roots_root : :: subxt :: utils :: H256 , pub block_roots_branch : :: std :: vec :: Vec < :: subxt :: utils :: H256 > , }
            }
        }
        pub mod snowbridge_core {
            use super::runtime_types;
            pub mod inbound {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Log {
                    pub address: ::subxt::utils::H160,
                    pub topics: ::std::vec::Vec<::subxt::utils::H256>,
                    pub data: ::std::vec::Vec<::core::primitive::u8>,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Message {
                    pub event_log: runtime_types::snowbridge_core::inbound::Log,
                    pub proof: runtime_types::snowbridge_core::inbound::Proof,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Proof {
                    pub block_hash: ::subxt::utils::H256,
                    pub tx_index: ::core::primitive::u32,
                    pub data: (
                        ::std::vec::Vec<::std::vec::Vec<::core::primitive::u8>>,
                        ::std::vec::Vec<::std::vec::Vec<::core::primitive::u8>>,
                    ),
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum VerificationError {
                    #[codec(index = 0)]
                    HeaderNotFound,
                    #[codec(index = 1)]
                    LogNotFound,
                    #[codec(index = 2)]
                    InvalidLog,
                    #[codec(index = 3)]
                    InvalidProof,
                }
            }
            pub mod operating_mode {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum BasicOperatingMode {
                    #[codec(index = 0)]
                    Normal,
                    #[codec(index = 1)]
                    Halted,
                }
            }
            pub mod outbound {
                use super::runtime_types;
                pub mod v1 {
                    use super::runtime_types;
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        :: subxt :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: codec)]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub enum AgentExecuteCommand {
                        #[codec(index = 0)]
                        TransferToken {
                            token: ::subxt::utils::H160,
                            recipient: ::subxt::utils::H160,
                            amount: ::core::primitive::u128,
                        },
                    }
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        :: subxt :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: codec)]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub enum Command {
                        #[codec(index = 0)]
                        AgentExecute {
                            agent_id: ::subxt::utils::H256,
                            command:
                                runtime_types::snowbridge_core::outbound::v1::AgentExecuteCommand,
                        },
                        #[codec(index = 1)]
                        Upgrade {
                            impl_address: ::subxt::utils::H160,
                            impl_code_hash: ::subxt::utils::H256,
                            initializer: ::core::option::Option<
                                runtime_types::snowbridge_core::outbound::v1::Initializer,
                            >,
                        },
                        #[codec(index = 2)]
                        CreateAgent { agent_id: ::subxt::utils::H256 },
                        #[codec(index = 3)]
                        CreateChannel {
                            channel_id: runtime_types::snowbridge_core::ChannelId,
                            agent_id: ::subxt::utils::H256,
                            mode: runtime_types::snowbridge_core::outbound::v1::OperatingMode,
                        },
                        #[codec(index = 4)]
                        UpdateChannel {
                            channel_id: runtime_types::snowbridge_core::ChannelId,
                            mode: runtime_types::snowbridge_core::outbound::v1::OperatingMode,
                        },
                        #[codec(index = 5)]
                        SetOperatingMode {
                            mode: runtime_types::snowbridge_core::outbound::v1::OperatingMode,
                        },
                        #[codec(index = 6)]
                        TransferNativeFromAgent {
                            agent_id: ::subxt::utils::H256,
                            recipient: ::subxt::utils::H160,
                            amount: ::core::primitive::u128,
                        },
                        #[codec(index = 7)]
                        SetTokenTransferFees {
                            create_asset_xcm: ::core::primitive::u128,
                            transfer_asset_xcm: ::core::primitive::u128,
                            register_token: runtime_types::primitive_types::U256,
                        },
                        #[codec(index = 8)]
                        SetPricingParameters {
                            exchange_rate: runtime_types::snowbridge_core::pricing::UD60x18,
                            delivery_cost: ::core::primitive::u128,
                        },
                    }
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        :: subxt :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: codec)]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub struct Initializer {
                        pub params: ::std::vec::Vec<::core::primitive::u8>,
                        pub maximum_required_gas: ::core::primitive::u64,
                    }
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        :: subxt :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: codec)]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub struct Message {
                        pub id: ::core::option::Option<::subxt::utils::H256>,
                        pub channel_id: runtime_types::snowbridge_core::ChannelId,
                        pub command: runtime_types::snowbridge_core::outbound::v1::Command,
                    }
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        :: subxt :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: codec)]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub enum OperatingMode {
                        #[codec(index = 0)]
                        Normal,
                        #[codec(index = 1)]
                        RejectingOutboundMessages,
                    }
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum SendError {
                    #[codec(index = 0)]
                    MessageTooLarge,
                    #[codec(index = 1)]
                    Halted,
                    #[codec(index = 2)]
                    InvalidChannel,
                }
            }
            pub mod pricing {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct PricingParameters<_0> {
                    pub exchange_rate: runtime_types::sp_arithmetic::fixed_point::FixedU128,
                    pub rewards: runtime_types::snowbridge_core::pricing::Rewards<_0>,
                    pub fee_per_gas: runtime_types::primitive_types::U256,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Rewards<_0> {
                    pub local: _0,
                    pub remote: runtime_types::primitive_types::U256,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct UD60x18(pub runtime_types::primitive_types::U256);
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Channel {
                pub agent_id: ::subxt::utils::H256,
                pub para_id: runtime_types::polkadot_parachain_primitives::primitives::Id,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct ChannelId(pub [::core::primitive::u8; 32usize]);
        }
        pub mod snowbridge_milagro_bls {
            use super::runtime_types;
            pub mod keys {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct PublicKey {
                    pub point: runtime_types::snowbridge_amcl::bls381::ecp::ECP,
                }
            }
        }
        pub mod snowbridge_outbound_queue_merkle_tree {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct MerkleProof {
                pub root: ::subxt::utils::H256,
                pub proof: ::std::vec::Vec<::subxt::utils::H256>,
                pub number_of_leaves: ::core::primitive::u64,
                pub leaf_index: ::core::primitive::u64,
                pub leaf: ::subxt::utils::H256,
            }
        }
        pub mod snowbridge_pallet_ethereum_client {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
                pub enum Call {
                    # [codec (index = 0)] # [doc = "See [`Pallet::force_checkpoint`]."] force_checkpoint { update : :: std :: boxed :: Box < runtime_types :: snowbridge_beacon_primitives :: updates :: CheckpointUpdate > , } , # [codec (index = 1)] # [doc = "See [`Pallet::submit`]."] submit { update : :: std :: boxed :: Box < runtime_types :: snowbridge_beacon_primitives :: updates :: Update > , } , # [codec (index = 2)] # [doc = "See [`Pallet::submit_execution_header`]."] submit_execution_header { update : :: std :: boxed :: Box < runtime_types :: snowbridge_beacon_primitives :: updates :: ExecutionHeaderUpdate > , } , # [codec (index = 3)] # [doc = "See [`Pallet::set_operating_mode`]."] set_operating_mode { mode : runtime_types :: snowbridge_core :: operating_mode :: BasicOperatingMode , } , }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "The `Error` enum of this pallet."]
                pub enum Error {
                    #[codec(index = 0)]
                    SkippedSyncCommitteePeriod,
                    #[codec(index = 1)]
                    #[doc = "Attested header is older than latest finalized header."]
                    IrrelevantUpdate,
                    #[codec(index = 2)]
                    NotBootstrapped,
                    #[codec(index = 3)]
                    SyncCommitteeParticipantsNotSupermajority,
                    #[codec(index = 4)]
                    InvalidHeaderMerkleProof,
                    #[codec(index = 5)]
                    InvalidSyncCommitteeMerkleProof,
                    #[codec(index = 6)]
                    InvalidExecutionHeaderProof,
                    #[codec(index = 7)]
                    InvalidAncestryMerkleProof,
                    #[codec(index = 8)]
                    InvalidBlockRootsRootMerkleProof,
                    #[codec(index = 9)]
                    HeaderNotFinalized,
                    #[codec(index = 10)]
                    BlockBodyHashTreeRootFailed,
                    #[codec(index = 11)]
                    HeaderHashTreeRootFailed,
                    #[codec(index = 12)]
                    SyncCommitteeHashTreeRootFailed,
                    #[codec(index = 13)]
                    SigningRootHashTreeRootFailed,
                    #[codec(index = 14)]
                    ForkDataHashTreeRootFailed,
                    #[codec(index = 15)]
                    ExpectedFinalizedHeaderNotStored,
                    #[codec(index = 16)]
                    BLSPreparePublicKeysFailed,
                    #[codec(index = 17)]
                    BLSVerificationFailed(
                        runtime_types::snowbridge_beacon_primitives::bls::BlsError,
                    ),
                    #[codec(index = 18)]
                    InvalidUpdateSlot,
                    #[codec(index = 19)]
                    #[doc = "The given update is not in the expected period, or the given next sync committee does"]
                    #[doc = "not match the next sync committee in storage."]
                    InvalidSyncCommitteeUpdate,
                    #[codec(index = 20)]
                    ExecutionHeaderTooFarBehind,
                    #[codec(index = 21)]
                    ExecutionHeaderSkippedBlock,
                    #[codec(index = 22)]
                    Halted,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "The `Event` enum of this pallet"]
                pub enum Event {
                    #[codec(index = 0)]
                    BeaconHeaderImported {
                        block_hash: ::subxt::utils::H256,
                        slot: ::core::primitive::u64,
                    },
                    #[codec(index = 1)]
                    ExecutionHeaderImported {
                        block_hash: ::subxt::utils::H256,
                        block_number: ::core::primitive::u64,
                    },
                    #[codec(index = 2)]
                    SyncCommitteeUpdated { period: ::core::primitive::u64 },
                    #[codec(index = 3)]
                    #[doc = "Set OperatingMode"]
                    OperatingModeChanged {
                        mode: runtime_types::snowbridge_core::operating_mode::BasicOperatingMode,
                    },
                }
            }
        }
        pub mod snowbridge_pallet_inbound_queue {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "See [`Pallet::submit`]."]
                    submit {
                        message: runtime_types::snowbridge_core::inbound::Message,
                    },
                    #[codec(index = 1)]
                    #[doc = "See [`Pallet::set_operating_mode`]."]
                    set_operating_mode {
                        mode: runtime_types::snowbridge_core::operating_mode::BasicOperatingMode,
                    },
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "The `Error` enum of this pallet."]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "Message came from an invalid outbound channel on the Ethereum side."]
                    InvalidGateway,
                    #[codec(index = 1)]
                    #[doc = "Message has an invalid envelope."]
                    InvalidEnvelope,
                    #[codec(index = 2)]
                    #[doc = "Message has an unexpected nonce."]
                    InvalidNonce,
                    #[codec(index = 3)]
                    #[doc = "Message has an invalid payload."]
                    InvalidPayload,
                    #[codec(index = 4)]
                    #[doc = "Message channel is invalid"]
                    InvalidChannel,
                    #[codec(index = 5)]
                    #[doc = "The max nonce for the type has been reached"]
                    MaxNonceReached,
                    #[codec(index = 6)]
                    #[doc = "Cannot convert location"]
                    InvalidAccountConversion,
                    #[codec(index = 7)]
                    #[doc = "Pallet is halted"]
                    Halted,
                    #[codec(index = 8)]
                    #[doc = "Message verification error,"]
                    Verification(runtime_types::snowbridge_core::inbound::VerificationError),
                    #[codec(index = 9)]
                    #[doc = "XCMP send failure"]
                    Send(runtime_types::snowbridge_pallet_inbound_queue::pallet::SendError),
                    #[codec(index = 10)]
                    #[doc = "Message conversion error"]
                    ConvertMessage(
                        runtime_types::snowbridge_router_primitives::inbound::ConvertMessageError,
                    ),
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "The `Event` enum of this pallet"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "A message was received from Ethereum"]
                    MessageReceived {
                        channel_id: runtime_types::snowbridge_core::ChannelId,
                        nonce: ::core::primitive::u64,
                        message_id: [::core::primitive::u8; 32usize],
                        fee_burned: ::core::primitive::u128,
                    },
                    #[codec(index = 1)]
                    #[doc = "Set OperatingMode"]
                    OperatingModeChanged {
                        mode: runtime_types::snowbridge_core::operating_mode::BasicOperatingMode,
                    },
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum SendError {
                    #[codec(index = 0)]
                    NotApplicable,
                    #[codec(index = 1)]
                    NotRoutable,
                    #[codec(index = 2)]
                    Transport,
                    #[codec(index = 3)]
                    DestinationUnsupported,
                    #[codec(index = 4)]
                    ExceedsMaxMessageSize,
                    #[codec(index = 5)]
                    MissingArgument,
                    #[codec(index = 6)]
                    Fees,
                }
            }
        }
        pub mod snowbridge_pallet_outbound_queue {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "See [`Pallet::set_operating_mode`]."]
                    set_operating_mode {
                        mode: runtime_types::snowbridge_core::operating_mode::BasicOperatingMode,
                    },
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "The `Error` enum of this pallet."]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "The message is too large"]
                    MessageTooLarge,
                    #[codec(index = 1)]
                    #[doc = "The pallet is halted"]
                    Halted,
                    #[codec(index = 2)]
                    #[doc = "Invalid Channel"]
                    InvalidChannel,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "The `Event` enum of this pallet"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "Message has been queued and will be processed in the future"]
                    MessageQueued { id: ::subxt::utils::H256 },
                    #[codec(index = 1)]
                    #[doc = "Message will be committed at the end of current block. From now on, to track the"]
                    #[doc = "progress the message, use the `nonce` of `id`."]
                    MessageAccepted {
                        id: ::subxt::utils::H256,
                        nonce: ::core::primitive::u64,
                    },
                    #[codec(index = 2)]
                    #[doc = "Some messages have been committed"]
                    MessagesCommitted {
                        root: ::subxt::utils::H256,
                        count: ::core::primitive::u64,
                    },
                    #[codec(index = 3)]
                    #[doc = "Set OperatingMode"]
                    OperatingModeChanged {
                        mode: runtime_types::snowbridge_core::operating_mode::BasicOperatingMode,
                    },
                }
            }
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct CommittedMessage {
                    pub channel_id: runtime_types::snowbridge_core::ChannelId,
                    #[codec(compact)]
                    pub nonce: ::core::primitive::u64,
                    pub command: ::core::primitive::u8,
                    pub params: ::std::vec::Vec<::core::primitive::u8>,
                    #[codec(compact)]
                    pub max_dispatch_gas: ::core::primitive::u64,
                    #[codec(compact)]
                    pub max_fee_per_gas: ::core::primitive::u128,
                    #[codec(compact)]
                    pub reward: ::core::primitive::u128,
                    pub id: ::subxt::utils::H256,
                }
            }
        }
        pub mod snowbridge_pallet_system {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "See [`Pallet::upgrade`]."]
                    upgrade {
                        impl_address: ::subxt::utils::H160,
                        impl_code_hash: ::subxt::utils::H256,
                        initializer: ::core::option::Option<
                            runtime_types::snowbridge_core::outbound::v1::Initializer,
                        >,
                    },
                    #[codec(index = 1)]
                    #[doc = "See [`Pallet::set_operating_mode`]."]
                    set_operating_mode {
                        mode: runtime_types::snowbridge_core::outbound::v1::OperatingMode,
                    },
                    #[codec(index = 2)]
                    #[doc = "See [`Pallet::set_pricing_parameters`]."]
                    set_pricing_parameters {
                        params: runtime_types::snowbridge_core::pricing::PricingParameters<
                            ::core::primitive::u128,
                        >,
                    },
                    #[codec(index = 3)]
                    #[doc = "See [`Pallet::create_agent`]."]
                    create_agent,
                    #[codec(index = 4)]
                    #[doc = "See [`Pallet::create_channel`]."]
                    create_channel {
                        mode: runtime_types::snowbridge_core::outbound::v1::OperatingMode,
                    },
                    #[codec(index = 5)]
                    #[doc = "See [`Pallet::update_channel`]."]
                    update_channel {
                        mode: runtime_types::snowbridge_core::outbound::v1::OperatingMode,
                    },
                    #[codec(index = 6)]
                    #[doc = "See [`Pallet::force_update_channel`]."]
                    force_update_channel {
                        channel_id: runtime_types::snowbridge_core::ChannelId,
                        mode: runtime_types::snowbridge_core::outbound::v1::OperatingMode,
                    },
                    #[codec(index = 7)]
                    #[doc = "See [`Pallet::transfer_native_from_agent`]."]
                    transfer_native_from_agent {
                        recipient: ::subxt::utils::H160,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 8)]
                    #[doc = "See [`Pallet::force_transfer_native_from_agent`]."]
                    force_transfer_native_from_agent {
                        location: ::std::boxed::Box<runtime_types::xcm::VersionedLocation>,
                        recipient: ::subxt::utils::H160,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 9)]
                    #[doc = "See [`Pallet::set_token_transfer_fees`]."]
                    set_token_transfer_fees {
                        create_asset_xcm: ::core::primitive::u128,
                        transfer_asset_xcm: ::core::primitive::u128,
                        register_token: runtime_types::primitive_types::U256,
                    },
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "The `Error` enum of this pallet."]
                pub enum Error {
                    #[codec(index = 0)]
                    LocationConversionFailed,
                    #[codec(index = 1)]
                    AgentAlreadyCreated,
                    #[codec(index = 2)]
                    NoAgent,
                    #[codec(index = 3)]
                    ChannelAlreadyCreated,
                    #[codec(index = 4)]
                    NoChannel,
                    #[codec(index = 5)]
                    UnsupportedLocationVersion,
                    #[codec(index = 6)]
                    InvalidLocation,
                    #[codec(index = 7)]
                    Send(runtime_types::snowbridge_core::outbound::SendError),
                    #[codec(index = 8)]
                    InvalidTokenTransferFees,
                    #[codec(index = 9)]
                    InvalidPricingParameters,
                    #[codec(index = 10)]
                    InvalidUpgradeParameters,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "The `Event` enum of this pallet"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "An Upgrade message was sent to the Gateway"]
                    Upgrade {
                        impl_address: ::subxt::utils::H160,
                        impl_code_hash: ::subxt::utils::H256,
                        initializer_params_hash: ::core::option::Option<::subxt::utils::H256>,
                    },
                    #[codec(index = 1)]
                    #[doc = "An CreateAgent message was sent to the Gateway"]
                    CreateAgent {
                        location:
                            ::std::boxed::Box<runtime_types::staging_xcm::v4::location::Location>,
                        agent_id: ::subxt::utils::H256,
                    },
                    #[codec(index = 2)]
                    #[doc = "An CreateChannel message was sent to the Gateway"]
                    CreateChannel {
                        channel_id: runtime_types::snowbridge_core::ChannelId,
                        agent_id: ::subxt::utils::H256,
                    },
                    #[codec(index = 3)]
                    #[doc = "An UpdateChannel message was sent to the Gateway"]
                    UpdateChannel {
                        channel_id: runtime_types::snowbridge_core::ChannelId,
                        mode: runtime_types::snowbridge_core::outbound::v1::OperatingMode,
                    },
                    #[codec(index = 4)]
                    #[doc = "An SetOperatingMode message was sent to the Gateway"]
                    SetOperatingMode {
                        mode: runtime_types::snowbridge_core::outbound::v1::OperatingMode,
                    },
                    #[codec(index = 5)]
                    #[doc = "An TransferNativeFromAgent message was sent to the Gateway"]
                    TransferNativeFromAgent {
                        agent_id: ::subxt::utils::H256,
                        recipient: ::subxt::utils::H160,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 6)]
                    #[doc = "A SetTokenTransferFees message was sent to the Gateway"]
                    SetTokenTransferFees {
                        create_asset_xcm: ::core::primitive::u128,
                        transfer_asset_xcm: ::core::primitive::u128,
                        register_token: runtime_types::primitive_types::U256,
                    },
                    #[codec(index = 7)]
                    PricingParametersChanged {
                        params: runtime_types::snowbridge_core::pricing::PricingParameters<
                            ::core::primitive::u128,
                        >,
                    },
                }
            }
        }
        pub mod snowbridge_router_primitives {
            use super::runtime_types;
            pub mod inbound {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum ConvertMessageError {
                    #[codec(index = 0)]
                    UnsupportedVersion,
                }
            }
        }
        pub mod sp_arithmetic {
            use super::runtime_types;
            pub mod fixed_point {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: CompactAs,
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct FixedU128(pub ::core::primitive::u128);
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub enum ArithmeticError {
                #[codec(index = 0)]
                Underflow,
                #[codec(index = 1)]
                Overflow,
                #[codec(index = 2)]
                DivisionByZero,
            }
        }
        pub mod sp_consensus_aura {
            use super::runtime_types;
            pub mod sr25519 {
                use super::runtime_types;
                pub mod app_sr25519 {
                    use super::runtime_types;
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        :: subxt :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: codec)]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub struct Public(pub runtime_types::sp_core::sr25519::Public);
                }
            }
        }
        pub mod sp_consensus_grandpa {
            use super::runtime_types;
            pub mod app {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Public(pub runtime_types::sp_core::ed25519::Public);
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Signature(pub runtime_types::sp_core::ed25519::Signature);
            }
        }
        pub mod sp_consensus_slots {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: CompactAs,
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Slot(pub ::core::primitive::u64);
            #[derive(
                :: subxt :: ext :: codec :: CompactAs,
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct SlotDuration(pub ::core::primitive::u64);
        }
        pub mod sp_core {
            use super::runtime_types;
            pub mod crypto {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct KeyTypeId(pub [::core::primitive::u8; 4usize]);
            }
            pub mod ecdsa {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Signature(pub [::core::primitive::u8; 65usize]);
            }
            pub mod ed25519 {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Public(pub [::core::primitive::u8; 32usize]);
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Signature(pub [::core::primitive::u8; 64usize]);
            }
            pub mod sr25519 {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Public(pub [::core::primitive::u8; 32usize]);
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Signature(pub [::core::primitive::u8; 64usize]);
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct OpaqueMetadata(pub ::std::vec::Vec<::core::primitive::u8>);
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub enum Void {}
        }
        pub mod sp_inherents {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct CheckInherentsResult {
                pub okay: ::core::primitive::bool,
                pub fatal_error: ::core::primitive::bool,
                pub errors: runtime_types::sp_inherents::InherentData,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct InherentData {
                pub data: ::subxt::utils::KeyedVec<
                    [::core::primitive::u8; 8usize],
                    ::std::vec::Vec<::core::primitive::u8>,
                >,
            }
        }
        pub mod sp_runtime {
            use super::runtime_types;
            pub mod generic {
                use super::runtime_types;
                pub mod block {
                    use super::runtime_types;
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        :: subxt :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: codec)]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub struct Block<_0, _1> {
                        pub header: _0,
                        pub extrinsics: ::std::vec::Vec<_1>,
                    }
                }
                pub mod digest {
                    use super::runtime_types;
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        :: subxt :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: codec)]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub struct Digest {
                        pub logs:
                            ::std::vec::Vec<runtime_types::sp_runtime::generic::digest::DigestItem>,
                    }
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        :: subxt :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: codec)]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub enum DigestItem {
                        #[codec(index = 6)]
                        PreRuntime(
                            [::core::primitive::u8; 4usize],
                            ::std::vec::Vec<::core::primitive::u8>,
                        ),
                        #[codec(index = 4)]
                        Consensus(
                            [::core::primitive::u8; 4usize],
                            ::std::vec::Vec<::core::primitive::u8>,
                        ),
                        #[codec(index = 5)]
                        Seal(
                            [::core::primitive::u8; 4usize],
                            ::std::vec::Vec<::core::primitive::u8>,
                        ),
                        #[codec(index = 0)]
                        Other(::std::vec::Vec<::core::primitive::u8>),
                        #[codec(index = 8)]
                        RuntimeEnvironmentUpdated,
                    }
                }
                pub mod era {
                    use super::runtime_types;
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        :: subxt :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: codec)]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub enum Era {
                        #[codec(index = 0)]
                        Immortal,
                        #[codec(index = 1)]
                        Mortal1(::core::primitive::u8),
                        #[codec(index = 2)]
                        Mortal2(::core::primitive::u8),
                        #[codec(index = 3)]
                        Mortal3(::core::primitive::u8),
                        #[codec(index = 4)]
                        Mortal4(::core::primitive::u8),
                        #[codec(index = 5)]
                        Mortal5(::core::primitive::u8),
                        #[codec(index = 6)]
                        Mortal6(::core::primitive::u8),
                        #[codec(index = 7)]
                        Mortal7(::core::primitive::u8),
                        #[codec(index = 8)]
                        Mortal8(::core::primitive::u8),
                        #[codec(index = 9)]
                        Mortal9(::core::primitive::u8),
                        #[codec(index = 10)]
                        Mortal10(::core::primitive::u8),
                        #[codec(index = 11)]
                        Mortal11(::core::primitive::u8),
                        #[codec(index = 12)]
                        Mortal12(::core::primitive::u8),
                        #[codec(index = 13)]
                        Mortal13(::core::primitive::u8),
                        #[codec(index = 14)]
                        Mortal14(::core::primitive::u8),
                        #[codec(index = 15)]
                        Mortal15(::core::primitive::u8),
                        #[codec(index = 16)]
                        Mortal16(::core::primitive::u8),
                        #[codec(index = 17)]
                        Mortal17(::core::primitive::u8),
                        #[codec(index = 18)]
                        Mortal18(::core::primitive::u8),
                        #[codec(index = 19)]
                        Mortal19(::core::primitive::u8),
                        #[codec(index = 20)]
                        Mortal20(::core::primitive::u8),
                        #[codec(index = 21)]
                        Mortal21(::core::primitive::u8),
                        #[codec(index = 22)]
                        Mortal22(::core::primitive::u8),
                        #[codec(index = 23)]
                        Mortal23(::core::primitive::u8),
                        #[codec(index = 24)]
                        Mortal24(::core::primitive::u8),
                        #[codec(index = 25)]
                        Mortal25(::core::primitive::u8),
                        #[codec(index = 26)]
                        Mortal26(::core::primitive::u8),
                        #[codec(index = 27)]
                        Mortal27(::core::primitive::u8),
                        #[codec(index = 28)]
                        Mortal28(::core::primitive::u8),
                        #[codec(index = 29)]
                        Mortal29(::core::primitive::u8),
                        #[codec(index = 30)]
                        Mortal30(::core::primitive::u8),
                        #[codec(index = 31)]
                        Mortal31(::core::primitive::u8),
                        #[codec(index = 32)]
                        Mortal32(::core::primitive::u8),
                        #[codec(index = 33)]
                        Mortal33(::core::primitive::u8),
                        #[codec(index = 34)]
                        Mortal34(::core::primitive::u8),
                        #[codec(index = 35)]
                        Mortal35(::core::primitive::u8),
                        #[codec(index = 36)]
                        Mortal36(::core::primitive::u8),
                        #[codec(index = 37)]
                        Mortal37(::core::primitive::u8),
                        #[codec(index = 38)]
                        Mortal38(::core::primitive::u8),
                        #[codec(index = 39)]
                        Mortal39(::core::primitive::u8),
                        #[codec(index = 40)]
                        Mortal40(::core::primitive::u8),
                        #[codec(index = 41)]
                        Mortal41(::core::primitive::u8),
                        #[codec(index = 42)]
                        Mortal42(::core::primitive::u8),
                        #[codec(index = 43)]
                        Mortal43(::core::primitive::u8),
                        #[codec(index = 44)]
                        Mortal44(::core::primitive::u8),
                        #[codec(index = 45)]
                        Mortal45(::core::primitive::u8),
                        #[codec(index = 46)]
                        Mortal46(::core::primitive::u8),
                        #[codec(index = 47)]
                        Mortal47(::core::primitive::u8),
                        #[codec(index = 48)]
                        Mortal48(::core::primitive::u8),
                        #[codec(index = 49)]
                        Mortal49(::core::primitive::u8),
                        #[codec(index = 50)]
                        Mortal50(::core::primitive::u8),
                        #[codec(index = 51)]
                        Mortal51(::core::primitive::u8),
                        #[codec(index = 52)]
                        Mortal52(::core::primitive::u8),
                        #[codec(index = 53)]
                        Mortal53(::core::primitive::u8),
                        #[codec(index = 54)]
                        Mortal54(::core::primitive::u8),
                        #[codec(index = 55)]
                        Mortal55(::core::primitive::u8),
                        #[codec(index = 56)]
                        Mortal56(::core::primitive::u8),
                        #[codec(index = 57)]
                        Mortal57(::core::primitive::u8),
                        #[codec(index = 58)]
                        Mortal58(::core::primitive::u8),
                        #[codec(index = 59)]
                        Mortal59(::core::primitive::u8),
                        #[codec(index = 60)]
                        Mortal60(::core::primitive::u8),
                        #[codec(index = 61)]
                        Mortal61(::core::primitive::u8),
                        #[codec(index = 62)]
                        Mortal62(::core::primitive::u8),
                        #[codec(index = 63)]
                        Mortal63(::core::primitive::u8),
                        #[codec(index = 64)]
                        Mortal64(::core::primitive::u8),
                        #[codec(index = 65)]
                        Mortal65(::core::primitive::u8),
                        #[codec(index = 66)]
                        Mortal66(::core::primitive::u8),
                        #[codec(index = 67)]
                        Mortal67(::core::primitive::u8),
                        #[codec(index = 68)]
                        Mortal68(::core::primitive::u8),
                        #[codec(index = 69)]
                        Mortal69(::core::primitive::u8),
                        #[codec(index = 70)]
                        Mortal70(::core::primitive::u8),
                        #[codec(index = 71)]
                        Mortal71(::core::primitive::u8),
                        #[codec(index = 72)]
                        Mortal72(::core::primitive::u8),
                        #[codec(index = 73)]
                        Mortal73(::core::primitive::u8),
                        #[codec(index = 74)]
                        Mortal74(::core::primitive::u8),
                        #[codec(index = 75)]
                        Mortal75(::core::primitive::u8),
                        #[codec(index = 76)]
                        Mortal76(::core::primitive::u8),
                        #[codec(index = 77)]
                        Mortal77(::core::primitive::u8),
                        #[codec(index = 78)]
                        Mortal78(::core::primitive::u8),
                        #[codec(index = 79)]
                        Mortal79(::core::primitive::u8),
                        #[codec(index = 80)]
                        Mortal80(::core::primitive::u8),
                        #[codec(index = 81)]
                        Mortal81(::core::primitive::u8),
                        #[codec(index = 82)]
                        Mortal82(::core::primitive::u8),
                        #[codec(index = 83)]
                        Mortal83(::core::primitive::u8),
                        #[codec(index = 84)]
                        Mortal84(::core::primitive::u8),
                        #[codec(index = 85)]
                        Mortal85(::core::primitive::u8),
                        #[codec(index = 86)]
                        Mortal86(::core::primitive::u8),
                        #[codec(index = 87)]
                        Mortal87(::core::primitive::u8),
                        #[codec(index = 88)]
                        Mortal88(::core::primitive::u8),
                        #[codec(index = 89)]
                        Mortal89(::core::primitive::u8),
                        #[codec(index = 90)]
                        Mortal90(::core::primitive::u8),
                        #[codec(index = 91)]
                        Mortal91(::core::primitive::u8),
                        #[codec(index = 92)]
                        Mortal92(::core::primitive::u8),
                        #[codec(index = 93)]
                        Mortal93(::core::primitive::u8),
                        #[codec(index = 94)]
                        Mortal94(::core::primitive::u8),
                        #[codec(index = 95)]
                        Mortal95(::core::primitive::u8),
                        #[codec(index = 96)]
                        Mortal96(::core::primitive::u8),
                        #[codec(index = 97)]
                        Mortal97(::core::primitive::u8),
                        #[codec(index = 98)]
                        Mortal98(::core::primitive::u8),
                        #[codec(index = 99)]
                        Mortal99(::core::primitive::u8),
                        #[codec(index = 100)]
                        Mortal100(::core::primitive::u8),
                        #[codec(index = 101)]
                        Mortal101(::core::primitive::u8),
                        #[codec(index = 102)]
                        Mortal102(::core::primitive::u8),
                        #[codec(index = 103)]
                        Mortal103(::core::primitive::u8),
                        #[codec(index = 104)]
                        Mortal104(::core::primitive::u8),
                        #[codec(index = 105)]
                        Mortal105(::core::primitive::u8),
                        #[codec(index = 106)]
                        Mortal106(::core::primitive::u8),
                        #[codec(index = 107)]
                        Mortal107(::core::primitive::u8),
                        #[codec(index = 108)]
                        Mortal108(::core::primitive::u8),
                        #[codec(index = 109)]
                        Mortal109(::core::primitive::u8),
                        #[codec(index = 110)]
                        Mortal110(::core::primitive::u8),
                        #[codec(index = 111)]
                        Mortal111(::core::primitive::u8),
                        #[codec(index = 112)]
                        Mortal112(::core::primitive::u8),
                        #[codec(index = 113)]
                        Mortal113(::core::primitive::u8),
                        #[codec(index = 114)]
                        Mortal114(::core::primitive::u8),
                        #[codec(index = 115)]
                        Mortal115(::core::primitive::u8),
                        #[codec(index = 116)]
                        Mortal116(::core::primitive::u8),
                        #[codec(index = 117)]
                        Mortal117(::core::primitive::u8),
                        #[codec(index = 118)]
                        Mortal118(::core::primitive::u8),
                        #[codec(index = 119)]
                        Mortal119(::core::primitive::u8),
                        #[codec(index = 120)]
                        Mortal120(::core::primitive::u8),
                        #[codec(index = 121)]
                        Mortal121(::core::primitive::u8),
                        #[codec(index = 122)]
                        Mortal122(::core::primitive::u8),
                        #[codec(index = 123)]
                        Mortal123(::core::primitive::u8),
                        #[codec(index = 124)]
                        Mortal124(::core::primitive::u8),
                        #[codec(index = 125)]
                        Mortal125(::core::primitive::u8),
                        #[codec(index = 126)]
                        Mortal126(::core::primitive::u8),
                        #[codec(index = 127)]
                        Mortal127(::core::primitive::u8),
                        #[codec(index = 128)]
                        Mortal128(::core::primitive::u8),
                        #[codec(index = 129)]
                        Mortal129(::core::primitive::u8),
                        #[codec(index = 130)]
                        Mortal130(::core::primitive::u8),
                        #[codec(index = 131)]
                        Mortal131(::core::primitive::u8),
                        #[codec(index = 132)]
                        Mortal132(::core::primitive::u8),
                        #[codec(index = 133)]
                        Mortal133(::core::primitive::u8),
                        #[codec(index = 134)]
                        Mortal134(::core::primitive::u8),
                        #[codec(index = 135)]
                        Mortal135(::core::primitive::u8),
                        #[codec(index = 136)]
                        Mortal136(::core::primitive::u8),
                        #[codec(index = 137)]
                        Mortal137(::core::primitive::u8),
                        #[codec(index = 138)]
                        Mortal138(::core::primitive::u8),
                        #[codec(index = 139)]
                        Mortal139(::core::primitive::u8),
                        #[codec(index = 140)]
                        Mortal140(::core::primitive::u8),
                        #[codec(index = 141)]
                        Mortal141(::core::primitive::u8),
                        #[codec(index = 142)]
                        Mortal142(::core::primitive::u8),
                        #[codec(index = 143)]
                        Mortal143(::core::primitive::u8),
                        #[codec(index = 144)]
                        Mortal144(::core::primitive::u8),
                        #[codec(index = 145)]
                        Mortal145(::core::primitive::u8),
                        #[codec(index = 146)]
                        Mortal146(::core::primitive::u8),
                        #[codec(index = 147)]
                        Mortal147(::core::primitive::u8),
                        #[codec(index = 148)]
                        Mortal148(::core::primitive::u8),
                        #[codec(index = 149)]
                        Mortal149(::core::primitive::u8),
                        #[codec(index = 150)]
                        Mortal150(::core::primitive::u8),
                        #[codec(index = 151)]
                        Mortal151(::core::primitive::u8),
                        #[codec(index = 152)]
                        Mortal152(::core::primitive::u8),
                        #[codec(index = 153)]
                        Mortal153(::core::primitive::u8),
                        #[codec(index = 154)]
                        Mortal154(::core::primitive::u8),
                        #[codec(index = 155)]
                        Mortal155(::core::primitive::u8),
                        #[codec(index = 156)]
                        Mortal156(::core::primitive::u8),
                        #[codec(index = 157)]
                        Mortal157(::core::primitive::u8),
                        #[codec(index = 158)]
                        Mortal158(::core::primitive::u8),
                        #[codec(index = 159)]
                        Mortal159(::core::primitive::u8),
                        #[codec(index = 160)]
                        Mortal160(::core::primitive::u8),
                        #[codec(index = 161)]
                        Mortal161(::core::primitive::u8),
                        #[codec(index = 162)]
                        Mortal162(::core::primitive::u8),
                        #[codec(index = 163)]
                        Mortal163(::core::primitive::u8),
                        #[codec(index = 164)]
                        Mortal164(::core::primitive::u8),
                        #[codec(index = 165)]
                        Mortal165(::core::primitive::u8),
                        #[codec(index = 166)]
                        Mortal166(::core::primitive::u8),
                        #[codec(index = 167)]
                        Mortal167(::core::primitive::u8),
                        #[codec(index = 168)]
                        Mortal168(::core::primitive::u8),
                        #[codec(index = 169)]
                        Mortal169(::core::primitive::u8),
                        #[codec(index = 170)]
                        Mortal170(::core::primitive::u8),
                        #[codec(index = 171)]
                        Mortal171(::core::primitive::u8),
                        #[codec(index = 172)]
                        Mortal172(::core::primitive::u8),
                        #[codec(index = 173)]
                        Mortal173(::core::primitive::u8),
                        #[codec(index = 174)]
                        Mortal174(::core::primitive::u8),
                        #[codec(index = 175)]
                        Mortal175(::core::primitive::u8),
                        #[codec(index = 176)]
                        Mortal176(::core::primitive::u8),
                        #[codec(index = 177)]
                        Mortal177(::core::primitive::u8),
                        #[codec(index = 178)]
                        Mortal178(::core::primitive::u8),
                        #[codec(index = 179)]
                        Mortal179(::core::primitive::u8),
                        #[codec(index = 180)]
                        Mortal180(::core::primitive::u8),
                        #[codec(index = 181)]
                        Mortal181(::core::primitive::u8),
                        #[codec(index = 182)]
                        Mortal182(::core::primitive::u8),
                        #[codec(index = 183)]
                        Mortal183(::core::primitive::u8),
                        #[codec(index = 184)]
                        Mortal184(::core::primitive::u8),
                        #[codec(index = 185)]
                        Mortal185(::core::primitive::u8),
                        #[codec(index = 186)]
                        Mortal186(::core::primitive::u8),
                        #[codec(index = 187)]
                        Mortal187(::core::primitive::u8),
                        #[codec(index = 188)]
                        Mortal188(::core::primitive::u8),
                        #[codec(index = 189)]
                        Mortal189(::core::primitive::u8),
                        #[codec(index = 190)]
                        Mortal190(::core::primitive::u8),
                        #[codec(index = 191)]
                        Mortal191(::core::primitive::u8),
                        #[codec(index = 192)]
                        Mortal192(::core::primitive::u8),
                        #[codec(index = 193)]
                        Mortal193(::core::primitive::u8),
                        #[codec(index = 194)]
                        Mortal194(::core::primitive::u8),
                        #[codec(index = 195)]
                        Mortal195(::core::primitive::u8),
                        #[codec(index = 196)]
                        Mortal196(::core::primitive::u8),
                        #[codec(index = 197)]
                        Mortal197(::core::primitive::u8),
                        #[codec(index = 198)]
                        Mortal198(::core::primitive::u8),
                        #[codec(index = 199)]
                        Mortal199(::core::primitive::u8),
                        #[codec(index = 200)]
                        Mortal200(::core::primitive::u8),
                        #[codec(index = 201)]
                        Mortal201(::core::primitive::u8),
                        #[codec(index = 202)]
                        Mortal202(::core::primitive::u8),
                        #[codec(index = 203)]
                        Mortal203(::core::primitive::u8),
                        #[codec(index = 204)]
                        Mortal204(::core::primitive::u8),
                        #[codec(index = 205)]
                        Mortal205(::core::primitive::u8),
                        #[codec(index = 206)]
                        Mortal206(::core::primitive::u8),
                        #[codec(index = 207)]
                        Mortal207(::core::primitive::u8),
                        #[codec(index = 208)]
                        Mortal208(::core::primitive::u8),
                        #[codec(index = 209)]
                        Mortal209(::core::primitive::u8),
                        #[codec(index = 210)]
                        Mortal210(::core::primitive::u8),
                        #[codec(index = 211)]
                        Mortal211(::core::primitive::u8),
                        #[codec(index = 212)]
                        Mortal212(::core::primitive::u8),
                        #[codec(index = 213)]
                        Mortal213(::core::primitive::u8),
                        #[codec(index = 214)]
                        Mortal214(::core::primitive::u8),
                        #[codec(index = 215)]
                        Mortal215(::core::primitive::u8),
                        #[codec(index = 216)]
                        Mortal216(::core::primitive::u8),
                        #[codec(index = 217)]
                        Mortal217(::core::primitive::u8),
                        #[codec(index = 218)]
                        Mortal218(::core::primitive::u8),
                        #[codec(index = 219)]
                        Mortal219(::core::primitive::u8),
                        #[codec(index = 220)]
                        Mortal220(::core::primitive::u8),
                        #[codec(index = 221)]
                        Mortal221(::core::primitive::u8),
                        #[codec(index = 222)]
                        Mortal222(::core::primitive::u8),
                        #[codec(index = 223)]
                        Mortal223(::core::primitive::u8),
                        #[codec(index = 224)]
                        Mortal224(::core::primitive::u8),
                        #[codec(index = 225)]
                        Mortal225(::core::primitive::u8),
                        #[codec(index = 226)]
                        Mortal226(::core::primitive::u8),
                        #[codec(index = 227)]
                        Mortal227(::core::primitive::u8),
                        #[codec(index = 228)]
                        Mortal228(::core::primitive::u8),
                        #[codec(index = 229)]
                        Mortal229(::core::primitive::u8),
                        #[codec(index = 230)]
                        Mortal230(::core::primitive::u8),
                        #[codec(index = 231)]
                        Mortal231(::core::primitive::u8),
                        #[codec(index = 232)]
                        Mortal232(::core::primitive::u8),
                        #[codec(index = 233)]
                        Mortal233(::core::primitive::u8),
                        #[codec(index = 234)]
                        Mortal234(::core::primitive::u8),
                        #[codec(index = 235)]
                        Mortal235(::core::primitive::u8),
                        #[codec(index = 236)]
                        Mortal236(::core::primitive::u8),
                        #[codec(index = 237)]
                        Mortal237(::core::primitive::u8),
                        #[codec(index = 238)]
                        Mortal238(::core::primitive::u8),
                        #[codec(index = 239)]
                        Mortal239(::core::primitive::u8),
                        #[codec(index = 240)]
                        Mortal240(::core::primitive::u8),
                        #[codec(index = 241)]
                        Mortal241(::core::primitive::u8),
                        #[codec(index = 242)]
                        Mortal242(::core::primitive::u8),
                        #[codec(index = 243)]
                        Mortal243(::core::primitive::u8),
                        #[codec(index = 244)]
                        Mortal244(::core::primitive::u8),
                        #[codec(index = 245)]
                        Mortal245(::core::primitive::u8),
                        #[codec(index = 246)]
                        Mortal246(::core::primitive::u8),
                        #[codec(index = 247)]
                        Mortal247(::core::primitive::u8),
                        #[codec(index = 248)]
                        Mortal248(::core::primitive::u8),
                        #[codec(index = 249)]
                        Mortal249(::core::primitive::u8),
                        #[codec(index = 250)]
                        Mortal250(::core::primitive::u8),
                        #[codec(index = 251)]
                        Mortal251(::core::primitive::u8),
                        #[codec(index = 252)]
                        Mortal252(::core::primitive::u8),
                        #[codec(index = 253)]
                        Mortal253(::core::primitive::u8),
                        #[codec(index = 254)]
                        Mortal254(::core::primitive::u8),
                        #[codec(index = 255)]
                        Mortal255(::core::primitive::u8),
                    }
                }
                pub mod header {
                    use super::runtime_types;
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        :: subxt :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: codec)]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub struct Header<_0> {
                        pub parent_hash: ::subxt::utils::H256,
                        #[codec(compact)]
                        pub number: _0,
                        pub state_root: ::subxt::utils::H256,
                        pub extrinsics_root: ::subxt::utils::H256,
                        pub digest: runtime_types::sp_runtime::generic::digest::Digest,
                    }
                }
            }
            pub mod transaction_validity {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum InvalidTransaction {
                    #[codec(index = 0)]
                    Call,
                    #[codec(index = 1)]
                    Payment,
                    #[codec(index = 2)]
                    Future,
                    #[codec(index = 3)]
                    Stale,
                    #[codec(index = 4)]
                    BadProof,
                    #[codec(index = 5)]
                    AncientBirthBlock,
                    #[codec(index = 6)]
                    ExhaustsResources,
                    #[codec(index = 7)]
                    Custom(::core::primitive::u8),
                    #[codec(index = 8)]
                    BadMandatory,
                    #[codec(index = 9)]
                    MandatoryValidation,
                    #[codec(index = 10)]
                    BadSigner,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum TransactionSource {
                    #[codec(index = 0)]
                    InBlock,
                    #[codec(index = 1)]
                    Local,
                    #[codec(index = 2)]
                    External,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum TransactionValidityError {
                    #[codec(index = 0)]
                    Invalid(runtime_types::sp_runtime::transaction_validity::InvalidTransaction),
                    #[codec(index = 1)]
                    Unknown(runtime_types::sp_runtime::transaction_validity::UnknownTransaction),
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum UnknownTransaction {
                    #[codec(index = 0)]
                    CannotLookup,
                    #[codec(index = 1)]
                    NoUnsignedValidator,
                    #[codec(index = 2)]
                    Custom(::core::primitive::u8),
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ValidTransaction {
                    pub priority: ::core::primitive::u64,
                    pub requires: ::std::vec::Vec<::std::vec::Vec<::core::primitive::u8>>,
                    pub provides: ::std::vec::Vec<::std::vec::Vec<::core::primitive::u8>>,
                    pub longevity: ::core::primitive::u64,
                    pub propagate: ::core::primitive::bool,
                }
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub enum DispatchError {
                #[codec(index = 0)]
                Other,
                #[codec(index = 1)]
                CannotLookup,
                #[codec(index = 2)]
                BadOrigin,
                #[codec(index = 3)]
                Module(runtime_types::sp_runtime::ModuleError),
                #[codec(index = 4)]
                ConsumerRemaining,
                #[codec(index = 5)]
                NoProviders,
                #[codec(index = 6)]
                TooManyConsumers,
                #[codec(index = 7)]
                Token(runtime_types::sp_runtime::TokenError),
                #[codec(index = 8)]
                Arithmetic(runtime_types::sp_arithmetic::ArithmeticError),
                #[codec(index = 9)]
                Transactional(runtime_types::sp_runtime::TransactionalError),
                #[codec(index = 10)]
                Exhausted,
                #[codec(index = 11)]
                Corruption,
                #[codec(index = 12)]
                Unavailable,
                #[codec(index = 13)]
                RootNotAllowed,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct ModuleError {
                pub index: ::core::primitive::u8,
                pub error: [::core::primitive::u8; 4usize],
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub enum MultiSignature {
                #[codec(index = 0)]
                Ed25519(runtime_types::sp_core::ed25519::Signature),
                #[codec(index = 1)]
                Sr25519(runtime_types::sp_core::sr25519::Signature),
                #[codec(index = 2)]
                Ecdsa(runtime_types::sp_core::ecdsa::Signature),
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub enum TokenError {
                #[codec(index = 0)]
                FundsUnavailable,
                #[codec(index = 1)]
                OnlyProvider,
                #[codec(index = 2)]
                BelowMinimum,
                #[codec(index = 3)]
                CannotCreate,
                #[codec(index = 4)]
                UnknownAsset,
                #[codec(index = 5)]
                Frozen,
                #[codec(index = 6)]
                Unsupported,
                #[codec(index = 7)]
                CannotCreateHold,
                #[codec(index = 8)]
                NotExpendable,
                #[codec(index = 9)]
                Blocked,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub enum TransactionalError {
                #[codec(index = 0)]
                LimitReached,
                #[codec(index = 1)]
                NoLayer,
            }
        }
        pub mod sp_trie {
            use super::runtime_types;
            pub mod storage_proof {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct StorageProof {
                    pub trie_nodes: ::std::vec::Vec<::std::vec::Vec<::core::primitive::u8>>,
                }
            }
        }
        pub mod sp_version {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct RuntimeVersion {
                pub spec_name: ::std::string::String,
                pub impl_name: ::std::string::String,
                pub authoring_version: ::core::primitive::u32,
                pub spec_version: ::core::primitive::u32,
                pub impl_version: ::core::primitive::u32,
                pub apis:
                    ::std::vec::Vec<([::core::primitive::u8; 8usize], ::core::primitive::u32)>,
                pub transaction_version: ::core::primitive::u32,
                pub state_version: ::core::primitive::u8,
            }
        }
        pub mod sp_weights {
            use super::runtime_types;
            pub mod weight_v2 {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Weight {
                    #[codec(compact)]
                    pub ref_time: ::core::primitive::u64,
                    #[codec(compact)]
                    pub proof_size: ::core::primitive::u64,
                }
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct RuntimeDbWeight {
                pub read: ::core::primitive::u64,
                pub write: ::core::primitive::u64,
            }
        }
        pub mod staging_parachain_info {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
                pub enum Call {}
            }
        }
        pub mod staging_xcm {
            use super::runtime_types;
            pub mod v3 {
                use super::runtime_types;
                pub mod multilocation {
                    use super::runtime_types;
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        :: subxt :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: codec)]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub struct MultiLocation {
                        pub parents: ::core::primitive::u8,
                        pub interior: runtime_types::xcm::v3::junctions::Junctions,
                    }
                }
            }
            pub mod v4 {
                use super::runtime_types;
                pub mod asset {
                    use super::runtime_types;
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        :: subxt :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: codec)]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub struct Asset {
                        pub id: runtime_types::staging_xcm::v4::asset::AssetId,
                        pub fun: runtime_types::staging_xcm::v4::asset::Fungibility,
                    }
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        :: subxt :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: codec)]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub enum AssetFilter {
                        #[codec(index = 0)]
                        Definite(runtime_types::staging_xcm::v4::asset::Assets),
                        #[codec(index = 1)]
                        Wild(runtime_types::staging_xcm::v4::asset::WildAsset),
                    }
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        :: subxt :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: codec)]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub struct AssetId(pub runtime_types::staging_xcm::v4::location::Location);
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        :: subxt :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: codec)]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub enum AssetInstance {
                        #[codec(index = 0)]
                        Undefined,
                        #[codec(index = 1)]
                        Index(#[codec(compact)] ::core::primitive::u128),
                        #[codec(index = 2)]
                        Array4([::core::primitive::u8; 4usize]),
                        #[codec(index = 3)]
                        Array8([::core::primitive::u8; 8usize]),
                        #[codec(index = 4)]
                        Array16([::core::primitive::u8; 16usize]),
                        #[codec(index = 5)]
                        Array32([::core::primitive::u8; 32usize]),
                    }
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        :: subxt :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: codec)]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub struct Assets(
                        pub ::std::vec::Vec<runtime_types::staging_xcm::v4::asset::Asset>,
                    );
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        :: subxt :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: codec)]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub enum Fungibility {
                        #[codec(index = 0)]
                        Fungible(#[codec(compact)] ::core::primitive::u128),
                        #[codec(index = 1)]
                        NonFungible(runtime_types::staging_xcm::v4::asset::AssetInstance),
                    }
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        :: subxt :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: codec)]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub enum WildAsset {
                        #[codec(index = 0)]
                        All,
                        #[codec(index = 1)]
                        AllOf {
                            id: runtime_types::staging_xcm::v4::asset::AssetId,
                            fun: runtime_types::staging_xcm::v4::asset::WildFungibility,
                        },
                        #[codec(index = 2)]
                        AllCounted(#[codec(compact)] ::core::primitive::u32),
                        #[codec(index = 3)]
                        AllOfCounted {
                            id: runtime_types::staging_xcm::v4::asset::AssetId,
                            fun: runtime_types::staging_xcm::v4::asset::WildFungibility,
                            #[codec(compact)]
                            count: ::core::primitive::u32,
                        },
                    }
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        :: subxt :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: codec)]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub enum WildFungibility {
                        #[codec(index = 0)]
                        Fungible,
                        #[codec(index = 1)]
                        NonFungible,
                    }
                }
                pub mod junction {
                    use super::runtime_types;
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        :: subxt :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: codec)]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub enum Junction {
                        #[codec(index = 0)]
                        Parachain(#[codec(compact)] ::core::primitive::u32),
                        #[codec(index = 1)]
                        AccountId32 {
                            network: ::core::option::Option<
                                runtime_types::staging_xcm::v4::junction::NetworkId,
                            >,
                            id: [::core::primitive::u8; 32usize],
                        },
                        #[codec(index = 2)]
                        AccountIndex64 {
                            network: ::core::option::Option<
                                runtime_types::staging_xcm::v4::junction::NetworkId,
                            >,
                            #[codec(compact)]
                            index: ::core::primitive::u64,
                        },
                        #[codec(index = 3)]
                        AccountKey20 {
                            network: ::core::option::Option<
                                runtime_types::staging_xcm::v4::junction::NetworkId,
                            >,
                            key: [::core::primitive::u8; 20usize],
                        },
                        #[codec(index = 4)]
                        PalletInstance(::core::primitive::u8),
                        #[codec(index = 5)]
                        GeneralIndex(#[codec(compact)] ::core::primitive::u128),
                        #[codec(index = 6)]
                        GeneralKey {
                            length: ::core::primitive::u8,
                            data: [::core::primitive::u8; 32usize],
                        },
                        #[codec(index = 7)]
                        OnlyChild,
                        #[codec(index = 8)]
                        Plurality {
                            id: runtime_types::xcm::v3::junction::BodyId,
                            part: runtime_types::xcm::v3::junction::BodyPart,
                        },
                        #[codec(index = 9)]
                        GlobalConsensus(runtime_types::staging_xcm::v4::junction::NetworkId),
                    }
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        :: subxt :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: codec)]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub enum NetworkId {
                        #[codec(index = 0)]
                        ByGenesis([::core::primitive::u8; 32usize]),
                        #[codec(index = 1)]
                        ByFork {
                            block_number: ::core::primitive::u64,
                            block_hash: [::core::primitive::u8; 32usize],
                        },
                        #[codec(index = 2)]
                        Polkadot,
                        #[codec(index = 3)]
                        Kusama,
                        #[codec(index = 4)]
                        Westend,
                        #[codec(index = 5)]
                        Rococo,
                        #[codec(index = 6)]
                        Wococo,
                        #[codec(index = 7)]
                        Ethereum {
                            #[codec(compact)]
                            chain_id: ::core::primitive::u64,
                        },
                        #[codec(index = 8)]
                        BitcoinCore,
                        #[codec(index = 9)]
                        BitcoinCash,
                        #[codec(index = 10)]
                        PolkadotBulletin,
                    }
                }
                pub mod junctions {
                    use super::runtime_types;
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        :: subxt :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: codec)]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub enum Junctions {
                        #[codec(index = 0)]
                        Here,
                        #[codec(index = 1)]
                        X1([runtime_types::staging_xcm::v4::junction::Junction; 1usize]),
                        #[codec(index = 2)]
                        X2([runtime_types::staging_xcm::v4::junction::Junction; 2usize]),
                        #[codec(index = 3)]
                        X3([runtime_types::staging_xcm::v4::junction::Junction; 3usize]),
                        #[codec(index = 4)]
                        X4([runtime_types::staging_xcm::v4::junction::Junction; 4usize]),
                        #[codec(index = 5)]
                        X5([runtime_types::staging_xcm::v4::junction::Junction; 5usize]),
                        #[codec(index = 6)]
                        X6([runtime_types::staging_xcm::v4::junction::Junction; 6usize]),
                        #[codec(index = 7)]
                        X7([runtime_types::staging_xcm::v4::junction::Junction; 7usize]),
                        #[codec(index = 8)]
                        X8([runtime_types::staging_xcm::v4::junction::Junction; 8usize]),
                    }
                }
                pub mod location {
                    use super::runtime_types;
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        :: subxt :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: codec)]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub struct Location {
                        pub parents: ::core::primitive::u8,
                        pub interior: runtime_types::staging_xcm::v4::junctions::Junctions,
                    }
                }
                pub mod traits {
                    use super::runtime_types;
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        :: subxt :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: codec)]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub enum Outcome {
                        #[codec(index = 0)]
                        Complete {
                            used: runtime_types::sp_weights::weight_v2::Weight,
                        },
                        #[codec(index = 1)]
                        Incomplete {
                            used: runtime_types::sp_weights::weight_v2::Weight,
                            error: runtime_types::xcm::v3::traits::Error,
                        },
                        #[codec(index = 2)]
                        Error {
                            error: runtime_types::xcm::v3::traits::Error,
                        },
                    }
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum Instruction {
                    #[codec(index = 0)]
                    WithdrawAsset(runtime_types::staging_xcm::v4::asset::Assets),
                    #[codec(index = 1)]
                    ReserveAssetDeposited(runtime_types::staging_xcm::v4::asset::Assets),
                    #[codec(index = 2)]
                    ReceiveTeleportedAsset(runtime_types::staging_xcm::v4::asset::Assets),
                    #[codec(index = 3)]
                    QueryResponse {
                        #[codec(compact)]
                        query_id: ::core::primitive::u64,
                        response: runtime_types::staging_xcm::v4::Response,
                        max_weight: runtime_types::sp_weights::weight_v2::Weight,
                        querier: ::core::option::Option<
                            runtime_types::staging_xcm::v4::location::Location,
                        >,
                    },
                    #[codec(index = 4)]
                    TransferAsset {
                        assets: runtime_types::staging_xcm::v4::asset::Assets,
                        beneficiary: runtime_types::staging_xcm::v4::location::Location,
                    },
                    #[codec(index = 5)]
                    TransferReserveAsset {
                        assets: runtime_types::staging_xcm::v4::asset::Assets,
                        dest: runtime_types::staging_xcm::v4::location::Location,
                        xcm: runtime_types::staging_xcm::v4::Xcm,
                    },
                    #[codec(index = 6)]
                    Transact {
                        origin_kind: runtime_types::xcm::v2::OriginKind,
                        require_weight_at_most: runtime_types::sp_weights::weight_v2::Weight,
                        call: runtime_types::xcm::double_encoded::DoubleEncoded,
                    },
                    #[codec(index = 7)]
                    HrmpNewChannelOpenRequest {
                        #[codec(compact)]
                        sender: ::core::primitive::u32,
                        #[codec(compact)]
                        max_message_size: ::core::primitive::u32,
                        #[codec(compact)]
                        max_capacity: ::core::primitive::u32,
                    },
                    #[codec(index = 8)]
                    HrmpChannelAccepted {
                        #[codec(compact)]
                        recipient: ::core::primitive::u32,
                    },
                    #[codec(index = 9)]
                    HrmpChannelClosing {
                        #[codec(compact)]
                        initiator: ::core::primitive::u32,
                        #[codec(compact)]
                        sender: ::core::primitive::u32,
                        #[codec(compact)]
                        recipient: ::core::primitive::u32,
                    },
                    #[codec(index = 10)]
                    ClearOrigin,
                    #[codec(index = 11)]
                    DescendOrigin(runtime_types::staging_xcm::v4::junctions::Junctions),
                    #[codec(index = 12)]
                    ReportError(runtime_types::staging_xcm::v4::QueryResponseInfo),
                    #[codec(index = 13)]
                    DepositAsset {
                        assets: runtime_types::staging_xcm::v4::asset::AssetFilter,
                        beneficiary: runtime_types::staging_xcm::v4::location::Location,
                    },
                    #[codec(index = 14)]
                    DepositReserveAsset {
                        assets: runtime_types::staging_xcm::v4::asset::AssetFilter,
                        dest: runtime_types::staging_xcm::v4::location::Location,
                        xcm: runtime_types::staging_xcm::v4::Xcm,
                    },
                    #[codec(index = 15)]
                    ExchangeAsset {
                        give: runtime_types::staging_xcm::v4::asset::AssetFilter,
                        want: runtime_types::staging_xcm::v4::asset::Assets,
                        maximal: ::core::primitive::bool,
                    },
                    #[codec(index = 16)]
                    InitiateReserveWithdraw {
                        assets: runtime_types::staging_xcm::v4::asset::AssetFilter,
                        reserve: runtime_types::staging_xcm::v4::location::Location,
                        xcm: runtime_types::staging_xcm::v4::Xcm,
                    },
                    #[codec(index = 17)]
                    InitiateTeleport {
                        assets: runtime_types::staging_xcm::v4::asset::AssetFilter,
                        dest: runtime_types::staging_xcm::v4::location::Location,
                        xcm: runtime_types::staging_xcm::v4::Xcm,
                    },
                    #[codec(index = 18)]
                    ReportHolding {
                        response_info: runtime_types::staging_xcm::v4::QueryResponseInfo,
                        assets: runtime_types::staging_xcm::v4::asset::AssetFilter,
                    },
                    #[codec(index = 19)]
                    BuyExecution {
                        fees: runtime_types::staging_xcm::v4::asset::Asset,
                        weight_limit: runtime_types::xcm::v3::WeightLimit,
                    },
                    #[codec(index = 20)]
                    RefundSurplus,
                    #[codec(index = 21)]
                    SetErrorHandler(runtime_types::staging_xcm::v4::Xcm),
                    #[codec(index = 22)]
                    SetAppendix(runtime_types::staging_xcm::v4::Xcm),
                    #[codec(index = 23)]
                    ClearError,
                    #[codec(index = 24)]
                    ClaimAsset {
                        assets: runtime_types::staging_xcm::v4::asset::Assets,
                        ticket: runtime_types::staging_xcm::v4::location::Location,
                    },
                    #[codec(index = 25)]
                    Trap(#[codec(compact)] ::core::primitive::u64),
                    #[codec(index = 26)]
                    SubscribeVersion {
                        #[codec(compact)]
                        query_id: ::core::primitive::u64,
                        max_response_weight: runtime_types::sp_weights::weight_v2::Weight,
                    },
                    #[codec(index = 27)]
                    UnsubscribeVersion,
                    #[codec(index = 28)]
                    BurnAsset(runtime_types::staging_xcm::v4::asset::Assets),
                    #[codec(index = 29)]
                    ExpectAsset(runtime_types::staging_xcm::v4::asset::Assets),
                    #[codec(index = 30)]
                    ExpectOrigin(
                        ::core::option::Option<runtime_types::staging_xcm::v4::location::Location>,
                    ),
                    #[codec(index = 31)]
                    ExpectError(
                        ::core::option::Option<(
                            ::core::primitive::u32,
                            runtime_types::xcm::v3::traits::Error,
                        )>,
                    ),
                    #[codec(index = 32)]
                    ExpectTransactStatus(runtime_types::xcm::v3::MaybeErrorCode),
                    #[codec(index = 33)]
                    QueryPallet {
                        module_name: ::std::vec::Vec<::core::primitive::u8>,
                        response_info: runtime_types::staging_xcm::v4::QueryResponseInfo,
                    },
                    #[codec(index = 34)]
                    ExpectPallet {
                        #[codec(compact)]
                        index: ::core::primitive::u32,
                        name: ::std::vec::Vec<::core::primitive::u8>,
                        module_name: ::std::vec::Vec<::core::primitive::u8>,
                        #[codec(compact)]
                        crate_major: ::core::primitive::u32,
                        #[codec(compact)]
                        min_crate_minor: ::core::primitive::u32,
                    },
                    #[codec(index = 35)]
                    ReportTransactStatus(runtime_types::staging_xcm::v4::QueryResponseInfo),
                    #[codec(index = 36)]
                    ClearTransactStatus,
                    #[codec(index = 37)]
                    UniversalOrigin(runtime_types::staging_xcm::v4::junction::Junction),
                    #[codec(index = 38)]
                    ExportMessage {
                        network: runtime_types::staging_xcm::v4::junction::NetworkId,
                        destination: runtime_types::staging_xcm::v4::junctions::Junctions,
                        xcm: runtime_types::staging_xcm::v4::Xcm,
                    },
                    #[codec(index = 39)]
                    LockAsset {
                        asset: runtime_types::staging_xcm::v4::asset::Asset,
                        unlocker: runtime_types::staging_xcm::v4::location::Location,
                    },
                    #[codec(index = 40)]
                    UnlockAsset {
                        asset: runtime_types::staging_xcm::v4::asset::Asset,
                        target: runtime_types::staging_xcm::v4::location::Location,
                    },
                    #[codec(index = 41)]
                    NoteUnlockable {
                        asset: runtime_types::staging_xcm::v4::asset::Asset,
                        owner: runtime_types::staging_xcm::v4::location::Location,
                    },
                    #[codec(index = 42)]
                    RequestUnlock {
                        asset: runtime_types::staging_xcm::v4::asset::Asset,
                        locker: runtime_types::staging_xcm::v4::location::Location,
                    },
                    #[codec(index = 43)]
                    SetFeesMode {
                        jit_withdraw: ::core::primitive::bool,
                    },
                    #[codec(index = 44)]
                    SetTopic([::core::primitive::u8; 32usize]),
                    #[codec(index = 45)]
                    ClearTopic,
                    #[codec(index = 46)]
                    AliasOrigin(runtime_types::staging_xcm::v4::location::Location),
                    #[codec(index = 47)]
                    UnpaidExecution {
                        weight_limit: runtime_types::xcm::v3::WeightLimit,
                        check_origin: ::core::option::Option<
                            runtime_types::staging_xcm::v4::location::Location,
                        >,
                    },
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum Instruction2 {
                    #[codec(index = 0)]
                    WithdrawAsset(runtime_types::staging_xcm::v4::asset::Assets),
                    #[codec(index = 1)]
                    ReserveAssetDeposited(runtime_types::staging_xcm::v4::asset::Assets),
                    #[codec(index = 2)]
                    ReceiveTeleportedAsset(runtime_types::staging_xcm::v4::asset::Assets),
                    #[codec(index = 3)]
                    QueryResponse {
                        #[codec(compact)]
                        query_id: ::core::primitive::u64,
                        response: runtime_types::staging_xcm::v4::Response,
                        max_weight: runtime_types::sp_weights::weight_v2::Weight,
                        querier: ::core::option::Option<
                            runtime_types::staging_xcm::v4::location::Location,
                        >,
                    },
                    #[codec(index = 4)]
                    TransferAsset {
                        assets: runtime_types::staging_xcm::v4::asset::Assets,
                        beneficiary: runtime_types::staging_xcm::v4::location::Location,
                    },
                    #[codec(index = 5)]
                    TransferReserveAsset {
                        assets: runtime_types::staging_xcm::v4::asset::Assets,
                        dest: runtime_types::staging_xcm::v4::location::Location,
                        xcm: runtime_types::staging_xcm::v4::Xcm,
                    },
                    #[codec(index = 6)]
                    Transact {
                        origin_kind: runtime_types::xcm::v2::OriginKind,
                        require_weight_at_most: runtime_types::sp_weights::weight_v2::Weight,
                        call: runtime_types::xcm::double_encoded::DoubleEncoded2,
                    },
                    #[codec(index = 7)]
                    HrmpNewChannelOpenRequest {
                        #[codec(compact)]
                        sender: ::core::primitive::u32,
                        #[codec(compact)]
                        max_message_size: ::core::primitive::u32,
                        #[codec(compact)]
                        max_capacity: ::core::primitive::u32,
                    },
                    #[codec(index = 8)]
                    HrmpChannelAccepted {
                        #[codec(compact)]
                        recipient: ::core::primitive::u32,
                    },
                    #[codec(index = 9)]
                    HrmpChannelClosing {
                        #[codec(compact)]
                        initiator: ::core::primitive::u32,
                        #[codec(compact)]
                        sender: ::core::primitive::u32,
                        #[codec(compact)]
                        recipient: ::core::primitive::u32,
                    },
                    #[codec(index = 10)]
                    ClearOrigin,
                    #[codec(index = 11)]
                    DescendOrigin(runtime_types::staging_xcm::v4::junctions::Junctions),
                    #[codec(index = 12)]
                    ReportError(runtime_types::staging_xcm::v4::QueryResponseInfo),
                    #[codec(index = 13)]
                    DepositAsset {
                        assets: runtime_types::staging_xcm::v4::asset::AssetFilter,
                        beneficiary: runtime_types::staging_xcm::v4::location::Location,
                    },
                    #[codec(index = 14)]
                    DepositReserveAsset {
                        assets: runtime_types::staging_xcm::v4::asset::AssetFilter,
                        dest: runtime_types::staging_xcm::v4::location::Location,
                        xcm: runtime_types::staging_xcm::v4::Xcm,
                    },
                    #[codec(index = 15)]
                    ExchangeAsset {
                        give: runtime_types::staging_xcm::v4::asset::AssetFilter,
                        want: runtime_types::staging_xcm::v4::asset::Assets,
                        maximal: ::core::primitive::bool,
                    },
                    #[codec(index = 16)]
                    InitiateReserveWithdraw {
                        assets: runtime_types::staging_xcm::v4::asset::AssetFilter,
                        reserve: runtime_types::staging_xcm::v4::location::Location,
                        xcm: runtime_types::staging_xcm::v4::Xcm,
                    },
                    #[codec(index = 17)]
                    InitiateTeleport {
                        assets: runtime_types::staging_xcm::v4::asset::AssetFilter,
                        dest: runtime_types::staging_xcm::v4::location::Location,
                        xcm: runtime_types::staging_xcm::v4::Xcm,
                    },
                    #[codec(index = 18)]
                    ReportHolding {
                        response_info: runtime_types::staging_xcm::v4::QueryResponseInfo,
                        assets: runtime_types::staging_xcm::v4::asset::AssetFilter,
                    },
                    #[codec(index = 19)]
                    BuyExecution {
                        fees: runtime_types::staging_xcm::v4::asset::Asset,
                        weight_limit: runtime_types::xcm::v3::WeightLimit,
                    },
                    #[codec(index = 20)]
                    RefundSurplus,
                    #[codec(index = 21)]
                    SetErrorHandler(runtime_types::staging_xcm::v4::Xcm2),
                    #[codec(index = 22)]
                    SetAppendix(runtime_types::staging_xcm::v4::Xcm2),
                    #[codec(index = 23)]
                    ClearError,
                    #[codec(index = 24)]
                    ClaimAsset {
                        assets: runtime_types::staging_xcm::v4::asset::Assets,
                        ticket: runtime_types::staging_xcm::v4::location::Location,
                    },
                    #[codec(index = 25)]
                    Trap(#[codec(compact)] ::core::primitive::u64),
                    #[codec(index = 26)]
                    SubscribeVersion {
                        #[codec(compact)]
                        query_id: ::core::primitive::u64,
                        max_response_weight: runtime_types::sp_weights::weight_v2::Weight,
                    },
                    #[codec(index = 27)]
                    UnsubscribeVersion,
                    #[codec(index = 28)]
                    BurnAsset(runtime_types::staging_xcm::v4::asset::Assets),
                    #[codec(index = 29)]
                    ExpectAsset(runtime_types::staging_xcm::v4::asset::Assets),
                    #[codec(index = 30)]
                    ExpectOrigin(
                        ::core::option::Option<runtime_types::staging_xcm::v4::location::Location>,
                    ),
                    #[codec(index = 31)]
                    ExpectError(
                        ::core::option::Option<(
                            ::core::primitive::u32,
                            runtime_types::xcm::v3::traits::Error,
                        )>,
                    ),
                    #[codec(index = 32)]
                    ExpectTransactStatus(runtime_types::xcm::v3::MaybeErrorCode),
                    #[codec(index = 33)]
                    QueryPallet {
                        module_name: ::std::vec::Vec<::core::primitive::u8>,
                        response_info: runtime_types::staging_xcm::v4::QueryResponseInfo,
                    },
                    #[codec(index = 34)]
                    ExpectPallet {
                        #[codec(compact)]
                        index: ::core::primitive::u32,
                        name: ::std::vec::Vec<::core::primitive::u8>,
                        module_name: ::std::vec::Vec<::core::primitive::u8>,
                        #[codec(compact)]
                        crate_major: ::core::primitive::u32,
                        #[codec(compact)]
                        min_crate_minor: ::core::primitive::u32,
                    },
                    #[codec(index = 35)]
                    ReportTransactStatus(runtime_types::staging_xcm::v4::QueryResponseInfo),
                    #[codec(index = 36)]
                    ClearTransactStatus,
                    #[codec(index = 37)]
                    UniversalOrigin(runtime_types::staging_xcm::v4::junction::Junction),
                    #[codec(index = 38)]
                    ExportMessage {
                        network: runtime_types::staging_xcm::v4::junction::NetworkId,
                        destination: runtime_types::staging_xcm::v4::junctions::Junctions,
                        xcm: runtime_types::staging_xcm::v4::Xcm,
                    },
                    #[codec(index = 39)]
                    LockAsset {
                        asset: runtime_types::staging_xcm::v4::asset::Asset,
                        unlocker: runtime_types::staging_xcm::v4::location::Location,
                    },
                    #[codec(index = 40)]
                    UnlockAsset {
                        asset: runtime_types::staging_xcm::v4::asset::Asset,
                        target: runtime_types::staging_xcm::v4::location::Location,
                    },
                    #[codec(index = 41)]
                    NoteUnlockable {
                        asset: runtime_types::staging_xcm::v4::asset::Asset,
                        owner: runtime_types::staging_xcm::v4::location::Location,
                    },
                    #[codec(index = 42)]
                    RequestUnlock {
                        asset: runtime_types::staging_xcm::v4::asset::Asset,
                        locker: runtime_types::staging_xcm::v4::location::Location,
                    },
                    #[codec(index = 43)]
                    SetFeesMode {
                        jit_withdraw: ::core::primitive::bool,
                    },
                    #[codec(index = 44)]
                    SetTopic([::core::primitive::u8; 32usize]),
                    #[codec(index = 45)]
                    ClearTopic,
                    #[codec(index = 46)]
                    AliasOrigin(runtime_types::staging_xcm::v4::location::Location),
                    #[codec(index = 47)]
                    UnpaidExecution {
                        weight_limit: runtime_types::xcm::v3::WeightLimit,
                        check_origin: ::core::option::Option<
                            runtime_types::staging_xcm::v4::location::Location,
                        >,
                    },
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct PalletInfo {
                    #[codec(compact)]
                    pub index: ::core::primitive::u32,
                    pub name: runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        ::core::primitive::u8,
                    >,
                    pub module_name: runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        ::core::primitive::u8,
                    >,
                    #[codec(compact)]
                    pub major: ::core::primitive::u32,
                    #[codec(compact)]
                    pub minor: ::core::primitive::u32,
                    #[codec(compact)]
                    pub patch: ::core::primitive::u32,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct QueryResponseInfo {
                    pub destination: runtime_types::staging_xcm::v4::location::Location,
                    #[codec(compact)]
                    pub query_id: ::core::primitive::u64,
                    pub max_weight: runtime_types::sp_weights::weight_v2::Weight,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum Response {
                    #[codec(index = 0)]
                    Null,
                    #[codec(index = 1)]
                    Assets(runtime_types::staging_xcm::v4::asset::Assets),
                    #[codec(index = 2)]
                    ExecutionResult(
                        ::core::option::Option<(
                            ::core::primitive::u32,
                            runtime_types::xcm::v3::traits::Error,
                        )>,
                    ),
                    #[codec(index = 3)]
                    Version(::core::primitive::u32),
                    #[codec(index = 4)]
                    PalletsInfo(
                        runtime_types::bounded_collections::bounded_vec::BoundedVec<
                            runtime_types::staging_xcm::v4::PalletInfo,
                        >,
                    ),
                    #[codec(index = 5)]
                    DispatchResult(runtime_types::xcm::v3::MaybeErrorCode),
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Xcm(pub ::std::vec::Vec<runtime_types::staging_xcm::v4::Instruction>);
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Xcm2(pub ::std::vec::Vec<runtime_types::staging_xcm::v4::Instruction2>);
            }
        }
        pub mod xcm {
            use super::runtime_types;
            pub mod double_encoded {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct DoubleEncoded {
                    pub encoded: ::std::vec::Vec<::core::primitive::u8>,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct DoubleEncoded2 {
                    pub encoded: ::std::vec::Vec<::core::primitive::u8>,
                }
            }
            pub mod v2 {
                use super::runtime_types;
                pub mod junction {
                    use super::runtime_types;
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        :: subxt :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: codec)]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub enum Junction {
                        #[codec(index = 0)]
                        Parachain(#[codec(compact)] ::core::primitive::u32),
                        #[codec(index = 1)]
                        AccountId32 {
                            network: runtime_types::xcm::v2::NetworkId,
                            id: [::core::primitive::u8; 32usize],
                        },
                        #[codec(index = 2)]
                        AccountIndex64 {
                            network: runtime_types::xcm::v2::NetworkId,
                            #[codec(compact)]
                            index: ::core::primitive::u64,
                        },
                        #[codec(index = 3)]
                        AccountKey20 {
                            network: runtime_types::xcm::v2::NetworkId,
                            key: [::core::primitive::u8; 20usize],
                        },
                        #[codec(index = 4)]
                        PalletInstance(::core::primitive::u8),
                        #[codec(index = 5)]
                        GeneralIndex(#[codec(compact)] ::core::primitive::u128),
                        #[codec(index = 6)]
                        GeneralKey(
                            runtime_types::bounded_collections::weak_bounded_vec::WeakBoundedVec<
                                ::core::primitive::u8,
                            >,
                        ),
                        #[codec(index = 7)]
                        OnlyChild,
                        #[codec(index = 8)]
                        Plurality {
                            id: runtime_types::xcm::v2::BodyId,
                            part: runtime_types::xcm::v2::BodyPart,
                        },
                    }
                }
                pub mod multiasset {
                    use super::runtime_types;
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        :: subxt :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: codec)]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub enum AssetId {
                        #[codec(index = 0)]
                        Concrete(runtime_types::xcm::v2::multilocation::MultiLocation),
                        #[codec(index = 1)]
                        Abstract(::std::vec::Vec<::core::primitive::u8>),
                    }
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        :: subxt :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: codec)]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub enum AssetInstance {
                        #[codec(index = 0)]
                        Undefined,
                        #[codec(index = 1)]
                        Index(#[codec(compact)] ::core::primitive::u128),
                        #[codec(index = 2)]
                        Array4([::core::primitive::u8; 4usize]),
                        #[codec(index = 3)]
                        Array8([::core::primitive::u8; 8usize]),
                        #[codec(index = 4)]
                        Array16([::core::primitive::u8; 16usize]),
                        #[codec(index = 5)]
                        Array32([::core::primitive::u8; 32usize]),
                        #[codec(index = 6)]
                        Blob(::std::vec::Vec<::core::primitive::u8>),
                    }
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        :: subxt :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: codec)]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub enum Fungibility {
                        #[codec(index = 0)]
                        Fungible(#[codec(compact)] ::core::primitive::u128),
                        #[codec(index = 1)]
                        NonFungible(runtime_types::xcm::v2::multiasset::AssetInstance),
                    }
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        :: subxt :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: codec)]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub struct MultiAsset {
                        pub id: runtime_types::xcm::v2::multiasset::AssetId,
                        pub fun: runtime_types::xcm::v2::multiasset::Fungibility,
                    }
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        :: subxt :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: codec)]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub enum MultiAssetFilter {
                        #[codec(index = 0)]
                        Definite(runtime_types::xcm::v2::multiasset::MultiAssets),
                        #[codec(index = 1)]
                        Wild(runtime_types::xcm::v2::multiasset::WildMultiAsset),
                    }
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        :: subxt :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: codec)]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub struct MultiAssets(
                        pub ::std::vec::Vec<runtime_types::xcm::v2::multiasset::MultiAsset>,
                    );
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        :: subxt :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: codec)]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub enum WildFungibility {
                        #[codec(index = 0)]
                        Fungible,
                        #[codec(index = 1)]
                        NonFungible,
                    }
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        :: subxt :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: codec)]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub enum WildMultiAsset {
                        #[codec(index = 0)]
                        All,
                        #[codec(index = 1)]
                        AllOf {
                            id: runtime_types::xcm::v2::multiasset::AssetId,
                            fun: runtime_types::xcm::v2::multiasset::WildFungibility,
                        },
                    }
                }
                pub mod multilocation {
                    use super::runtime_types;
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        :: subxt :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: codec)]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub enum Junctions {
                        #[codec(index = 0)]
                        Here,
                        #[codec(index = 1)]
                        X1(runtime_types::xcm::v2::junction::Junction),
                        #[codec(index = 2)]
                        X2(
                            runtime_types::xcm::v2::junction::Junction,
                            runtime_types::xcm::v2::junction::Junction,
                        ),
                        #[codec(index = 3)]
                        X3(
                            runtime_types::xcm::v2::junction::Junction,
                            runtime_types::xcm::v2::junction::Junction,
                            runtime_types::xcm::v2::junction::Junction,
                        ),
                        #[codec(index = 4)]
                        X4(
                            runtime_types::xcm::v2::junction::Junction,
                            runtime_types::xcm::v2::junction::Junction,
                            runtime_types::xcm::v2::junction::Junction,
                            runtime_types::xcm::v2::junction::Junction,
                        ),
                        #[codec(index = 5)]
                        X5(
                            runtime_types::xcm::v2::junction::Junction,
                            runtime_types::xcm::v2::junction::Junction,
                            runtime_types::xcm::v2::junction::Junction,
                            runtime_types::xcm::v2::junction::Junction,
                            runtime_types::xcm::v2::junction::Junction,
                        ),
                        #[codec(index = 6)]
                        X6(
                            runtime_types::xcm::v2::junction::Junction,
                            runtime_types::xcm::v2::junction::Junction,
                            runtime_types::xcm::v2::junction::Junction,
                            runtime_types::xcm::v2::junction::Junction,
                            runtime_types::xcm::v2::junction::Junction,
                            runtime_types::xcm::v2::junction::Junction,
                        ),
                        #[codec(index = 7)]
                        X7(
                            runtime_types::xcm::v2::junction::Junction,
                            runtime_types::xcm::v2::junction::Junction,
                            runtime_types::xcm::v2::junction::Junction,
                            runtime_types::xcm::v2::junction::Junction,
                            runtime_types::xcm::v2::junction::Junction,
                            runtime_types::xcm::v2::junction::Junction,
                            runtime_types::xcm::v2::junction::Junction,
                        ),
                        #[codec(index = 8)]
                        X8(
                            runtime_types::xcm::v2::junction::Junction,
                            runtime_types::xcm::v2::junction::Junction,
                            runtime_types::xcm::v2::junction::Junction,
                            runtime_types::xcm::v2::junction::Junction,
                            runtime_types::xcm::v2::junction::Junction,
                            runtime_types::xcm::v2::junction::Junction,
                            runtime_types::xcm::v2::junction::Junction,
                            runtime_types::xcm::v2::junction::Junction,
                        ),
                    }
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        :: subxt :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: codec)]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub struct MultiLocation {
                        pub parents: ::core::primitive::u8,
                        pub interior: runtime_types::xcm::v2::multilocation::Junctions,
                    }
                }
                pub mod traits {
                    use super::runtime_types;
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        :: subxt :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: codec)]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub enum Error {
                        #[codec(index = 0)]
                        Overflow,
                        #[codec(index = 1)]
                        Unimplemented,
                        #[codec(index = 2)]
                        UntrustedReserveLocation,
                        #[codec(index = 3)]
                        UntrustedTeleportLocation,
                        #[codec(index = 4)]
                        MultiLocationFull,
                        #[codec(index = 5)]
                        MultiLocationNotInvertible,
                        #[codec(index = 6)]
                        BadOrigin,
                        #[codec(index = 7)]
                        InvalidLocation,
                        #[codec(index = 8)]
                        AssetNotFound,
                        #[codec(index = 9)]
                        FailedToTransactAsset,
                        #[codec(index = 10)]
                        NotWithdrawable,
                        #[codec(index = 11)]
                        LocationCannotHold,
                        #[codec(index = 12)]
                        ExceedsMaxMessageSize,
                        #[codec(index = 13)]
                        DestinationUnsupported,
                        #[codec(index = 14)]
                        Transport,
                        #[codec(index = 15)]
                        Unroutable,
                        #[codec(index = 16)]
                        UnknownClaim,
                        #[codec(index = 17)]
                        FailedToDecode,
                        #[codec(index = 18)]
                        MaxWeightInvalid,
                        #[codec(index = 19)]
                        NotHoldingFees,
                        #[codec(index = 20)]
                        TooExpensive,
                        #[codec(index = 21)]
                        Trap(::core::primitive::u64),
                        #[codec(index = 22)]
                        UnhandledXcmVersion,
                        #[codec(index = 23)]
                        WeightLimitReached(::core::primitive::u64),
                        #[codec(index = 24)]
                        Barrier,
                        #[codec(index = 25)]
                        WeightNotComputable,
                    }
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum BodyId {
                    #[codec(index = 0)]
                    Unit,
                    #[codec(index = 1)]
                    Named(
                        runtime_types::bounded_collections::weak_bounded_vec::WeakBoundedVec<
                            ::core::primitive::u8,
                        >,
                    ),
                    #[codec(index = 2)]
                    Index(#[codec(compact)] ::core::primitive::u32),
                    #[codec(index = 3)]
                    Executive,
                    #[codec(index = 4)]
                    Technical,
                    #[codec(index = 5)]
                    Legislative,
                    #[codec(index = 6)]
                    Judicial,
                    #[codec(index = 7)]
                    Defense,
                    #[codec(index = 8)]
                    Administration,
                    #[codec(index = 9)]
                    Treasury,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum BodyPart {
                    #[codec(index = 0)]
                    Voice,
                    #[codec(index = 1)]
                    Members {
                        #[codec(compact)]
                        count: ::core::primitive::u32,
                    },
                    #[codec(index = 2)]
                    Fraction {
                        #[codec(compact)]
                        nom: ::core::primitive::u32,
                        #[codec(compact)]
                        denom: ::core::primitive::u32,
                    },
                    #[codec(index = 3)]
                    AtLeastProportion {
                        #[codec(compact)]
                        nom: ::core::primitive::u32,
                        #[codec(compact)]
                        denom: ::core::primitive::u32,
                    },
                    #[codec(index = 4)]
                    MoreThanProportion {
                        #[codec(compact)]
                        nom: ::core::primitive::u32,
                        #[codec(compact)]
                        denom: ::core::primitive::u32,
                    },
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum Instruction {
                    #[codec(index = 0)]
                    WithdrawAsset(runtime_types::xcm::v2::multiasset::MultiAssets),
                    #[codec(index = 1)]
                    ReserveAssetDeposited(runtime_types::xcm::v2::multiasset::MultiAssets),
                    #[codec(index = 2)]
                    ReceiveTeleportedAsset(runtime_types::xcm::v2::multiasset::MultiAssets),
                    #[codec(index = 3)]
                    QueryResponse {
                        #[codec(compact)]
                        query_id: ::core::primitive::u64,
                        response: runtime_types::xcm::v2::Response,
                        #[codec(compact)]
                        max_weight: ::core::primitive::u64,
                    },
                    #[codec(index = 4)]
                    TransferAsset {
                        assets: runtime_types::xcm::v2::multiasset::MultiAssets,
                        beneficiary: runtime_types::xcm::v2::multilocation::MultiLocation,
                    },
                    #[codec(index = 5)]
                    TransferReserveAsset {
                        assets: runtime_types::xcm::v2::multiasset::MultiAssets,
                        dest: runtime_types::xcm::v2::multilocation::MultiLocation,
                        xcm: runtime_types::xcm::v2::Xcm,
                    },
                    #[codec(index = 6)]
                    Transact {
                        origin_type: runtime_types::xcm::v2::OriginKind,
                        #[codec(compact)]
                        require_weight_at_most: ::core::primitive::u64,
                        call: runtime_types::xcm::double_encoded::DoubleEncoded,
                    },
                    #[codec(index = 7)]
                    HrmpNewChannelOpenRequest {
                        #[codec(compact)]
                        sender: ::core::primitive::u32,
                        #[codec(compact)]
                        max_message_size: ::core::primitive::u32,
                        #[codec(compact)]
                        max_capacity: ::core::primitive::u32,
                    },
                    #[codec(index = 8)]
                    HrmpChannelAccepted {
                        #[codec(compact)]
                        recipient: ::core::primitive::u32,
                    },
                    #[codec(index = 9)]
                    HrmpChannelClosing {
                        #[codec(compact)]
                        initiator: ::core::primitive::u32,
                        #[codec(compact)]
                        sender: ::core::primitive::u32,
                        #[codec(compact)]
                        recipient: ::core::primitive::u32,
                    },
                    #[codec(index = 10)]
                    ClearOrigin,
                    #[codec(index = 11)]
                    DescendOrigin(runtime_types::xcm::v2::multilocation::Junctions),
                    #[codec(index = 12)]
                    ReportError {
                        #[codec(compact)]
                        query_id: ::core::primitive::u64,
                        dest: runtime_types::xcm::v2::multilocation::MultiLocation,
                        #[codec(compact)]
                        max_response_weight: ::core::primitive::u64,
                    },
                    #[codec(index = 13)]
                    DepositAsset {
                        assets: runtime_types::xcm::v2::multiasset::MultiAssetFilter,
                        #[codec(compact)]
                        max_assets: ::core::primitive::u32,
                        beneficiary: runtime_types::xcm::v2::multilocation::MultiLocation,
                    },
                    #[codec(index = 14)]
                    DepositReserveAsset {
                        assets: runtime_types::xcm::v2::multiasset::MultiAssetFilter,
                        #[codec(compact)]
                        max_assets: ::core::primitive::u32,
                        dest: runtime_types::xcm::v2::multilocation::MultiLocation,
                        xcm: runtime_types::xcm::v2::Xcm,
                    },
                    #[codec(index = 15)]
                    ExchangeAsset {
                        give: runtime_types::xcm::v2::multiasset::MultiAssetFilter,
                        receive: runtime_types::xcm::v2::multiasset::MultiAssets,
                    },
                    #[codec(index = 16)]
                    InitiateReserveWithdraw {
                        assets: runtime_types::xcm::v2::multiasset::MultiAssetFilter,
                        reserve: runtime_types::xcm::v2::multilocation::MultiLocation,
                        xcm: runtime_types::xcm::v2::Xcm,
                    },
                    #[codec(index = 17)]
                    InitiateTeleport {
                        assets: runtime_types::xcm::v2::multiasset::MultiAssetFilter,
                        dest: runtime_types::xcm::v2::multilocation::MultiLocation,
                        xcm: runtime_types::xcm::v2::Xcm,
                    },
                    #[codec(index = 18)]
                    QueryHolding {
                        #[codec(compact)]
                        query_id: ::core::primitive::u64,
                        dest: runtime_types::xcm::v2::multilocation::MultiLocation,
                        assets: runtime_types::xcm::v2::multiasset::MultiAssetFilter,
                        #[codec(compact)]
                        max_response_weight: ::core::primitive::u64,
                    },
                    #[codec(index = 19)]
                    BuyExecution {
                        fees: runtime_types::xcm::v2::multiasset::MultiAsset,
                        weight_limit: runtime_types::xcm::v2::WeightLimit,
                    },
                    #[codec(index = 20)]
                    RefundSurplus,
                    #[codec(index = 21)]
                    SetErrorHandler(runtime_types::xcm::v2::Xcm),
                    #[codec(index = 22)]
                    SetAppendix(runtime_types::xcm::v2::Xcm),
                    #[codec(index = 23)]
                    ClearError,
                    #[codec(index = 24)]
                    ClaimAsset {
                        assets: runtime_types::xcm::v2::multiasset::MultiAssets,
                        ticket: runtime_types::xcm::v2::multilocation::MultiLocation,
                    },
                    #[codec(index = 25)]
                    Trap(#[codec(compact)] ::core::primitive::u64),
                    #[codec(index = 26)]
                    SubscribeVersion {
                        #[codec(compact)]
                        query_id: ::core::primitive::u64,
                        #[codec(compact)]
                        max_response_weight: ::core::primitive::u64,
                    },
                    #[codec(index = 27)]
                    UnsubscribeVersion,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum Instruction2 {
                    #[codec(index = 0)]
                    WithdrawAsset(runtime_types::xcm::v2::multiasset::MultiAssets),
                    #[codec(index = 1)]
                    ReserveAssetDeposited(runtime_types::xcm::v2::multiasset::MultiAssets),
                    #[codec(index = 2)]
                    ReceiveTeleportedAsset(runtime_types::xcm::v2::multiasset::MultiAssets),
                    #[codec(index = 3)]
                    QueryResponse {
                        #[codec(compact)]
                        query_id: ::core::primitive::u64,
                        response: runtime_types::xcm::v2::Response,
                        #[codec(compact)]
                        max_weight: ::core::primitive::u64,
                    },
                    #[codec(index = 4)]
                    TransferAsset {
                        assets: runtime_types::xcm::v2::multiasset::MultiAssets,
                        beneficiary: runtime_types::xcm::v2::multilocation::MultiLocation,
                    },
                    #[codec(index = 5)]
                    TransferReserveAsset {
                        assets: runtime_types::xcm::v2::multiasset::MultiAssets,
                        dest: runtime_types::xcm::v2::multilocation::MultiLocation,
                        xcm: runtime_types::xcm::v2::Xcm,
                    },
                    #[codec(index = 6)]
                    Transact {
                        origin_type: runtime_types::xcm::v2::OriginKind,
                        #[codec(compact)]
                        require_weight_at_most: ::core::primitive::u64,
                        call: runtime_types::xcm::double_encoded::DoubleEncoded2,
                    },
                    #[codec(index = 7)]
                    HrmpNewChannelOpenRequest {
                        #[codec(compact)]
                        sender: ::core::primitive::u32,
                        #[codec(compact)]
                        max_message_size: ::core::primitive::u32,
                        #[codec(compact)]
                        max_capacity: ::core::primitive::u32,
                    },
                    #[codec(index = 8)]
                    HrmpChannelAccepted {
                        #[codec(compact)]
                        recipient: ::core::primitive::u32,
                    },
                    #[codec(index = 9)]
                    HrmpChannelClosing {
                        #[codec(compact)]
                        initiator: ::core::primitive::u32,
                        #[codec(compact)]
                        sender: ::core::primitive::u32,
                        #[codec(compact)]
                        recipient: ::core::primitive::u32,
                    },
                    #[codec(index = 10)]
                    ClearOrigin,
                    #[codec(index = 11)]
                    DescendOrigin(runtime_types::xcm::v2::multilocation::Junctions),
                    #[codec(index = 12)]
                    ReportError {
                        #[codec(compact)]
                        query_id: ::core::primitive::u64,
                        dest: runtime_types::xcm::v2::multilocation::MultiLocation,
                        #[codec(compact)]
                        max_response_weight: ::core::primitive::u64,
                    },
                    #[codec(index = 13)]
                    DepositAsset {
                        assets: runtime_types::xcm::v2::multiasset::MultiAssetFilter,
                        #[codec(compact)]
                        max_assets: ::core::primitive::u32,
                        beneficiary: runtime_types::xcm::v2::multilocation::MultiLocation,
                    },
                    #[codec(index = 14)]
                    DepositReserveAsset {
                        assets: runtime_types::xcm::v2::multiasset::MultiAssetFilter,
                        #[codec(compact)]
                        max_assets: ::core::primitive::u32,
                        dest: runtime_types::xcm::v2::multilocation::MultiLocation,
                        xcm: runtime_types::xcm::v2::Xcm,
                    },
                    #[codec(index = 15)]
                    ExchangeAsset {
                        give: runtime_types::xcm::v2::multiasset::MultiAssetFilter,
                        receive: runtime_types::xcm::v2::multiasset::MultiAssets,
                    },
                    #[codec(index = 16)]
                    InitiateReserveWithdraw {
                        assets: runtime_types::xcm::v2::multiasset::MultiAssetFilter,
                        reserve: runtime_types::xcm::v2::multilocation::MultiLocation,
                        xcm: runtime_types::xcm::v2::Xcm,
                    },
                    #[codec(index = 17)]
                    InitiateTeleport {
                        assets: runtime_types::xcm::v2::multiasset::MultiAssetFilter,
                        dest: runtime_types::xcm::v2::multilocation::MultiLocation,
                        xcm: runtime_types::xcm::v2::Xcm,
                    },
                    #[codec(index = 18)]
                    QueryHolding {
                        #[codec(compact)]
                        query_id: ::core::primitive::u64,
                        dest: runtime_types::xcm::v2::multilocation::MultiLocation,
                        assets: runtime_types::xcm::v2::multiasset::MultiAssetFilter,
                        #[codec(compact)]
                        max_response_weight: ::core::primitive::u64,
                    },
                    #[codec(index = 19)]
                    BuyExecution {
                        fees: runtime_types::xcm::v2::multiasset::MultiAsset,
                        weight_limit: runtime_types::xcm::v2::WeightLimit,
                    },
                    #[codec(index = 20)]
                    RefundSurplus,
                    #[codec(index = 21)]
                    SetErrorHandler(runtime_types::xcm::v2::Xcm2),
                    #[codec(index = 22)]
                    SetAppendix(runtime_types::xcm::v2::Xcm2),
                    #[codec(index = 23)]
                    ClearError,
                    #[codec(index = 24)]
                    ClaimAsset {
                        assets: runtime_types::xcm::v2::multiasset::MultiAssets,
                        ticket: runtime_types::xcm::v2::multilocation::MultiLocation,
                    },
                    #[codec(index = 25)]
                    Trap(#[codec(compact)] ::core::primitive::u64),
                    #[codec(index = 26)]
                    SubscribeVersion {
                        #[codec(compact)]
                        query_id: ::core::primitive::u64,
                        #[codec(compact)]
                        max_response_weight: ::core::primitive::u64,
                    },
                    #[codec(index = 27)]
                    UnsubscribeVersion,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum NetworkId {
                    #[codec(index = 0)]
                    Any,
                    #[codec(index = 1)]
                    Named(
                        runtime_types::bounded_collections::weak_bounded_vec::WeakBoundedVec<
                            ::core::primitive::u8,
                        >,
                    ),
                    #[codec(index = 2)]
                    Polkadot,
                    #[codec(index = 3)]
                    Kusama,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum OriginKind {
                    #[codec(index = 0)]
                    Native,
                    #[codec(index = 1)]
                    SovereignAccount,
                    #[codec(index = 2)]
                    Superuser,
                    #[codec(index = 3)]
                    Xcm,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum Response {
                    #[codec(index = 0)]
                    Null,
                    #[codec(index = 1)]
                    Assets(runtime_types::xcm::v2::multiasset::MultiAssets),
                    #[codec(index = 2)]
                    ExecutionResult(
                        ::core::option::Option<(
                            ::core::primitive::u32,
                            runtime_types::xcm::v2::traits::Error,
                        )>,
                    ),
                    #[codec(index = 3)]
                    Version(::core::primitive::u32),
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum WeightLimit {
                    #[codec(index = 0)]
                    Unlimited,
                    #[codec(index = 1)]
                    Limited(#[codec(compact)] ::core::primitive::u64),
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Xcm(pub ::std::vec::Vec<runtime_types::xcm::v2::Instruction>);
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Xcm2(pub ::std::vec::Vec<runtime_types::xcm::v2::Instruction2>);
            }
            pub mod v3 {
                use super::runtime_types;
                pub mod junction {
                    use super::runtime_types;
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        :: subxt :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: codec)]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub enum BodyId {
                        #[codec(index = 0)]
                        Unit,
                        #[codec(index = 1)]
                        Moniker([::core::primitive::u8; 4usize]),
                        #[codec(index = 2)]
                        Index(#[codec(compact)] ::core::primitive::u32),
                        #[codec(index = 3)]
                        Executive,
                        #[codec(index = 4)]
                        Technical,
                        #[codec(index = 5)]
                        Legislative,
                        #[codec(index = 6)]
                        Judicial,
                        #[codec(index = 7)]
                        Defense,
                        #[codec(index = 8)]
                        Administration,
                        #[codec(index = 9)]
                        Treasury,
                    }
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        :: subxt :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: codec)]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub enum BodyPart {
                        #[codec(index = 0)]
                        Voice,
                        #[codec(index = 1)]
                        Members {
                            #[codec(compact)]
                            count: ::core::primitive::u32,
                        },
                        #[codec(index = 2)]
                        Fraction {
                            #[codec(compact)]
                            nom: ::core::primitive::u32,
                            #[codec(compact)]
                            denom: ::core::primitive::u32,
                        },
                        #[codec(index = 3)]
                        AtLeastProportion {
                            #[codec(compact)]
                            nom: ::core::primitive::u32,
                            #[codec(compact)]
                            denom: ::core::primitive::u32,
                        },
                        #[codec(index = 4)]
                        MoreThanProportion {
                            #[codec(compact)]
                            nom: ::core::primitive::u32,
                            #[codec(compact)]
                            denom: ::core::primitive::u32,
                        },
                    }
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        :: subxt :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: codec)]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub enum Junction {
                        #[codec(index = 0)]
                        Parachain(#[codec(compact)] ::core::primitive::u32),
                        #[codec(index = 1)]
                        AccountId32 {
                            network:
                                ::core::option::Option<runtime_types::xcm::v3::junction::NetworkId>,
                            id: [::core::primitive::u8; 32usize],
                        },
                        #[codec(index = 2)]
                        AccountIndex64 {
                            network:
                                ::core::option::Option<runtime_types::xcm::v3::junction::NetworkId>,
                            #[codec(compact)]
                            index: ::core::primitive::u64,
                        },
                        #[codec(index = 3)]
                        AccountKey20 {
                            network:
                                ::core::option::Option<runtime_types::xcm::v3::junction::NetworkId>,
                            key: [::core::primitive::u8; 20usize],
                        },
                        #[codec(index = 4)]
                        PalletInstance(::core::primitive::u8),
                        #[codec(index = 5)]
                        GeneralIndex(#[codec(compact)] ::core::primitive::u128),
                        #[codec(index = 6)]
                        GeneralKey {
                            length: ::core::primitive::u8,
                            data: [::core::primitive::u8; 32usize],
                        },
                        #[codec(index = 7)]
                        OnlyChild,
                        #[codec(index = 8)]
                        Plurality {
                            id: runtime_types::xcm::v3::junction::BodyId,
                            part: runtime_types::xcm::v3::junction::BodyPart,
                        },
                        #[codec(index = 9)]
                        GlobalConsensus(runtime_types::xcm::v3::junction::NetworkId),
                    }
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        :: subxt :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: codec)]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub enum NetworkId {
                        #[codec(index = 0)]
                        ByGenesis([::core::primitive::u8; 32usize]),
                        #[codec(index = 1)]
                        ByFork {
                            block_number: ::core::primitive::u64,
                            block_hash: [::core::primitive::u8; 32usize],
                        },
                        #[codec(index = 2)]
                        Polkadot,
                        #[codec(index = 3)]
                        Kusama,
                        #[codec(index = 4)]
                        Westend,
                        #[codec(index = 5)]
                        Rococo,
                        #[codec(index = 6)]
                        Wococo,
                        #[codec(index = 7)]
                        Ethereum {
                            #[codec(compact)]
                            chain_id: ::core::primitive::u64,
                        },
                        #[codec(index = 8)]
                        BitcoinCore,
                        #[codec(index = 9)]
                        BitcoinCash,
                        #[codec(index = 10)]
                        PolkadotBulletin,
                    }
                }
                pub mod junctions {
                    use super::runtime_types;
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        :: subxt :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: codec)]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub enum Junctions {
                        #[codec(index = 0)]
                        Here,
                        #[codec(index = 1)]
                        X1(runtime_types::xcm::v3::junction::Junction),
                        #[codec(index = 2)]
                        X2(
                            runtime_types::xcm::v3::junction::Junction,
                            runtime_types::xcm::v3::junction::Junction,
                        ),
                        #[codec(index = 3)]
                        X3(
                            runtime_types::xcm::v3::junction::Junction,
                            runtime_types::xcm::v3::junction::Junction,
                            runtime_types::xcm::v3::junction::Junction,
                        ),
                        #[codec(index = 4)]
                        X4(
                            runtime_types::xcm::v3::junction::Junction,
                            runtime_types::xcm::v3::junction::Junction,
                            runtime_types::xcm::v3::junction::Junction,
                            runtime_types::xcm::v3::junction::Junction,
                        ),
                        #[codec(index = 5)]
                        X5(
                            runtime_types::xcm::v3::junction::Junction,
                            runtime_types::xcm::v3::junction::Junction,
                            runtime_types::xcm::v3::junction::Junction,
                            runtime_types::xcm::v3::junction::Junction,
                            runtime_types::xcm::v3::junction::Junction,
                        ),
                        #[codec(index = 6)]
                        X6(
                            runtime_types::xcm::v3::junction::Junction,
                            runtime_types::xcm::v3::junction::Junction,
                            runtime_types::xcm::v3::junction::Junction,
                            runtime_types::xcm::v3::junction::Junction,
                            runtime_types::xcm::v3::junction::Junction,
                            runtime_types::xcm::v3::junction::Junction,
                        ),
                        #[codec(index = 7)]
                        X7(
                            runtime_types::xcm::v3::junction::Junction,
                            runtime_types::xcm::v3::junction::Junction,
                            runtime_types::xcm::v3::junction::Junction,
                            runtime_types::xcm::v3::junction::Junction,
                            runtime_types::xcm::v3::junction::Junction,
                            runtime_types::xcm::v3::junction::Junction,
                            runtime_types::xcm::v3::junction::Junction,
                        ),
                        #[codec(index = 8)]
                        X8(
                            runtime_types::xcm::v3::junction::Junction,
                            runtime_types::xcm::v3::junction::Junction,
                            runtime_types::xcm::v3::junction::Junction,
                            runtime_types::xcm::v3::junction::Junction,
                            runtime_types::xcm::v3::junction::Junction,
                            runtime_types::xcm::v3::junction::Junction,
                            runtime_types::xcm::v3::junction::Junction,
                            runtime_types::xcm::v3::junction::Junction,
                        ),
                    }
                }
                pub mod multiasset {
                    use super::runtime_types;
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        :: subxt :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: codec)]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub enum AssetId {
                        #[codec(index = 0)]
                        Concrete(runtime_types::staging_xcm::v3::multilocation::MultiLocation),
                        #[codec(index = 1)]
                        Abstract([::core::primitive::u8; 32usize]),
                    }
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        :: subxt :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: codec)]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub enum AssetInstance {
                        #[codec(index = 0)]
                        Undefined,
                        #[codec(index = 1)]
                        Index(#[codec(compact)] ::core::primitive::u128),
                        #[codec(index = 2)]
                        Array4([::core::primitive::u8; 4usize]),
                        #[codec(index = 3)]
                        Array8([::core::primitive::u8; 8usize]),
                        #[codec(index = 4)]
                        Array16([::core::primitive::u8; 16usize]),
                        #[codec(index = 5)]
                        Array32([::core::primitive::u8; 32usize]),
                    }
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        :: subxt :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: codec)]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub enum Fungibility {
                        #[codec(index = 0)]
                        Fungible(#[codec(compact)] ::core::primitive::u128),
                        #[codec(index = 1)]
                        NonFungible(runtime_types::xcm::v3::multiasset::AssetInstance),
                    }
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        :: subxt :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: codec)]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub struct MultiAsset {
                        pub id: runtime_types::xcm::v3::multiasset::AssetId,
                        pub fun: runtime_types::xcm::v3::multiasset::Fungibility,
                    }
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        :: subxt :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: codec)]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub enum MultiAssetFilter {
                        #[codec(index = 0)]
                        Definite(runtime_types::xcm::v3::multiasset::MultiAssets),
                        #[codec(index = 1)]
                        Wild(runtime_types::xcm::v3::multiasset::WildMultiAsset),
                    }
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        :: subxt :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: codec)]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub struct MultiAssets(
                        pub ::std::vec::Vec<runtime_types::xcm::v3::multiasset::MultiAsset>,
                    );
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        :: subxt :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: codec)]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub enum WildFungibility {
                        #[codec(index = 0)]
                        Fungible,
                        #[codec(index = 1)]
                        NonFungible,
                    }
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        :: subxt :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: codec)]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub enum WildMultiAsset {
                        #[codec(index = 0)]
                        All,
                        #[codec(index = 1)]
                        AllOf {
                            id: runtime_types::xcm::v3::multiasset::AssetId,
                            fun: runtime_types::xcm::v3::multiasset::WildFungibility,
                        },
                        #[codec(index = 2)]
                        AllCounted(#[codec(compact)] ::core::primitive::u32),
                        #[codec(index = 3)]
                        AllOfCounted {
                            id: runtime_types::xcm::v3::multiasset::AssetId,
                            fun: runtime_types::xcm::v3::multiasset::WildFungibility,
                            #[codec(compact)]
                            count: ::core::primitive::u32,
                        },
                    }
                }
                pub mod traits {
                    use super::runtime_types;
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        :: subxt :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: codec)]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub enum Error {
                        #[codec(index = 0)]
                        Overflow,
                        #[codec(index = 1)]
                        Unimplemented,
                        #[codec(index = 2)]
                        UntrustedReserveLocation,
                        #[codec(index = 3)]
                        UntrustedTeleportLocation,
                        #[codec(index = 4)]
                        LocationFull,
                        #[codec(index = 5)]
                        LocationNotInvertible,
                        #[codec(index = 6)]
                        BadOrigin,
                        #[codec(index = 7)]
                        InvalidLocation,
                        #[codec(index = 8)]
                        AssetNotFound,
                        #[codec(index = 9)]
                        FailedToTransactAsset,
                        #[codec(index = 10)]
                        NotWithdrawable,
                        #[codec(index = 11)]
                        LocationCannotHold,
                        #[codec(index = 12)]
                        ExceedsMaxMessageSize,
                        #[codec(index = 13)]
                        DestinationUnsupported,
                        #[codec(index = 14)]
                        Transport,
                        #[codec(index = 15)]
                        Unroutable,
                        #[codec(index = 16)]
                        UnknownClaim,
                        #[codec(index = 17)]
                        FailedToDecode,
                        #[codec(index = 18)]
                        MaxWeightInvalid,
                        #[codec(index = 19)]
                        NotHoldingFees,
                        #[codec(index = 20)]
                        TooExpensive,
                        #[codec(index = 21)]
                        Trap(::core::primitive::u64),
                        #[codec(index = 22)]
                        ExpectationFalse,
                        #[codec(index = 23)]
                        PalletNotFound,
                        #[codec(index = 24)]
                        NameMismatch,
                        #[codec(index = 25)]
                        VersionIncompatible,
                        #[codec(index = 26)]
                        HoldingWouldOverflow,
                        #[codec(index = 27)]
                        ExportError,
                        #[codec(index = 28)]
                        ReanchorFailed,
                        #[codec(index = 29)]
                        NoDeal,
                        #[codec(index = 30)]
                        FeesNotMet,
                        #[codec(index = 31)]
                        LockError,
                        #[codec(index = 32)]
                        NoPermission,
                        #[codec(index = 33)]
                        Unanchored,
                        #[codec(index = 34)]
                        NotDepositable,
                        #[codec(index = 35)]
                        UnhandledXcmVersion,
                        #[codec(index = 36)]
                        WeightLimitReached(runtime_types::sp_weights::weight_v2::Weight),
                        #[codec(index = 37)]
                        Barrier,
                        #[codec(index = 38)]
                        WeightNotComputable,
                        #[codec(index = 39)]
                        ExceedsStackLimit,
                    }
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum Instruction {
                    #[codec(index = 0)]
                    WithdrawAsset(runtime_types::xcm::v3::multiasset::MultiAssets),
                    #[codec(index = 1)]
                    ReserveAssetDeposited(runtime_types::xcm::v3::multiasset::MultiAssets),
                    #[codec(index = 2)]
                    ReceiveTeleportedAsset(runtime_types::xcm::v3::multiasset::MultiAssets),
                    #[codec(index = 3)]
                    QueryResponse {
                        #[codec(compact)]
                        query_id: ::core::primitive::u64,
                        response: runtime_types::xcm::v3::Response,
                        max_weight: runtime_types::sp_weights::weight_v2::Weight,
                        querier: ::core::option::Option<
                            runtime_types::staging_xcm::v3::multilocation::MultiLocation,
                        >,
                    },
                    #[codec(index = 4)]
                    TransferAsset {
                        assets: runtime_types::xcm::v3::multiasset::MultiAssets,
                        beneficiary: runtime_types::staging_xcm::v3::multilocation::MultiLocation,
                    },
                    #[codec(index = 5)]
                    TransferReserveAsset {
                        assets: runtime_types::xcm::v3::multiasset::MultiAssets,
                        dest: runtime_types::staging_xcm::v3::multilocation::MultiLocation,
                        xcm: runtime_types::xcm::v3::Xcm,
                    },
                    #[codec(index = 6)]
                    Transact {
                        origin_kind: runtime_types::xcm::v2::OriginKind,
                        require_weight_at_most: runtime_types::sp_weights::weight_v2::Weight,
                        call: runtime_types::xcm::double_encoded::DoubleEncoded,
                    },
                    #[codec(index = 7)]
                    HrmpNewChannelOpenRequest {
                        #[codec(compact)]
                        sender: ::core::primitive::u32,
                        #[codec(compact)]
                        max_message_size: ::core::primitive::u32,
                        #[codec(compact)]
                        max_capacity: ::core::primitive::u32,
                    },
                    #[codec(index = 8)]
                    HrmpChannelAccepted {
                        #[codec(compact)]
                        recipient: ::core::primitive::u32,
                    },
                    #[codec(index = 9)]
                    HrmpChannelClosing {
                        #[codec(compact)]
                        initiator: ::core::primitive::u32,
                        #[codec(compact)]
                        sender: ::core::primitive::u32,
                        #[codec(compact)]
                        recipient: ::core::primitive::u32,
                    },
                    #[codec(index = 10)]
                    ClearOrigin,
                    #[codec(index = 11)]
                    DescendOrigin(runtime_types::xcm::v3::junctions::Junctions),
                    #[codec(index = 12)]
                    ReportError(runtime_types::xcm::v3::QueryResponseInfo),
                    #[codec(index = 13)]
                    DepositAsset {
                        assets: runtime_types::xcm::v3::multiasset::MultiAssetFilter,
                        beneficiary: runtime_types::staging_xcm::v3::multilocation::MultiLocation,
                    },
                    #[codec(index = 14)]
                    DepositReserveAsset {
                        assets: runtime_types::xcm::v3::multiasset::MultiAssetFilter,
                        dest: runtime_types::staging_xcm::v3::multilocation::MultiLocation,
                        xcm: runtime_types::xcm::v3::Xcm,
                    },
                    #[codec(index = 15)]
                    ExchangeAsset {
                        give: runtime_types::xcm::v3::multiasset::MultiAssetFilter,
                        want: runtime_types::xcm::v3::multiasset::MultiAssets,
                        maximal: ::core::primitive::bool,
                    },
                    #[codec(index = 16)]
                    InitiateReserveWithdraw {
                        assets: runtime_types::xcm::v3::multiasset::MultiAssetFilter,
                        reserve: runtime_types::staging_xcm::v3::multilocation::MultiLocation,
                        xcm: runtime_types::xcm::v3::Xcm,
                    },
                    #[codec(index = 17)]
                    InitiateTeleport {
                        assets: runtime_types::xcm::v3::multiasset::MultiAssetFilter,
                        dest: runtime_types::staging_xcm::v3::multilocation::MultiLocation,
                        xcm: runtime_types::xcm::v3::Xcm,
                    },
                    #[codec(index = 18)]
                    ReportHolding {
                        response_info: runtime_types::xcm::v3::QueryResponseInfo,
                        assets: runtime_types::xcm::v3::multiasset::MultiAssetFilter,
                    },
                    #[codec(index = 19)]
                    BuyExecution {
                        fees: runtime_types::xcm::v3::multiasset::MultiAsset,
                        weight_limit: runtime_types::xcm::v3::WeightLimit,
                    },
                    #[codec(index = 20)]
                    RefundSurplus,
                    #[codec(index = 21)]
                    SetErrorHandler(runtime_types::xcm::v3::Xcm),
                    #[codec(index = 22)]
                    SetAppendix(runtime_types::xcm::v3::Xcm),
                    #[codec(index = 23)]
                    ClearError,
                    #[codec(index = 24)]
                    ClaimAsset {
                        assets: runtime_types::xcm::v3::multiasset::MultiAssets,
                        ticket: runtime_types::staging_xcm::v3::multilocation::MultiLocation,
                    },
                    #[codec(index = 25)]
                    Trap(#[codec(compact)] ::core::primitive::u64),
                    #[codec(index = 26)]
                    SubscribeVersion {
                        #[codec(compact)]
                        query_id: ::core::primitive::u64,
                        max_response_weight: runtime_types::sp_weights::weight_v2::Weight,
                    },
                    #[codec(index = 27)]
                    UnsubscribeVersion,
                    #[codec(index = 28)]
                    BurnAsset(runtime_types::xcm::v3::multiasset::MultiAssets),
                    #[codec(index = 29)]
                    ExpectAsset(runtime_types::xcm::v3::multiasset::MultiAssets),
                    #[codec(index = 30)]
                    ExpectOrigin(
                        ::core::option::Option<
                            runtime_types::staging_xcm::v3::multilocation::MultiLocation,
                        >,
                    ),
                    #[codec(index = 31)]
                    ExpectError(
                        ::core::option::Option<(
                            ::core::primitive::u32,
                            runtime_types::xcm::v3::traits::Error,
                        )>,
                    ),
                    #[codec(index = 32)]
                    ExpectTransactStatus(runtime_types::xcm::v3::MaybeErrorCode),
                    #[codec(index = 33)]
                    QueryPallet {
                        module_name: ::std::vec::Vec<::core::primitive::u8>,
                        response_info: runtime_types::xcm::v3::QueryResponseInfo,
                    },
                    #[codec(index = 34)]
                    ExpectPallet {
                        #[codec(compact)]
                        index: ::core::primitive::u32,
                        name: ::std::vec::Vec<::core::primitive::u8>,
                        module_name: ::std::vec::Vec<::core::primitive::u8>,
                        #[codec(compact)]
                        crate_major: ::core::primitive::u32,
                        #[codec(compact)]
                        min_crate_minor: ::core::primitive::u32,
                    },
                    #[codec(index = 35)]
                    ReportTransactStatus(runtime_types::xcm::v3::QueryResponseInfo),
                    #[codec(index = 36)]
                    ClearTransactStatus,
                    #[codec(index = 37)]
                    UniversalOrigin(runtime_types::xcm::v3::junction::Junction),
                    #[codec(index = 38)]
                    ExportMessage {
                        network: runtime_types::xcm::v3::junction::NetworkId,
                        destination: runtime_types::xcm::v3::junctions::Junctions,
                        xcm: runtime_types::xcm::v3::Xcm,
                    },
                    #[codec(index = 39)]
                    LockAsset {
                        asset: runtime_types::xcm::v3::multiasset::MultiAsset,
                        unlocker: runtime_types::staging_xcm::v3::multilocation::MultiLocation,
                    },
                    #[codec(index = 40)]
                    UnlockAsset {
                        asset: runtime_types::xcm::v3::multiasset::MultiAsset,
                        target: runtime_types::staging_xcm::v3::multilocation::MultiLocation,
                    },
                    #[codec(index = 41)]
                    NoteUnlockable {
                        asset: runtime_types::xcm::v3::multiasset::MultiAsset,
                        owner: runtime_types::staging_xcm::v3::multilocation::MultiLocation,
                    },
                    #[codec(index = 42)]
                    RequestUnlock {
                        asset: runtime_types::xcm::v3::multiasset::MultiAsset,
                        locker: runtime_types::staging_xcm::v3::multilocation::MultiLocation,
                    },
                    #[codec(index = 43)]
                    SetFeesMode {
                        jit_withdraw: ::core::primitive::bool,
                    },
                    #[codec(index = 44)]
                    SetTopic([::core::primitive::u8; 32usize]),
                    #[codec(index = 45)]
                    ClearTopic,
                    #[codec(index = 46)]
                    AliasOrigin(runtime_types::staging_xcm::v3::multilocation::MultiLocation),
                    #[codec(index = 47)]
                    UnpaidExecution {
                        weight_limit: runtime_types::xcm::v3::WeightLimit,
                        check_origin: ::core::option::Option<
                            runtime_types::staging_xcm::v3::multilocation::MultiLocation,
                        >,
                    },
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum Instruction2 {
                    #[codec(index = 0)]
                    WithdrawAsset(runtime_types::xcm::v3::multiasset::MultiAssets),
                    #[codec(index = 1)]
                    ReserveAssetDeposited(runtime_types::xcm::v3::multiasset::MultiAssets),
                    #[codec(index = 2)]
                    ReceiveTeleportedAsset(runtime_types::xcm::v3::multiasset::MultiAssets),
                    #[codec(index = 3)]
                    QueryResponse {
                        #[codec(compact)]
                        query_id: ::core::primitive::u64,
                        response: runtime_types::xcm::v3::Response,
                        max_weight: runtime_types::sp_weights::weight_v2::Weight,
                        querier: ::core::option::Option<
                            runtime_types::staging_xcm::v3::multilocation::MultiLocation,
                        >,
                    },
                    #[codec(index = 4)]
                    TransferAsset {
                        assets: runtime_types::xcm::v3::multiasset::MultiAssets,
                        beneficiary: runtime_types::staging_xcm::v3::multilocation::MultiLocation,
                    },
                    #[codec(index = 5)]
                    TransferReserveAsset {
                        assets: runtime_types::xcm::v3::multiasset::MultiAssets,
                        dest: runtime_types::staging_xcm::v3::multilocation::MultiLocation,
                        xcm: runtime_types::xcm::v3::Xcm,
                    },
                    #[codec(index = 6)]
                    Transact {
                        origin_kind: runtime_types::xcm::v2::OriginKind,
                        require_weight_at_most: runtime_types::sp_weights::weight_v2::Weight,
                        call: runtime_types::xcm::double_encoded::DoubleEncoded2,
                    },
                    #[codec(index = 7)]
                    HrmpNewChannelOpenRequest {
                        #[codec(compact)]
                        sender: ::core::primitive::u32,
                        #[codec(compact)]
                        max_message_size: ::core::primitive::u32,
                        #[codec(compact)]
                        max_capacity: ::core::primitive::u32,
                    },
                    #[codec(index = 8)]
                    HrmpChannelAccepted {
                        #[codec(compact)]
                        recipient: ::core::primitive::u32,
                    },
                    #[codec(index = 9)]
                    HrmpChannelClosing {
                        #[codec(compact)]
                        initiator: ::core::primitive::u32,
                        #[codec(compact)]
                        sender: ::core::primitive::u32,
                        #[codec(compact)]
                        recipient: ::core::primitive::u32,
                    },
                    #[codec(index = 10)]
                    ClearOrigin,
                    #[codec(index = 11)]
                    DescendOrigin(runtime_types::xcm::v3::junctions::Junctions),
                    #[codec(index = 12)]
                    ReportError(runtime_types::xcm::v3::QueryResponseInfo),
                    #[codec(index = 13)]
                    DepositAsset {
                        assets: runtime_types::xcm::v3::multiasset::MultiAssetFilter,
                        beneficiary: runtime_types::staging_xcm::v3::multilocation::MultiLocation,
                    },
                    #[codec(index = 14)]
                    DepositReserveAsset {
                        assets: runtime_types::xcm::v3::multiasset::MultiAssetFilter,
                        dest: runtime_types::staging_xcm::v3::multilocation::MultiLocation,
                        xcm: runtime_types::xcm::v3::Xcm,
                    },
                    #[codec(index = 15)]
                    ExchangeAsset {
                        give: runtime_types::xcm::v3::multiasset::MultiAssetFilter,
                        want: runtime_types::xcm::v3::multiasset::MultiAssets,
                        maximal: ::core::primitive::bool,
                    },
                    #[codec(index = 16)]
                    InitiateReserveWithdraw {
                        assets: runtime_types::xcm::v3::multiasset::MultiAssetFilter,
                        reserve: runtime_types::staging_xcm::v3::multilocation::MultiLocation,
                        xcm: runtime_types::xcm::v3::Xcm,
                    },
                    #[codec(index = 17)]
                    InitiateTeleport {
                        assets: runtime_types::xcm::v3::multiasset::MultiAssetFilter,
                        dest: runtime_types::staging_xcm::v3::multilocation::MultiLocation,
                        xcm: runtime_types::xcm::v3::Xcm,
                    },
                    #[codec(index = 18)]
                    ReportHolding {
                        response_info: runtime_types::xcm::v3::QueryResponseInfo,
                        assets: runtime_types::xcm::v3::multiasset::MultiAssetFilter,
                    },
                    #[codec(index = 19)]
                    BuyExecution {
                        fees: runtime_types::xcm::v3::multiasset::MultiAsset,
                        weight_limit: runtime_types::xcm::v3::WeightLimit,
                    },
                    #[codec(index = 20)]
                    RefundSurplus,
                    #[codec(index = 21)]
                    SetErrorHandler(runtime_types::xcm::v3::Xcm2),
                    #[codec(index = 22)]
                    SetAppendix(runtime_types::xcm::v3::Xcm2),
                    #[codec(index = 23)]
                    ClearError,
                    #[codec(index = 24)]
                    ClaimAsset {
                        assets: runtime_types::xcm::v3::multiasset::MultiAssets,
                        ticket: runtime_types::staging_xcm::v3::multilocation::MultiLocation,
                    },
                    #[codec(index = 25)]
                    Trap(#[codec(compact)] ::core::primitive::u64),
                    #[codec(index = 26)]
                    SubscribeVersion {
                        #[codec(compact)]
                        query_id: ::core::primitive::u64,
                        max_response_weight: runtime_types::sp_weights::weight_v2::Weight,
                    },
                    #[codec(index = 27)]
                    UnsubscribeVersion,
                    #[codec(index = 28)]
                    BurnAsset(runtime_types::xcm::v3::multiasset::MultiAssets),
                    #[codec(index = 29)]
                    ExpectAsset(runtime_types::xcm::v3::multiasset::MultiAssets),
                    #[codec(index = 30)]
                    ExpectOrigin(
                        ::core::option::Option<
                            runtime_types::staging_xcm::v3::multilocation::MultiLocation,
                        >,
                    ),
                    #[codec(index = 31)]
                    ExpectError(
                        ::core::option::Option<(
                            ::core::primitive::u32,
                            runtime_types::xcm::v3::traits::Error,
                        )>,
                    ),
                    #[codec(index = 32)]
                    ExpectTransactStatus(runtime_types::xcm::v3::MaybeErrorCode),
                    #[codec(index = 33)]
                    QueryPallet {
                        module_name: ::std::vec::Vec<::core::primitive::u8>,
                        response_info: runtime_types::xcm::v3::QueryResponseInfo,
                    },
                    #[codec(index = 34)]
                    ExpectPallet {
                        #[codec(compact)]
                        index: ::core::primitive::u32,
                        name: ::std::vec::Vec<::core::primitive::u8>,
                        module_name: ::std::vec::Vec<::core::primitive::u8>,
                        #[codec(compact)]
                        crate_major: ::core::primitive::u32,
                        #[codec(compact)]
                        min_crate_minor: ::core::primitive::u32,
                    },
                    #[codec(index = 35)]
                    ReportTransactStatus(runtime_types::xcm::v3::QueryResponseInfo),
                    #[codec(index = 36)]
                    ClearTransactStatus,
                    #[codec(index = 37)]
                    UniversalOrigin(runtime_types::xcm::v3::junction::Junction),
                    #[codec(index = 38)]
                    ExportMessage {
                        network: runtime_types::xcm::v3::junction::NetworkId,
                        destination: runtime_types::xcm::v3::junctions::Junctions,
                        xcm: runtime_types::xcm::v3::Xcm,
                    },
                    #[codec(index = 39)]
                    LockAsset {
                        asset: runtime_types::xcm::v3::multiasset::MultiAsset,
                        unlocker: runtime_types::staging_xcm::v3::multilocation::MultiLocation,
                    },
                    #[codec(index = 40)]
                    UnlockAsset {
                        asset: runtime_types::xcm::v3::multiasset::MultiAsset,
                        target: runtime_types::staging_xcm::v3::multilocation::MultiLocation,
                    },
                    #[codec(index = 41)]
                    NoteUnlockable {
                        asset: runtime_types::xcm::v3::multiasset::MultiAsset,
                        owner: runtime_types::staging_xcm::v3::multilocation::MultiLocation,
                    },
                    #[codec(index = 42)]
                    RequestUnlock {
                        asset: runtime_types::xcm::v3::multiasset::MultiAsset,
                        locker: runtime_types::staging_xcm::v3::multilocation::MultiLocation,
                    },
                    #[codec(index = 43)]
                    SetFeesMode {
                        jit_withdraw: ::core::primitive::bool,
                    },
                    #[codec(index = 44)]
                    SetTopic([::core::primitive::u8; 32usize]),
                    #[codec(index = 45)]
                    ClearTopic,
                    #[codec(index = 46)]
                    AliasOrigin(runtime_types::staging_xcm::v3::multilocation::MultiLocation),
                    #[codec(index = 47)]
                    UnpaidExecution {
                        weight_limit: runtime_types::xcm::v3::WeightLimit,
                        check_origin: ::core::option::Option<
                            runtime_types::staging_xcm::v3::multilocation::MultiLocation,
                        >,
                    },
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum MaybeErrorCode {
                    #[codec(index = 0)]
                    Success,
                    #[codec(index = 1)]
                    Error(
                        runtime_types::bounded_collections::bounded_vec::BoundedVec<
                            ::core::primitive::u8,
                        >,
                    ),
                    #[codec(index = 2)]
                    TruncatedError(
                        runtime_types::bounded_collections::bounded_vec::BoundedVec<
                            ::core::primitive::u8,
                        >,
                    ),
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct PalletInfo {
                    #[codec(compact)]
                    pub index: ::core::primitive::u32,
                    pub name: runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        ::core::primitive::u8,
                    >,
                    pub module_name: runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        ::core::primitive::u8,
                    >,
                    #[codec(compact)]
                    pub major: ::core::primitive::u32,
                    #[codec(compact)]
                    pub minor: ::core::primitive::u32,
                    #[codec(compact)]
                    pub patch: ::core::primitive::u32,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct QueryResponseInfo {
                    pub destination: runtime_types::staging_xcm::v3::multilocation::MultiLocation,
                    #[codec(compact)]
                    pub query_id: ::core::primitive::u64,
                    pub max_weight: runtime_types::sp_weights::weight_v2::Weight,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum Response {
                    #[codec(index = 0)]
                    Null,
                    #[codec(index = 1)]
                    Assets(runtime_types::xcm::v3::multiasset::MultiAssets),
                    #[codec(index = 2)]
                    ExecutionResult(
                        ::core::option::Option<(
                            ::core::primitive::u32,
                            runtime_types::xcm::v3::traits::Error,
                        )>,
                    ),
                    #[codec(index = 3)]
                    Version(::core::primitive::u32),
                    #[codec(index = 4)]
                    PalletsInfo(
                        runtime_types::bounded_collections::bounded_vec::BoundedVec<
                            runtime_types::xcm::v3::PalletInfo,
                        >,
                    ),
                    #[codec(index = 5)]
                    DispatchResult(runtime_types::xcm::v3::MaybeErrorCode),
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum WeightLimit {
                    #[codec(index = 0)]
                    Unlimited,
                    #[codec(index = 1)]
                    Limited(runtime_types::sp_weights::weight_v2::Weight),
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Xcm(pub ::std::vec::Vec<runtime_types::xcm::v3::Instruction>);
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Xcm2(pub ::std::vec::Vec<runtime_types::xcm::v3::Instruction2>);
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub enum VersionedAssetId {
                #[codec(index = 3)]
                V3(runtime_types::xcm::v3::multiasset::AssetId),
                #[codec(index = 4)]
                V4(runtime_types::staging_xcm::v4::asset::AssetId),
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub enum VersionedAssets {
                #[codec(index = 1)]
                V2(runtime_types::xcm::v2::multiasset::MultiAssets),
                #[codec(index = 3)]
                V3(runtime_types::xcm::v3::multiasset::MultiAssets),
                #[codec(index = 4)]
                V4(runtime_types::staging_xcm::v4::asset::Assets),
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub enum VersionedLocation {
                #[codec(index = 1)]
                V2(runtime_types::xcm::v2::multilocation::MultiLocation),
                #[codec(index = 3)]
                V3(runtime_types::staging_xcm::v3::multilocation::MultiLocation),
                #[codec(index = 4)]
                V4(runtime_types::staging_xcm::v4::location::Location),
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub enum VersionedResponse {
                #[codec(index = 2)]
                V2(runtime_types::xcm::v2::Response),
                #[codec(index = 3)]
                V3(runtime_types::xcm::v3::Response),
                #[codec(index = 4)]
                V4(runtime_types::staging_xcm::v4::Response),
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub enum VersionedXcm {
                #[codec(index = 2)]
                V2(runtime_types::xcm::v2::Xcm),
                #[codec(index = 3)]
                V3(runtime_types::xcm::v3::Xcm),
                #[codec(index = 4)]
                V4(runtime_types::staging_xcm::v4::Xcm),
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub enum VersionedXcm2 {
                #[codec(index = 2)]
                V2(runtime_types::xcm::v2::Xcm2),
                #[codec(index = 3)]
                V3(runtime_types::xcm::v3::Xcm2),
                #[codec(index = 4)]
                V4(runtime_types::staging_xcm::v4::Xcm2),
            }
        }
    }
}
