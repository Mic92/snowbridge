pub use recipient_mock::*;
/// This module was auto-generated with ethers-rs Abigen.
/// More information at: <https://github.com/gakonst/ethers-rs>
#[allow(
    clippy::enum_variant_names,
    clippy::too_many_arguments,
    clippy::upper_case_acronyms,
    clippy::type_complexity,
    dead_code,
    non_camel_case_types,
)]
pub mod recipient_mock {
    #[rustfmt::skip]
    const __ABI: &str = "[{\"inputs\":[],\"type\":\"error\",\"name\":\"Failed\",\"outputs\":[]},{\"inputs\":[],\"type\":\"event\",\"name\":\"Called\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\",\"components\":[]},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"handle\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"setShouldConsumeAllGas\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"setShouldFail\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"setShouldPanic\",\"outputs\":[]}]";
    ///The parsed JSON ABI of the contract.
    pub static RECIPIENTMOCK_ABI: ::ethers::contract::Lazy<::ethers::core::abi::Abi> = ::ethers::contract::Lazy::new(||
    ::ethers::core::utils::__serde_json::from_str(__ABI).expect("ABI is always valid"));
    #[rustfmt::skip]
    const __BYTECODE: &[u8] = &[
        96,
        128,
        96,
        64,
        82,
        52,
        128,
        21,
        97,
        0,
        16,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        97,
        2,
        226,
        128,
        97,
        0,
        32,
        96,
        0,
        57,
        96,
        0,
        243,
        254,
        96,
        128,
        96,
        64,
        82,
        52,
        128,
        21,
        97,
        0,
        16,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        96,
        4,
        54,
        16,
        97,
        0,
        76,
        87,
        96,
        0,
        53,
        96,
        224,
        28,
        128,
        99,
        84,
        211,
        134,
        94,
        20,
        97,
        0,
        81,
        87,
        128,
        99,
        95,
        162,
        62,
        196,
        20,
        97,
        0,
        132,
        87,
        128,
        99,
        219,
        61,
        82,
        226,
        20,
        97,
        0,
        182,
        87,
        128,
        99,
        234,
        226,
        98,
        159,
        20,
        97,
        0,
        201,
        87,
        91,
        96,
        0,
        128,
        253,
        91,
        97,
        0,
        130,
        96,
        0,
        128,
        84,
        127,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        0,
        0,
        0,
        22,
        97,
        1,
        0,
        23,
        144,
        85,
        86,
        91,
        0,
        91,
        97,
        0,
        130,
        96,
        0,
        128,
        84,
        127,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        0,
        0,
        0,
        22,
        98,
        1,
        0,
        0,
        23,
        144,
        85,
        86,
        91,
        97,
        0,
        130,
        97,
        0,
        196,
        54,
        96,
        4,
        97,
        2,
        17,
        86,
        91,
        97,
        0,
        249,
        86,
        91,
        97,
        0,
        130,
        96,
        0,
        128,
        84,
        127,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        0,
        0,
        0,
        22,
        96,
        1,
        23,
        144,
        85,
        86,
        91,
        96,
        0,
        84,
        96,
        255,
        22,
        21,
        97,
        1,
        106,
        87,
        96,
        64,
        81,
        127,
        8,
        195,
        121,
        160,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        129,
        82,
        96,
        32,
        96,
        4,
        130,
        1,
        82,
        96,
        6,
        96,
        36,
        130,
        1,
        82,
        127,
        102,
        97,
        105,
        108,
        101,
        100,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        96,
        68,
        130,
        1,
        82,
        96,
        100,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        96,
        0,
        84,
        97,
        1,
        0,
        144,
        4,
        96,
        255,
        22,
        21,
        97,
        1,
        130,
        87,
        97,
        1,
        130,
        97,
        2,
        125,
        86,
        91,
        96,
        0,
        84,
        98,
        1,
        0,
        0,
        144,
        4,
        96,
        255,
        22,
        21,
        97,
        1,
        153,
        87,
        91,
        97,
        1,
        148,
        86,
        91,
        96,
        64,
        81,
        127,
        129,
        250,
        183,
        164,
        160,
        170,
        150,
        29,
        180,
        126,
        239,
        200,
        31,
        20,
        58,
        82,
        32,
        232,
        200,
        73,
        82,
        96,
        221,
        101,
        177,
        53,
        111,
        29,
        25,
        211,
        199,
        184,
        144,
        96,
        0,
        144,
        161,
        80,
        80,
        80,
        80,
        86,
        91,
        96,
        0,
        128,
        131,
        96,
        31,
        132,
        1,
        18,
        97,
        1,
        218,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        129,
        53,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        129,
        17,
        21,
        97,
        1,
        242,
        87,
        96,
        0,
        128,
        253,
        91,
        96,
        32,
        131,
        1,
        145,
        80,
        131,
        96,
        32,
        130,
        133,
        1,
        1,
        17,
        21,
        97,
        2,
        10,
        87,
        96,
        0,
        128,
        253,
        91,
        146,
        80,
        146,
        144,
        80,
        86,
        91,
        96,
        0,
        128,
        96,
        0,
        128,
        96,
        64,
        133,
        135,
        3,
        18,
        21,
        97,
        2,
        39,
        87,
        96,
        0,
        128,
        253,
        91,
        132,
        53,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        128,
        130,
        17,
        21,
        97,
        2,
        63,
        87,
        96,
        0,
        128,
        253,
        91,
        97,
        2,
        75,
        136,
        131,
        137,
        1,
        97,
        1,
        200,
        86,
        91,
        144,
        150,
        80,
        148,
        80,
        96,
        32,
        135,
        1,
        53,
        145,
        80,
        128,
        130,
        17,
        21,
        97,
        2,
        100,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        97,
        2,
        113,
        135,
        130,
        136,
        1,
        97,
        1,
        200,
        86,
        91,
        149,
        152,
        148,
        151,
        80,
        149,
        80,
        80,
        80,
        80,
        86,
        91,
        127,
        78,
        72,
        123,
        113,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        96,
        0,
        82,
        96,
        1,
        96,
        4,
        82,
        96,
        36,
        96,
        0,
        253,
        254,
        162,
        100,
        105,
        112,
        102,
        115,
        88,
        34,
        18,
        32,
        213,
        219,
        195,
        143,
        90,
        70,
        72,
        90,
        225,
        166,
        242,
        245,
        75,
        35,
        155,
        85,
        239,
        121,
        119,
        180,
        154,
        68,
        186,
        1,
        180,
        1,
        89,
        151,
        182,
        165,
        78,
        69,
        100,
        115,
        111,
        108,
        99,
        67,
        0,
        8,
        19,
        0,
        51,
    ];
    ///The bytecode of the contract.
    pub static RECIPIENTMOCK_BYTECODE: ::ethers::core::types::Bytes = ::ethers::core::types::Bytes::from_static(
        __BYTECODE,
    );
    #[rustfmt::skip]
    const __DEPLOYED_BYTECODE: &[u8] = &[
        96,
        128,
        96,
        64,
        82,
        52,
        128,
        21,
        97,
        0,
        16,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        96,
        4,
        54,
        16,
        97,
        0,
        76,
        87,
        96,
        0,
        53,
        96,
        224,
        28,
        128,
        99,
        84,
        211,
        134,
        94,
        20,
        97,
        0,
        81,
        87,
        128,
        99,
        95,
        162,
        62,
        196,
        20,
        97,
        0,
        132,
        87,
        128,
        99,
        219,
        61,
        82,
        226,
        20,
        97,
        0,
        182,
        87,
        128,
        99,
        234,
        226,
        98,
        159,
        20,
        97,
        0,
        201,
        87,
        91,
        96,
        0,
        128,
        253,
        91,
        97,
        0,
        130,
        96,
        0,
        128,
        84,
        127,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        0,
        0,
        0,
        22,
        97,
        1,
        0,
        23,
        144,
        85,
        86,
        91,
        0,
        91,
        97,
        0,
        130,
        96,
        0,
        128,
        84,
        127,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        0,
        0,
        0,
        22,
        98,
        1,
        0,
        0,
        23,
        144,
        85,
        86,
        91,
        97,
        0,
        130,
        97,
        0,
        196,
        54,
        96,
        4,
        97,
        2,
        17,
        86,
        91,
        97,
        0,
        249,
        86,
        91,
        97,
        0,
        130,
        96,
        0,
        128,
        84,
        127,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        0,
        0,
        0,
        22,
        96,
        1,
        23,
        144,
        85,
        86,
        91,
        96,
        0,
        84,
        96,
        255,
        22,
        21,
        97,
        1,
        106,
        87,
        96,
        64,
        81,
        127,
        8,
        195,
        121,
        160,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        129,
        82,
        96,
        32,
        96,
        4,
        130,
        1,
        82,
        96,
        6,
        96,
        36,
        130,
        1,
        82,
        127,
        102,
        97,
        105,
        108,
        101,
        100,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        96,
        68,
        130,
        1,
        82,
        96,
        100,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        96,
        0,
        84,
        97,
        1,
        0,
        144,
        4,
        96,
        255,
        22,
        21,
        97,
        1,
        130,
        87,
        97,
        1,
        130,
        97,
        2,
        125,
        86,
        91,
        96,
        0,
        84,
        98,
        1,
        0,
        0,
        144,
        4,
        96,
        255,
        22,
        21,
        97,
        1,
        153,
        87,
        91,
        97,
        1,
        148,
        86,
        91,
        96,
        64,
        81,
        127,
        129,
        250,
        183,
        164,
        160,
        170,
        150,
        29,
        180,
        126,
        239,
        200,
        31,
        20,
        58,
        82,
        32,
        232,
        200,
        73,
        82,
        96,
        221,
        101,
        177,
        53,
        111,
        29,
        25,
        211,
        199,
        184,
        144,
        96,
        0,
        144,
        161,
        80,
        80,
        80,
        80,
        86,
        91,
        96,
        0,
        128,
        131,
        96,
        31,
        132,
        1,
        18,
        97,
        1,
        218,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        129,
        53,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        129,
        17,
        21,
        97,
        1,
        242,
        87,
        96,
        0,
        128,
        253,
        91,
        96,
        32,
        131,
        1,
        145,
        80,
        131,
        96,
        32,
        130,
        133,
        1,
        1,
        17,
        21,
        97,
        2,
        10,
        87,
        96,
        0,
        128,
        253,
        91,
        146,
        80,
        146,
        144,
        80,
        86,
        91,
        96,
        0,
        128,
        96,
        0,
        128,
        96,
        64,
        133,
        135,
        3,
        18,
        21,
        97,
        2,
        39,
        87,
        96,
        0,
        128,
        253,
        91,
        132,
        53,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        128,
        130,
        17,
        21,
        97,
        2,
        63,
        87,
        96,
        0,
        128,
        253,
        91,
        97,
        2,
        75,
        136,
        131,
        137,
        1,
        97,
        1,
        200,
        86,
        91,
        144,
        150,
        80,
        148,
        80,
        96,
        32,
        135,
        1,
        53,
        145,
        80,
        128,
        130,
        17,
        21,
        97,
        2,
        100,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        97,
        2,
        113,
        135,
        130,
        136,
        1,
        97,
        1,
        200,
        86,
        91,
        149,
        152,
        148,
        151,
        80,
        149,
        80,
        80,
        80,
        80,
        86,
        91,
        127,
        78,
        72,
        123,
        113,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        96,
        0,
        82,
        96,
        1,
        96,
        4,
        82,
        96,
        36,
        96,
        0,
        253,
        254,
        162,
        100,
        105,
        112,
        102,
        115,
        88,
        34,
        18,
        32,
        213,
        219,
        195,
        143,
        90,
        70,
        72,
        90,
        225,
        166,
        242,
        245,
        75,
        35,
        155,
        85,
        239,
        121,
        119,
        180,
        154,
        68,
        186,
        1,
        180,
        1,
        89,
        151,
        182,
        165,
        78,
        69,
        100,
        115,
        111,
        108,
        99,
        67,
        0,
        8,
        19,
        0,
        51,
    ];
    ///The deployed bytecode of the contract.
    pub static RECIPIENTMOCK_DEPLOYED_BYTECODE: ::ethers::core::types::Bytes = ::ethers::core::types::Bytes::from_static(
        __DEPLOYED_BYTECODE,
    );
    pub struct RecipientMock<M>(::ethers::contract::Contract<M>);
    impl<M> ::core::clone::Clone for RecipientMock<M> {
        fn clone(&self) -> Self {
            Self(::core::clone::Clone::clone(&self.0))
        }
    }
    impl<M> ::core::ops::Deref for RecipientMock<M> {
        type Target = ::ethers::contract::Contract<M>;
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl<M> ::core::ops::DerefMut for RecipientMock<M> {
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl<M> ::core::fmt::Debug for RecipientMock<M> {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple(stringify!(RecipientMock)).field(&self.address()).finish()
        }
    }
    impl<M: ::ethers::providers::Middleware> RecipientMock<M> {
        /// Creates a new contract instance with the specified `ethers` client at
        /// `address`. The contract derefs to a `ethers::Contract` object.
        pub fn new<T: Into<::ethers::core::types::Address>>(
            address: T,
            client: ::std::sync::Arc<M>,
        ) -> Self {
            Self(
                ::ethers::contract::Contract::new(
                    address.into(),
                    RECIPIENTMOCK_ABI.clone(),
                    client,
                ),
            )
        }
        /// Constructs the general purpose `Deployer` instance based on the provided constructor arguments and sends it.
        /// Returns a new instance of a deployer that returns an instance of this contract after sending the transaction
        ///
        /// Notes:
        /// - If there are no constructor arguments, you should pass `()` as the argument.
        /// - The default poll duration is 7 seconds.
        /// - The default number of confirmations is 1 block.
        ///
        ///
        /// # Example
        ///
        /// Generate contract bindings with `abigen!` and deploy a new contract instance.
        ///
        /// *Note*: this requires a `bytecode` and `abi` object in the `greeter.json` artifact.
        ///
        /// ```ignore
        /// # async fn deploy<M: ethers::providers::Middleware>(client: ::std::sync::Arc<M>) {
        ///     abigen!(Greeter, "../greeter.json");
        ///
        ///    let greeter_contract = Greeter::deploy(client, "Hello world!".to_string()).unwrap().send().await.unwrap();
        ///    let msg = greeter_contract.greet().call().await.unwrap();
        /// # }
        /// ```
        pub fn deploy<T: ::ethers::core::abi::Tokenize>(
            client: ::std::sync::Arc<M>,
            constructor_args: T,
        ) -> ::core::result::Result<
            ::ethers::contract::builders::ContractDeployer<M, Self>,
            ::ethers::contract::ContractError<M>,
        > {
            let factory = ::ethers::contract::ContractFactory::new(
                RECIPIENTMOCK_ABI.clone(),
                RECIPIENTMOCK_BYTECODE.clone().into(),
                client,
            );
            let deployer = factory.deploy(constructor_args)?;
            let deployer = ::ethers::contract::ContractDeployer::new(deployer);
            Ok(deployer)
        }
        ///Calls the contract's `handle` (0xdb3d52e2) function
        pub fn handle(
            &self,
            p0: ::ethers::core::types::Bytes,
            p1: ::ethers::core::types::Bytes,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([219, 61, 82, 226], (p0, p1))
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `setShouldConsumeAllGas` (0x5fa23ec4) function
        pub fn set_should_consume_all_gas(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([95, 162, 62, 196], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `setShouldFail` (0xeae2629f) function
        pub fn set_should_fail(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([234, 226, 98, 159], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `setShouldPanic` (0x54d3865e) function
        pub fn set_should_panic(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([84, 211, 134, 94], ())
                .expect("method not found (this should never happen)")
        }
        ///Gets the contract's `Called` event
        pub fn called_filter(
            &self,
        ) -> ::ethers::contract::builders::Event<::std::sync::Arc<M>, M, CalledFilter> {
            self.0.event()
        }
        /// Returns an `Event` builder for all the events of this contract.
        pub fn events(
            &self,
        ) -> ::ethers::contract::builders::Event<::std::sync::Arc<M>, M, CalledFilter> {
            self.0.event_with_filter(::core::default::Default::default())
        }
    }
    impl<M: ::ethers::providers::Middleware> From<::ethers::contract::Contract<M>>
    for RecipientMock<M> {
        fn from(contract: ::ethers::contract::Contract<M>) -> Self {
            Self::new(contract.address(), contract.client())
        }
    }
    ///Custom Error type `Failed` with signature `Failed()` and selector `0x625a40e6`
    #[derive(
        Clone,
        ::ethers::contract::EthError,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[etherror(name = "Failed", abi = "Failed()")]
    pub struct Failed;
    #[derive(
        Clone,
        ::ethers::contract::EthEvent,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethevent(name = "Called", abi = "Called()")]
    pub struct CalledFilter;
    ///Container type for all input parameters for the `handle` function with signature `handle(bytes,bytes)` and selector `0xdb3d52e2`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "handle", abi = "handle(bytes,bytes)")]
    pub struct HandleCall(
        pub ::ethers::core::types::Bytes,
        pub ::ethers::core::types::Bytes,
    );
    ///Container type for all input parameters for the `setShouldConsumeAllGas` function with signature `setShouldConsumeAllGas()` and selector `0x5fa23ec4`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "setShouldConsumeAllGas", abi = "setShouldConsumeAllGas()")]
    pub struct SetShouldConsumeAllGasCall;
    ///Container type for all input parameters for the `setShouldFail` function with signature `setShouldFail()` and selector `0xeae2629f`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "setShouldFail", abi = "setShouldFail()")]
    pub struct SetShouldFailCall;
    ///Container type for all input parameters for the `setShouldPanic` function with signature `setShouldPanic()` and selector `0x54d3865e`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "setShouldPanic", abi = "setShouldPanic()")]
    pub struct SetShouldPanicCall;
    ///Container type for all of the contract's call
    #[derive(Clone, ::ethers::contract::EthAbiType, Debug, PartialEq, Eq, Hash)]
    pub enum RecipientMockCalls {
        Handle(HandleCall),
        SetShouldConsumeAllGas(SetShouldConsumeAllGasCall),
        SetShouldFail(SetShouldFailCall),
        SetShouldPanic(SetShouldPanicCall),
    }
    impl ::ethers::core::abi::AbiDecode for RecipientMockCalls {
        fn decode(
            data: impl AsRef<[u8]>,
        ) -> ::core::result::Result<Self, ::ethers::core::abi::AbiError> {
            let data = data.as_ref();
            if let Ok(decoded)
                = <HandleCall as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::Handle(decoded));
            }
            if let Ok(decoded)
                = <SetShouldConsumeAllGasCall as ::ethers::core::abi::AbiDecode>::decode(
                    data,
                ) {
                return Ok(Self::SetShouldConsumeAllGas(decoded));
            }
            if let Ok(decoded)
                = <SetShouldFailCall as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::SetShouldFail(decoded));
            }
            if let Ok(decoded)
                = <SetShouldPanicCall as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::SetShouldPanic(decoded));
            }
            Err(::ethers::core::abi::Error::InvalidData.into())
        }
    }
    impl ::ethers::core::abi::AbiEncode for RecipientMockCalls {
        fn encode(self) -> Vec<u8> {
            match self {
                Self::Handle(element) => ::ethers::core::abi::AbiEncode::encode(element),
                Self::SetShouldConsumeAllGas(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::SetShouldFail(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::SetShouldPanic(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
            }
        }
    }
    impl ::core::fmt::Display for RecipientMockCalls {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            match self {
                Self::Handle(element) => ::core::fmt::Display::fmt(element, f),
                Self::SetShouldConsumeAllGas(element) => {
                    ::core::fmt::Display::fmt(element, f)
                }
                Self::SetShouldFail(element) => ::core::fmt::Display::fmt(element, f),
                Self::SetShouldPanic(element) => ::core::fmt::Display::fmt(element, f),
            }
        }
    }
    impl ::core::convert::From<HandleCall> for RecipientMockCalls {
        fn from(value: HandleCall) -> Self {
            Self::Handle(value)
        }
    }
    impl ::core::convert::From<SetShouldConsumeAllGasCall> for RecipientMockCalls {
        fn from(value: SetShouldConsumeAllGasCall) -> Self {
            Self::SetShouldConsumeAllGas(value)
        }
    }
    impl ::core::convert::From<SetShouldFailCall> for RecipientMockCalls {
        fn from(value: SetShouldFailCall) -> Self {
            Self::SetShouldFail(value)
        }
    }
    impl ::core::convert::From<SetShouldPanicCall> for RecipientMockCalls {
        fn from(value: SetShouldPanicCall) -> Self {
            Self::SetShouldPanic(value)
        }
    }
}
