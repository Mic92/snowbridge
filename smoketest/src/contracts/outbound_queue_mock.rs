pub use outbound_queue_mock::*;
/// This module was auto-generated with ethers-rs Abigen.
/// More information at: <https://github.com/gakonst/ethers-rs>
#[allow(
    clippy::enum_variant_names,
    clippy::too_many_arguments,
    clippy::upper_case_acronyms,
    clippy::type_complexity,
    dead_code,
    non_camel_case_types,
)]
pub mod outbound_queue_mock {
    #[rustfmt::skip]
    const __ABI: &str = "[{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"dest\",\"type\":\"bytes\",\"components\":[],\"indexed\":false},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"Message\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"dest\",\"type\":\"bytes\",\"components\":[]},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\",\"components\":[]}],\"stateMutability\":\"payable\",\"type\":\"function\",\"name\":\"submit\",\"outputs\":[]}]";
    ///The parsed JSON ABI of the contract.
    pub static OUTBOUNDQUEUEMOCK_ABI: ::ethers::contract::Lazy<
        ::ethers::core::abi::Abi,
    > = ::ethers::contract::Lazy::new(|| {
        ::ethers::core::utils::__serde_json::from_str(__ABI)
            .expect("ABI is always valid")
    });
    #[rustfmt::skip]
    const __BYTECODE: &[u8] = &[
        96,
        128,
        96,
        64,
        82,
        52,
        128,
        21,
        97,
        0,
        16,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        97,
        1,
        225,
        128,
        97,
        0,
        32,
        96,
        0,
        57,
        96,
        0,
        243,
        254,
        96,
        128,
        96,
        64,
        82,
        96,
        4,
        54,
        16,
        97,
        0,
        30,
        87,
        96,
        0,
        53,
        96,
        224,
        28,
        128,
        99,
        57,
        185,
        115,
        173,
        20,
        97,
        0,
        35,
        87,
        91,
        96,
        0,
        128,
        253,
        91,
        97,
        0,
        54,
        97,
        0,
        49,
        54,
        96,
        4,
        97,
        0,
        196,
        86,
        91,
        97,
        0,
        56,
        86,
        91,
        0,
        91,
        127,
        126,
        187,
        200,
        223,
        205,
        112,
        214,
        231,
        177,
        104,
        199,
        239,
        235,
        204,
        66,
        100,
        237,
        33,
        231,
        122,
        131,
        33,
        3,
        64,
        105,
        23,
        163,
        219,
        214,
        214,
        51,
        158,
        132,
        132,
        132,
        132,
        96,
        64,
        81,
        97,
        0,
        109,
        148,
        147,
        146,
        145,
        144,
        97,
        1,
        121,
        86,
        91,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        161,
        80,
        80,
        80,
        80,
        86,
        91,
        96,
        0,
        128,
        131,
        96,
        31,
        132,
        1,
        18,
        97,
        0,
        141,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        129,
        53,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        129,
        17,
        21,
        97,
        0,
        165,
        87,
        96,
        0,
        128,
        253,
        91,
        96,
        32,
        131,
        1,
        145,
        80,
        131,
        96,
        32,
        130,
        133,
        1,
        1,
        17,
        21,
        97,
        0,
        189,
        87,
        96,
        0,
        128,
        253,
        91,
        146,
        80,
        146,
        144,
        80,
        86,
        91,
        96,
        0,
        128,
        96,
        0,
        128,
        96,
        64,
        133,
        135,
        3,
        18,
        21,
        97,
        0,
        218,
        87,
        96,
        0,
        128,
        253,
        91,
        132,
        53,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        128,
        130,
        17,
        21,
        97,
        0,
        242,
        87,
        96,
        0,
        128,
        253,
        91,
        97,
        0,
        254,
        136,
        131,
        137,
        1,
        97,
        0,
        123,
        86,
        91,
        144,
        150,
        80,
        148,
        80,
        96,
        32,
        135,
        1,
        53,
        145,
        80,
        128,
        130,
        17,
        21,
        97,
        1,
        23,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        97,
        1,
        36,
        135,
        130,
        136,
        1,
        97,
        0,
        123,
        86,
        91,
        149,
        152,
        148,
        151,
        80,
        149,
        80,
        80,
        80,
        80,
        86,
        91,
        129,
        131,
        82,
        129,
        129,
        96,
        32,
        133,
        1,
        55,
        80,
        96,
        0,
        96,
        32,
        130,
        132,
        1,
        1,
        82,
        96,
        0,
        96,
        32,
        127,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        224,
        96,
        31,
        132,
        1,
        22,
        132,
        1,
        1,
        144,
        80,
        146,
        145,
        80,
        80,
        86,
        91,
        96,
        64,
        129,
        82,
        96,
        0,
        97,
        1,
        141,
        96,
        64,
        131,
        1,
        134,
        136,
        97,
        1,
        48,
        86,
        91,
        130,
        129,
        3,
        96,
        32,
        132,
        1,
        82,
        97,
        1,
        160,
        129,
        133,
        135,
        97,
        1,
        48,
        86,
        91,
        151,
        150,
        80,
        80,
        80,
        80,
        80,
        80,
        80,
        86,
        254,
        162,
        100,
        105,
        112,
        102,
        115,
        88,
        34,
        18,
        32,
        82,
        142,
        83,
        11,
        65,
        18,
        184,
        141,
        187,
        198,
        126,
        73,
        211,
        13,
        115,
        93,
        120,
        132,
        101,
        37,
        249,
        97,
        174,
        205,
        25,
        157,
        99,
        86,
        192,
        87,
        49,
        86,
        100,
        115,
        111,
        108,
        99,
        67,
        0,
        8,
        19,
        0,
        51,
    ];
    ///The bytecode of the contract.
    pub static OUTBOUNDQUEUEMOCK_BYTECODE: ::ethers::core::types::Bytes = ::ethers::core::types::Bytes::from_static(
        __BYTECODE,
    );
    #[rustfmt::skip]
    const __DEPLOYED_BYTECODE: &[u8] = &[
        96,
        128,
        96,
        64,
        82,
        96,
        4,
        54,
        16,
        97,
        0,
        30,
        87,
        96,
        0,
        53,
        96,
        224,
        28,
        128,
        99,
        57,
        185,
        115,
        173,
        20,
        97,
        0,
        35,
        87,
        91,
        96,
        0,
        128,
        253,
        91,
        97,
        0,
        54,
        97,
        0,
        49,
        54,
        96,
        4,
        97,
        0,
        196,
        86,
        91,
        97,
        0,
        56,
        86,
        91,
        0,
        91,
        127,
        126,
        187,
        200,
        223,
        205,
        112,
        214,
        231,
        177,
        104,
        199,
        239,
        235,
        204,
        66,
        100,
        237,
        33,
        231,
        122,
        131,
        33,
        3,
        64,
        105,
        23,
        163,
        219,
        214,
        214,
        51,
        158,
        132,
        132,
        132,
        132,
        96,
        64,
        81,
        97,
        0,
        109,
        148,
        147,
        146,
        145,
        144,
        97,
        1,
        121,
        86,
        91,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        161,
        80,
        80,
        80,
        80,
        86,
        91,
        96,
        0,
        128,
        131,
        96,
        31,
        132,
        1,
        18,
        97,
        0,
        141,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        129,
        53,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        129,
        17,
        21,
        97,
        0,
        165,
        87,
        96,
        0,
        128,
        253,
        91,
        96,
        32,
        131,
        1,
        145,
        80,
        131,
        96,
        32,
        130,
        133,
        1,
        1,
        17,
        21,
        97,
        0,
        189,
        87,
        96,
        0,
        128,
        253,
        91,
        146,
        80,
        146,
        144,
        80,
        86,
        91,
        96,
        0,
        128,
        96,
        0,
        128,
        96,
        64,
        133,
        135,
        3,
        18,
        21,
        97,
        0,
        218,
        87,
        96,
        0,
        128,
        253,
        91,
        132,
        53,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        128,
        130,
        17,
        21,
        97,
        0,
        242,
        87,
        96,
        0,
        128,
        253,
        91,
        97,
        0,
        254,
        136,
        131,
        137,
        1,
        97,
        0,
        123,
        86,
        91,
        144,
        150,
        80,
        148,
        80,
        96,
        32,
        135,
        1,
        53,
        145,
        80,
        128,
        130,
        17,
        21,
        97,
        1,
        23,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        97,
        1,
        36,
        135,
        130,
        136,
        1,
        97,
        0,
        123,
        86,
        91,
        149,
        152,
        148,
        151,
        80,
        149,
        80,
        80,
        80,
        80,
        86,
        91,
        129,
        131,
        82,
        129,
        129,
        96,
        32,
        133,
        1,
        55,
        80,
        96,
        0,
        96,
        32,
        130,
        132,
        1,
        1,
        82,
        96,
        0,
        96,
        32,
        127,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        224,
        96,
        31,
        132,
        1,
        22,
        132,
        1,
        1,
        144,
        80,
        146,
        145,
        80,
        80,
        86,
        91,
        96,
        64,
        129,
        82,
        96,
        0,
        97,
        1,
        141,
        96,
        64,
        131,
        1,
        134,
        136,
        97,
        1,
        48,
        86,
        91,
        130,
        129,
        3,
        96,
        32,
        132,
        1,
        82,
        97,
        1,
        160,
        129,
        133,
        135,
        97,
        1,
        48,
        86,
        91,
        151,
        150,
        80,
        80,
        80,
        80,
        80,
        80,
        80,
        86,
        254,
        162,
        100,
        105,
        112,
        102,
        115,
        88,
        34,
        18,
        32,
        82,
        142,
        83,
        11,
        65,
        18,
        184,
        141,
        187,
        198,
        126,
        73,
        211,
        13,
        115,
        93,
        120,
        132,
        101,
        37,
        249,
        97,
        174,
        205,
        25,
        157,
        99,
        86,
        192,
        87,
        49,
        86,
        100,
        115,
        111,
        108,
        99,
        67,
        0,
        8,
        19,
        0,
        51,
    ];
    ///The deployed bytecode of the contract.
    pub static OUTBOUNDQUEUEMOCK_DEPLOYED_BYTECODE: ::ethers::core::types::Bytes = ::ethers::core::types::Bytes::from_static(
        __DEPLOYED_BYTECODE,
    );
    pub struct OutboundQueueMock<M>(::ethers::contract::Contract<M>);
    impl<M> ::core::clone::Clone for OutboundQueueMock<M> {
        fn clone(&self) -> Self {
            Self(::core::clone::Clone::clone(&self.0))
        }
    }
    impl<M> ::core::ops::Deref for OutboundQueueMock<M> {
        type Target = ::ethers::contract::Contract<M>;
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl<M> ::core::ops::DerefMut for OutboundQueueMock<M> {
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl<M> ::core::fmt::Debug for OutboundQueueMock<M> {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple(stringify!(OutboundQueueMock)).field(&self.address()).finish()
        }
    }
    impl<M: ::ethers::providers::Middleware> OutboundQueueMock<M> {
        /// Creates a new contract instance with the specified `ethers` client at
        /// `address`. The contract derefs to a `ethers::Contract` object.
        pub fn new<T: Into<::ethers::core::types::Address>>(
            address: T,
            client: ::std::sync::Arc<M>,
        ) -> Self {
            Self(
                ::ethers::contract::Contract::new(
                    address.into(),
                    OUTBOUNDQUEUEMOCK_ABI.clone(),
                    client,
                ),
            )
        }
        /// Constructs the general purpose `Deployer` instance based on the provided constructor arguments and sends it.
        /// Returns a new instance of a deployer that returns an instance of this contract after sending the transaction
        ///
        /// Notes:
        /// - If there are no constructor arguments, you should pass `()` as the argument.
        /// - The default poll duration is 7 seconds.
        /// - The default number of confirmations is 1 block.
        ///
        ///
        /// # Example
        ///
        /// Generate contract bindings with `abigen!` and deploy a new contract instance.
        ///
        /// *Note*: this requires a `bytecode` and `abi` object in the `greeter.json` artifact.
        ///
        /// ```ignore
        /// # async fn deploy<M: ethers::providers::Middleware>(client: ::std::sync::Arc<M>) {
        ///     abigen!(Greeter, "../greeter.json");
        ///
        ///    let greeter_contract = Greeter::deploy(client, "Hello world!".to_string()).unwrap().send().await.unwrap();
        ///    let msg = greeter_contract.greet().call().await.unwrap();
        /// # }
        /// ```
        pub fn deploy<T: ::ethers::core::abi::Tokenize>(
            client: ::std::sync::Arc<M>,
            constructor_args: T,
        ) -> ::core::result::Result<
            ::ethers::contract::builders::ContractDeployer<M, Self>,
            ::ethers::contract::ContractError<M>,
        > {
            let factory = ::ethers::contract::ContractFactory::new(
                OUTBOUNDQUEUEMOCK_ABI.clone(),
                OUTBOUNDQUEUEMOCK_BYTECODE.clone().into(),
                client,
            );
            let deployer = factory.deploy(constructor_args)?;
            let deployer = ::ethers::contract::ContractDeployer::new(deployer);
            Ok(deployer)
        }
        ///Calls the contract's `submit` (0x39b973ad) function
        pub fn submit(
            &self,
            dest: ::ethers::core::types::Bytes,
            payload: ::ethers::core::types::Bytes,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([57, 185, 115, 173], (dest, payload))
                .expect("method not found (this should never happen)")
        }
        ///Gets the contract's `Message` event
        pub fn message_filter(
            &self,
        ) -> ::ethers::contract::builders::Event<::std::sync::Arc<M>, M, MessageFilter> {
            self.0.event()
        }
        /// Returns an `Event` builder for all the events of this contract.
        pub fn events(
            &self,
        ) -> ::ethers::contract::builders::Event<::std::sync::Arc<M>, M, MessageFilter> {
            self.0.event_with_filter(::core::default::Default::default())
        }
    }
    impl<M: ::ethers::providers::Middleware> From<::ethers::contract::Contract<M>>
    for OutboundQueueMock<M> {
        fn from(contract: ::ethers::contract::Contract<M>) -> Self {
            Self::new(contract.address(), contract.client())
        }
    }
    #[derive(
        Clone,
        ::ethers::contract::EthEvent,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethevent(name = "Message", abi = "Message(bytes,bytes)")]
    pub struct MessageFilter {
        pub dest: ::ethers::core::types::Bytes,
        pub payload: ::ethers::core::types::Bytes,
    }
    ///Container type for all input parameters for the `submit` function with signature `submit(bytes,bytes)` and selector `0x39b973ad`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "submit", abi = "submit(bytes,bytes)")]
    pub struct SubmitCall {
        pub dest: ::ethers::core::types::Bytes,
        pub payload: ::ethers::core::types::Bytes,
    }
}
