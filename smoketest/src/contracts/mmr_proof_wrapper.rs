pub use mmr_proof_wrapper::*;
/// This module was auto-generated with ethers-rs Abigen.
/// More information at: <https://github.com/gakonst/ethers-rs>
#[allow(
    clippy::enum_variant_names,
    clippy::too_many_arguments,
    clippy::upper_case_acronyms,
    clippy::type_complexity,
    dead_code,
    non_camel_case_types,
)]
pub mod mmr_proof_wrapper {
    #[rustfmt::skip]
    const __ABI: &str = "[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\",\"components\":[]},{\"internalType\":\"bytes32\",\"name\":\"leafHash\",\"type\":\"bytes32\",\"components\":[]},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"proofOrder\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"pure\",\"type\":\"function\",\"name\":\"verifyLeafProof\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\",\"components\":[]}]}]";
    ///The parsed JSON ABI of the contract.
    pub static MMRPROOFWRAPPER_ABI: ::ethers::contract::Lazy<::ethers::core::abi::Abi> = ::ethers::contract::Lazy::new(||
    ::ethers::core::utils::__serde_json::from_str(__ABI).expect("ABI is always valid"));
    #[rustfmt::skip]
    const __BYTECODE: &[u8] = &[
        96,
        128,
        96,
        64,
        82,
        52,
        128,
        21,
        97,
        0,
        16,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        97,
        1,
        218,
        128,
        97,
        0,
        32,
        96,
        0,
        57,
        96,
        0,
        243,
        254,
        96,
        128,
        96,
        64,
        82,
        52,
        128,
        21,
        97,
        0,
        16,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        96,
        4,
        54,
        16,
        97,
        0,
        43,
        87,
        96,
        0,
        53,
        96,
        224,
        28,
        128,
        99,
        231,
        33,
        21,
        237,
        20,
        97,
        0,
        48,
        87,
        91,
        96,
        0,
        128,
        253,
        91,
        97,
        0,
        67,
        97,
        0,
        62,
        54,
        96,
        4,
        97,
        0,
        234,
        86,
        91,
        97,
        0,
        87,
        86,
        91,
        96,
        64,
        81,
        144,
        21,
        21,
        129,
        82,
        96,
        32,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        243,
        91,
        96,
        0,
        97,
        0,
        102,
        134,
        134,
        134,
        134,
        134,
        97,
        0,
        112,
        86,
        91,
        150,
        149,
        80,
        80,
        80,
        80,
        80,
        80,
        86,
        91,
        96,
        0,
        132,
        129,
        91,
        132,
        129,
        16,
        21,
        97,
        0,
        176,
        87,
        97,
        0,
        166,
        130,
        135,
        135,
        132,
        129,
        129,
        16,
        97,
        0,
        147,
        87,
        97,
        0,
        147,
        97,
        1,
        117,
        86,
        91,
        144,
        80,
        96,
        32,
        2,
        1,
        53,
        131,
        135,
        144,
        28,
        96,
        1,
        22,
        97,
        0,
        189,
        86,
        91,
        145,
        80,
        96,
        1,
        1,
        97,
        0,
        117,
        86,
        91,
        80,
        144,
        149,
        20,
        149,
        148,
        80,
        80,
        80,
        80,
        80,
        86,
        91,
        96,
        0,
        129,
        128,
        21,
        97,
        0,
        211,
        87,
        131,
        96,
        0,
        82,
        132,
        96,
        32,
        82,
        97,
        0,
        220,
        86,
        91,
        132,
        96,
        0,
        82,
        131,
        96,
        32,
        82,
        91,
        80,
        80,
        96,
        64,
        96,
        0,
        32,
        147,
        146,
        80,
        80,
        80,
        86,
        91,
        96,
        0,
        128,
        96,
        0,
        128,
        96,
        0,
        96,
        128,
        134,
        136,
        3,
        18,
        21,
        97,
        1,
        2,
        87,
        96,
        0,
        128,
        253,
        91,
        133,
        53,
        148,
        80,
        96,
        32,
        134,
        1,
        53,
        147,
        80,
        96,
        64,
        134,
        1,
        53,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        128,
        130,
        17,
        21,
        97,
        1,
        40,
        87,
        96,
        0,
        128,
        253,
        91,
        129,
        136,
        1,
        145,
        80,
        136,
        96,
        31,
        131,
        1,
        18,
        97,
        1,
        60,
        87,
        96,
        0,
        128,
        253,
        91,
        129,
        53,
        129,
        129,
        17,
        21,
        97,
        1,
        75,
        87,
        96,
        0,
        128,
        253,
        91,
        137,
        96,
        32,
        130,
        96,
        5,
        27,
        133,
        1,
        1,
        17,
        21,
        97,
        1,
        96,
        87,
        96,
        0,
        128,
        253,
        91,
        150,
        153,
        149,
        152,
        80,
        80,
        96,
        32,
        1,
        149,
        96,
        96,
        1,
        53,
        147,
        146,
        80,
        80,
        80,
        86,
        91,
        127,
        78,
        72,
        123,
        113,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        96,
        0,
        82,
        96,
        50,
        96,
        4,
        82,
        96,
        36,
        96,
        0,
        253,
        254,
        162,
        100,
        105,
        112,
        102,
        115,
        88,
        34,
        18,
        32,
        254,
        143,
        26,
        174,
        23,
        122,
        197,
        240,
        146,
        35,
        72,
        216,
        228,
        253,
        191,
        178,
        80,
        235,
        48,
        154,
        161,
        15,
        221,
        244,
        106,
        104,
        52,
        9,
        130,
        157,
        46,
        61,
        100,
        115,
        111,
        108,
        99,
        67,
        0,
        8,
        19,
        0,
        51,
    ];
    ///The bytecode of the contract.
    pub static MMRPROOFWRAPPER_BYTECODE: ::ethers::core::types::Bytes = ::ethers::core::types::Bytes::from_static(
        __BYTECODE,
    );
    #[rustfmt::skip]
    const __DEPLOYED_BYTECODE: &[u8] = &[
        96,
        128,
        96,
        64,
        82,
        52,
        128,
        21,
        97,
        0,
        16,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        96,
        4,
        54,
        16,
        97,
        0,
        43,
        87,
        96,
        0,
        53,
        96,
        224,
        28,
        128,
        99,
        231,
        33,
        21,
        237,
        20,
        97,
        0,
        48,
        87,
        91,
        96,
        0,
        128,
        253,
        91,
        97,
        0,
        67,
        97,
        0,
        62,
        54,
        96,
        4,
        97,
        0,
        234,
        86,
        91,
        97,
        0,
        87,
        86,
        91,
        96,
        64,
        81,
        144,
        21,
        21,
        129,
        82,
        96,
        32,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        243,
        91,
        96,
        0,
        97,
        0,
        102,
        134,
        134,
        134,
        134,
        134,
        97,
        0,
        112,
        86,
        91,
        150,
        149,
        80,
        80,
        80,
        80,
        80,
        80,
        86,
        91,
        96,
        0,
        132,
        129,
        91,
        132,
        129,
        16,
        21,
        97,
        0,
        176,
        87,
        97,
        0,
        166,
        130,
        135,
        135,
        132,
        129,
        129,
        16,
        97,
        0,
        147,
        87,
        97,
        0,
        147,
        97,
        1,
        117,
        86,
        91,
        144,
        80,
        96,
        32,
        2,
        1,
        53,
        131,
        135,
        144,
        28,
        96,
        1,
        22,
        97,
        0,
        189,
        86,
        91,
        145,
        80,
        96,
        1,
        1,
        97,
        0,
        117,
        86,
        91,
        80,
        144,
        149,
        20,
        149,
        148,
        80,
        80,
        80,
        80,
        80,
        86,
        91,
        96,
        0,
        129,
        128,
        21,
        97,
        0,
        211,
        87,
        131,
        96,
        0,
        82,
        132,
        96,
        32,
        82,
        97,
        0,
        220,
        86,
        91,
        132,
        96,
        0,
        82,
        131,
        96,
        32,
        82,
        91,
        80,
        80,
        96,
        64,
        96,
        0,
        32,
        147,
        146,
        80,
        80,
        80,
        86,
        91,
        96,
        0,
        128,
        96,
        0,
        128,
        96,
        0,
        96,
        128,
        134,
        136,
        3,
        18,
        21,
        97,
        1,
        2,
        87,
        96,
        0,
        128,
        253,
        91,
        133,
        53,
        148,
        80,
        96,
        32,
        134,
        1,
        53,
        147,
        80,
        96,
        64,
        134,
        1,
        53,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        128,
        130,
        17,
        21,
        97,
        1,
        40,
        87,
        96,
        0,
        128,
        253,
        91,
        129,
        136,
        1,
        145,
        80,
        136,
        96,
        31,
        131,
        1,
        18,
        97,
        1,
        60,
        87,
        96,
        0,
        128,
        253,
        91,
        129,
        53,
        129,
        129,
        17,
        21,
        97,
        1,
        75,
        87,
        96,
        0,
        128,
        253,
        91,
        137,
        96,
        32,
        130,
        96,
        5,
        27,
        133,
        1,
        1,
        17,
        21,
        97,
        1,
        96,
        87,
        96,
        0,
        128,
        253,
        91,
        150,
        153,
        149,
        152,
        80,
        80,
        96,
        32,
        1,
        149,
        96,
        96,
        1,
        53,
        147,
        146,
        80,
        80,
        80,
        86,
        91,
        127,
        78,
        72,
        123,
        113,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        96,
        0,
        82,
        96,
        50,
        96,
        4,
        82,
        96,
        36,
        96,
        0,
        253,
        254,
        162,
        100,
        105,
        112,
        102,
        115,
        88,
        34,
        18,
        32,
        254,
        143,
        26,
        174,
        23,
        122,
        197,
        240,
        146,
        35,
        72,
        216,
        228,
        253,
        191,
        178,
        80,
        235,
        48,
        154,
        161,
        15,
        221,
        244,
        106,
        104,
        52,
        9,
        130,
        157,
        46,
        61,
        100,
        115,
        111,
        108,
        99,
        67,
        0,
        8,
        19,
        0,
        51,
    ];
    ///The deployed bytecode of the contract.
    pub static MMRPROOFWRAPPER_DEPLOYED_BYTECODE: ::ethers::core::types::Bytes = ::ethers::core::types::Bytes::from_static(
        __DEPLOYED_BYTECODE,
    );
    pub struct MMRProofWrapper<M>(::ethers::contract::Contract<M>);
    impl<M> ::core::clone::Clone for MMRProofWrapper<M> {
        fn clone(&self) -> Self {
            Self(::core::clone::Clone::clone(&self.0))
        }
    }
    impl<M> ::core::ops::Deref for MMRProofWrapper<M> {
        type Target = ::ethers::contract::Contract<M>;
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl<M> ::core::ops::DerefMut for MMRProofWrapper<M> {
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl<M> ::core::fmt::Debug for MMRProofWrapper<M> {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple(stringify!(MMRProofWrapper)).field(&self.address()).finish()
        }
    }
    impl<M: ::ethers::providers::Middleware> MMRProofWrapper<M> {
        /// Creates a new contract instance with the specified `ethers` client at
        /// `address`. The contract derefs to a `ethers::Contract` object.
        pub fn new<T: Into<::ethers::core::types::Address>>(
            address: T,
            client: ::std::sync::Arc<M>,
        ) -> Self {
            Self(
                ::ethers::contract::Contract::new(
                    address.into(),
                    MMRPROOFWRAPPER_ABI.clone(),
                    client,
                ),
            )
        }
        /// Constructs the general purpose `Deployer` instance based on the provided constructor arguments and sends it.
        /// Returns a new instance of a deployer that returns an instance of this contract after sending the transaction
        ///
        /// Notes:
        /// - If there are no constructor arguments, you should pass `()` as the argument.
        /// - The default poll duration is 7 seconds.
        /// - The default number of confirmations is 1 block.
        ///
        ///
        /// # Example
        ///
        /// Generate contract bindings with `abigen!` and deploy a new contract instance.
        ///
        /// *Note*: this requires a `bytecode` and `abi` object in the `greeter.json` artifact.
        ///
        /// ```ignore
        /// # async fn deploy<M: ethers::providers::Middleware>(client: ::std::sync::Arc<M>) {
        ///     abigen!(Greeter, "../greeter.json");
        ///
        ///    let greeter_contract = Greeter::deploy(client, "Hello world!".to_string()).unwrap().send().await.unwrap();
        ///    let msg = greeter_contract.greet().call().await.unwrap();
        /// # }
        /// ```
        pub fn deploy<T: ::ethers::core::abi::Tokenize>(
            client: ::std::sync::Arc<M>,
            constructor_args: T,
        ) -> ::core::result::Result<
            ::ethers::contract::builders::ContractDeployer<M, Self>,
            ::ethers::contract::ContractError<M>,
        > {
            let factory = ::ethers::contract::ContractFactory::new(
                MMRPROOFWRAPPER_ABI.clone(),
                MMRPROOFWRAPPER_BYTECODE.clone().into(),
                client,
            );
            let deployer = factory.deploy(constructor_args)?;
            let deployer = ::ethers::contract::ContractDeployer::new(deployer);
            Ok(deployer)
        }
        ///Calls the contract's `verifyLeafProof` (0xe72115ed) function
        pub fn verify_leaf_proof(
            &self,
            root: [u8; 32],
            leaf_hash: [u8; 32],
            proof: ::std::vec::Vec<[u8; 32]>,
            proof_order: ::ethers::core::types::U256,
        ) -> ::ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([231, 33, 21, 237], (root, leaf_hash, proof, proof_order))
                .expect("method not found (this should never happen)")
        }
    }
    impl<M: ::ethers::providers::Middleware> From<::ethers::contract::Contract<M>>
    for MMRProofWrapper<M> {
        fn from(contract: ::ethers::contract::Contract<M>) -> Self {
            Self::new(contract.address(), contract.client())
        }
    }
    ///Container type for all input parameters for the `verifyLeafProof` function with signature `verifyLeafProof(bytes32,bytes32,bytes32[],uint256)` and selector `0xe72115ed`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(
        name = "verifyLeafProof",
        abi = "verifyLeafProof(bytes32,bytes32,bytes32[],uint256)"
    )]
    pub struct VerifyLeafProofCall {
        pub root: [u8; 32],
        pub leaf_hash: [u8; 32],
        pub proof: ::std::vec::Vec<[u8; 32]>,
        pub proof_order: ::ethers::core::types::U256,
    }
    ///Container type for all return fields from the `verifyLeafProof` function with signature `verifyLeafProof(bytes32,bytes32,bytes32[],uint256)` and selector `0xe72115ed`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct VerifyLeafProofReturn(pub bool);
}
